
99.WASHING_MACHINE_PROJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cc0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08007e6c  08007e6c  00017e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f98  08007f98  0002019c  2**0
                  CONTENTS
  4 .ARM          00000008  08007f98  08007f98  00017f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fa0  08007fa0  0002019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fa0  08007fa0  00017fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fa4  08007fa4  00017fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  08007fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002019c  2**0
                  CONTENTS
 10 .bss          00000c3c  2000019c  2000019c  0002019c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000dd8  20000dd8  0002019c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001be09  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034dc  00000000  00000000  0003bfd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001740  00000000  00000000  0003f4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001600  00000000  00000000  00040bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004118  00000000  00000000  000421f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bb7b  00000000  00000000  00046310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed3f7  00000000  00000000  00061e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014f282  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a1c  00000000  00000000  0014f2d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000019c 	.word	0x2000019c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007e54 	.word	0x08007e54

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200001a0 	.word	0x200001a0
 80001e8:	08007e54 	.word	0x08007e54

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <init_dotmatrix>:
// 초기화 작업
// 1. display_data에 number_data[0]에 있는 내용 복사
// 2. number_data를 scroll_buffer에 복사
// 3. dotmatrix의 led를 off
void init_dotmatrix(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
   for (int i = 0; i < 8; i++)
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	e011      	b.n	8000520 <init_dotmatrix+0x30>
   {
      display_data[i] = number_data[8-i];
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	f1c3 0208 	rsb	r2, r3, #8
 8000502:	4613      	mov	r3, r2
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	4413      	add	r3, r2
 8000508:	005b      	lsls	r3, r3, #1
 800050a:	4a27      	ldr	r2, [pc, #156]	; (80005a8 <init_dotmatrix+0xb8>)
 800050c:	4413      	add	r3, r2
 800050e:	b2d9      	uxtb	r1, r3
 8000510:	4a26      	ldr	r2, [pc, #152]	; (80005ac <init_dotmatrix+0xbc>)
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	4413      	add	r3, r2
 8000516:	460a      	mov	r2, r1
 8000518:	701a      	strb	r2, [r3, #0]
   for (int i = 0; i < 8; i++)
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	3301      	adds	r3, #1
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	2b07      	cmp	r3, #7
 8000524:	ddea      	ble.n	80004fc <init_dotmatrix+0xc>
   }
   for (int i = 1; i < number_of_character + 1; i++)
 8000526:	2301      	movs	r3, #1
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	e01e      	b.n	800056a <init_dotmatrix+0x7a>
   {
      for (int j = 0; j < 8; j++)
 800052c:	2300      	movs	r3, #0
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	e015      	b.n	800055e <init_dotmatrix+0x6e>
      {
         scroll_buffer[i][j] = number_data[i-1][j];
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	1e5a      	subs	r2, r3, #1
 8000536:	491c      	ldr	r1, [pc, #112]	; (80005a8 <init_dotmatrix+0xb8>)
 8000538:	4613      	mov	r3, r2
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	4413      	add	r3, r2
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	18ca      	adds	r2, r1, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4413      	add	r3, r2
 8000546:	7819      	ldrb	r1, [r3, #0]
 8000548:	4a19      	ldr	r2, [pc, #100]	; (80005b0 <init_dotmatrix+0xc0>)
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	00db      	lsls	r3, r3, #3
 800054e:	441a      	add	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4413      	add	r3, r2
 8000554:	460a      	mov	r2, r1
 8000556:	701a      	strb	r2, [r3, #0]
      for (int j = 0; j < 8; j++)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	3301      	adds	r3, #1
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2b07      	cmp	r3, #7
 8000562:	dde6      	ble.n	8000532 <init_dotmatrix+0x42>
   for (int i = 1; i < number_of_character + 1; i++)
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	3301      	adds	r3, #1
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <init_dotmatrix+0xc4>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	68ba      	ldr	r2, [r7, #8]
 8000570:	429a      	cmp	r2, r3
 8000572:	dddb      	ble.n	800052c <init_dotmatrix+0x3c>
      }
   }
   for (int i = 0; i < 8; i++)
 8000574:	2300      	movs	r3, #0
 8000576:	603b      	str	r3, [r7, #0]
 8000578:	e00e      	b.n	8000598 <init_dotmatrix+0xa8>
   {
      HAL_GPIO_WritePin(col_port[i], col_pin[i], 1);   // led all off
 800057a:	4a0f      	ldr	r2, [pc, #60]	; (80005b8 <init_dotmatrix+0xc8>)
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000582:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <init_dotmatrix+0xcc>)
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800058a:	2201      	movs	r2, #1
 800058c:	4619      	mov	r1, r3
 800058e:	f002 fb75 	bl	8002c7c <HAL_GPIO_WritePin>
   for (int i = 0; i < 8; i++)
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	3301      	adds	r3, #1
 8000596:	603b      	str	r3, [r7, #0]
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	2b07      	cmp	r3, #7
 800059c:	dded      	ble.n	800057a <init_dotmatrix+0x8a>
   }
}
 800059e:	bf00      	nop
 80005a0:	bf00      	nop
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000060 	.word	0x20000060
 80005ac:	200001b8 	.word	0x200001b8
 80005b0:	200001c0 	.word	0x200001c0
 80005b4:	20000128 	.word	0x20000128
 80005b8:	20000000 	.word	0x20000000
 80005bc:	20000050 	.word	0x20000050

080005c0 <write_column_data>:
      0b11111111
#endif
};

void write_column_data(int col)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
   for (int i = 0; i < 8; i++)
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	e01f      	b.n	800060e <write_column_data+0x4e>
   {
      if (i == col)
 80005ce:	68fa      	ldr	r2, [r7, #12]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d10c      	bne.n	80005f0 <write_column_data+0x30>
         HAL_GPIO_WritePin(col_port[i], col_pin[i], 0); // on
 80005d6:	4a12      	ldr	r2, [pc, #72]	; (8000620 <write_column_data+0x60>)
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005de:	4a11      	ldr	r2, [pc, #68]	; (8000624 <write_column_data+0x64>)
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005e6:	2200      	movs	r2, #0
 80005e8:	4619      	mov	r1, r3
 80005ea:	f002 fb47 	bl	8002c7c <HAL_GPIO_WritePin>
 80005ee:	e00b      	b.n	8000608 <write_column_data+0x48>
      else HAL_GPIO_WritePin(col_port[i], col_pin[i], 1); // off
 80005f0:	4a0b      	ldr	r2, [pc, #44]	; (8000620 <write_column_data+0x60>)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005f8:	4a0a      	ldr	r2, [pc, #40]	; (8000624 <write_column_data+0x64>)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000600:	2201      	movs	r2, #1
 8000602:	4619      	mov	r1, r3
 8000604:	f002 fb3a 	bl	8002c7c <HAL_GPIO_WritePin>
   for (int i = 0; i < 8; i++)
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	3301      	adds	r3, #1
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	2b07      	cmp	r3, #7
 8000612:	dddc      	ble.n	80005ce <write_column_data+0xe>
   }
}
 8000614:	bf00      	nop
 8000616:	bf00      	nop
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000000 	.word	0x20000000
 8000624:	20000050 	.word	0x20000050

08000628 <write_row_data>:

// 0b00111100
void write_row_data(unsigned char data)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
   unsigned char d;   // 오리지널 데이터 변형을 막기 위해

   d = data;
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	72fb      	strb	r3, [r7, #11]
   for (int i = 0; i < 8; i++)
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	e023      	b.n	8000684 <write_row_data+0x5c>
   {
      if (d & (1 << i))   // 1인 경우
 800063c:	7afa      	ldrb	r2, [r7, #11]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	fa42 f303 	asr.w	r3, r2, r3
 8000644:	f003 0301 	and.w	r3, r3, #1
 8000648:	2b00      	cmp	r3, #0
 800064a:	d00c      	beq.n	8000666 <write_row_data+0x3e>
         HAL_GPIO_WritePin(row_port[i], row_pin[i], 1);
 800064c:	4a11      	ldr	r2, [pc, #68]	; (8000694 <write_row_data+0x6c>)
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000654:	4a10      	ldr	r2, [pc, #64]	; (8000698 <write_row_data+0x70>)
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800065c:	2201      	movs	r2, #1
 800065e:	4619      	mov	r1, r3
 8000660:	f002 fb0c 	bl	8002c7c <HAL_GPIO_WritePin>
 8000664:	e00b      	b.n	800067e <write_row_data+0x56>
      else HAL_GPIO_WritePin(row_port[i], row_pin[i], 0);
 8000666:	4a0b      	ldr	r2, [pc, #44]	; (8000694 <write_row_data+0x6c>)
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800066e:	4a0a      	ldr	r2, [pc, #40]	; (8000698 <write_row_data+0x70>)
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000676:	2200      	movs	r2, #0
 8000678:	4619      	mov	r1, r3
 800067a:	f002 faff 	bl	8002c7c <HAL_GPIO_WritePin>
   for (int i = 0; i < 8; i++)
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	3301      	adds	r3, #1
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	2b07      	cmp	r3, #7
 8000688:	ddd8      	ble.n	800063c <write_row_data+0x14>
   }
}
 800068a:	bf00      	nop
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000020 	.word	0x20000020
 8000698:	20000040 	.word	0x20000040

0800069c <dotmatrix_main_test>:
#if 1
// scroll 문자 출력 프로그램
int dotmatrix_main_test(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
   static int count = 0;    // static으로 지역변수를 전역변수처럼 사용할 수 있음
   static int index = 0;   // column count, scroll_buffer의 2차원 index 값
   static uint32_t past_time = 0;   // 이전 tick값 저장

   init_dotmatrix();
 80006a2:	f7ff ff25 	bl	80004f0 <init_dotmatrix>

   while(1)
   {
      uint32_t now = HAL_GetTick();   // 1ms
 80006a6:	f001 fc41 	bl	8001f2c <HAL_GetTick>
 80006aa:	6078      	str	r0, [r7, #4]
      // 처음 시작 시 past_time = 0;
      if (now - past_time >= 500)   // 500ms scroll
 80006ac:	4b35      	ldr	r3, [pc, #212]	; (8000784 <dotmatrix_main_test+0xe8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80006b8:	d34d      	bcc.n	8000756 <dotmatrix_main_test+0xba>
      {
         past_time = now;
 80006ba:	4a32      	ldr	r2, [pc, #200]	; (8000784 <dotmatrix_main_test+0xe8>)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	6013      	str	r3, [r2, #0]
         for (int i = 0; i < 8; i++)
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	e029      	b.n	800071a <dotmatrix_main_test+0x7e>
         {
            display_data[i] = (scroll_buffer[index][i] >> count) | (scroll_buffer[index + 1][i] << 8 - count);
 80006c6:	4b30      	ldr	r3, [pc, #192]	; (8000788 <dotmatrix_main_test+0xec>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a30      	ldr	r2, [pc, #192]	; (800078c <dotmatrix_main_test+0xf0>)
 80006cc:	00db      	lsls	r3, r3, #3
 80006ce:	441a      	add	r2, r3
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	4413      	add	r3, r2
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	461a      	mov	r2, r3
 80006d8:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <dotmatrix_main_test+0xf4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	fa42 f303 	asr.w	r3, r2, r3
 80006e0:	b25a      	sxtb	r2, r3
 80006e2:	4b29      	ldr	r3, [pc, #164]	; (8000788 <dotmatrix_main_test+0xec>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	3301      	adds	r3, #1
 80006e8:	4928      	ldr	r1, [pc, #160]	; (800078c <dotmatrix_main_test+0xf0>)
 80006ea:	00db      	lsls	r3, r3, #3
 80006ec:	4419      	add	r1, r3
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	440b      	add	r3, r1
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	4619      	mov	r1, r3
 80006f6:	4b26      	ldr	r3, [pc, #152]	; (8000790 <dotmatrix_main_test+0xf4>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f1c3 0308 	rsb	r3, r3, #8
 80006fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000702:	b25b      	sxtb	r3, r3
 8000704:	4313      	orrs	r3, r2
 8000706:	b25b      	sxtb	r3, r3
 8000708:	b2d9      	uxtb	r1, r3
 800070a:	4a22      	ldr	r2, [pc, #136]	; (8000794 <dotmatrix_main_test+0xf8>)
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	4413      	add	r3, r2
 8000710:	460a      	mov	r2, r1
 8000712:	701a      	strb	r2, [r3, #0]
         for (int i = 0; i < 8; i++)
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	3301      	adds	r3, #1
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	2b07      	cmp	r3, #7
 800071e:	ddd2      	ble.n	80006c6 <dotmatrix_main_test+0x2a>
         }
         if (++count == 8)   // 8칼럼을 다 처리 했으면 다음 스크롤 버퍼로 이동
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <dotmatrix_main_test+0xf4>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	3301      	adds	r3, #1
 8000726:	4a1a      	ldr	r2, [pc, #104]	; (8000790 <dotmatrix_main_test+0xf4>)
 8000728:	6013      	str	r3, [r2, #0]
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <dotmatrix_main_test+0xf4>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2b08      	cmp	r3, #8
 8000730:	d111      	bne.n	8000756 <dotmatrix_main_test+0xba>
         {
            count = 0;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <dotmatrix_main_test+0xf4>)
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
            index++;   // 다음 스크롤 버퍼로 이동
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <dotmatrix_main_test+0xec>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	3301      	adds	r3, #1
 800073e:	4a12      	ldr	r2, [pc, #72]	; (8000788 <dotmatrix_main_test+0xec>)
 8000740:	6013      	str	r3, [r2, #0]
            if (index == number_of_character + 1) index = 0;
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <dotmatrix_main_test+0xfc>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	1c5a      	adds	r2, r3, #1
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <dotmatrix_main_test+0xec>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	429a      	cmp	r2, r3
 800074e:	d102      	bne.n	8000756 <dotmatrix_main_test+0xba>
 8000750:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <dotmatrix_main_test+0xec>)
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
            // 11개의 문자를 다 처리했으면 0번 scroll_buffer를 처리하기 위해 이동한다
         }
      }
      for (int i = 0; i < 8; i++)
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	e00f      	b.n	800077c <dotmatrix_main_test+0xe0>
      {
         // 공통 양극 방식 (common anode)
         // column에는 0을, row에는 1을 출력해야 해당 LED가 켜진다
         write_column_data(i);
 800075c:	68b8      	ldr	r0, [r7, #8]
 800075e:	f7ff ff2f 	bl	80005c0 <write_column_data>
         write_row_data(display_data[i]);
 8000762:	4a0c      	ldr	r2, [pc, #48]	; (8000794 <dotmatrix_main_test+0xf8>)
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	4413      	add	r3, r2
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff ff5c 	bl	8000628 <write_row_data>

         HAL_Delay(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f001 fbe7 	bl	8001f44 <HAL_Delay>
      for (int i = 0; i < 8; i++)
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	3301      	adds	r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	2b07      	cmp	r3, #7
 8000780:	ddec      	ble.n	800075c <dotmatrix_main_test+0xc0>
   {
 8000782:	e790      	b.n	80006a6 <dotmatrix_main_test+0xa>
 8000784:	20000350 	.word	0x20000350
 8000788:	20000354 	.word	0x20000354
 800078c:	200001c0 	.word	0x200001c0
 8000790:	20000358 	.word	0x20000358
 8000794:	200001b8 	.word	0x200001b8
 8000798:	20000128 	.word	0x20000128

0800079c <HAL_SYSTICK_Handler>:
// call by SysTick_Handler of stm32f4xx_it.c
// ARM default timer
// enter here every 1ms
volatile int t1ms_counter=0;  // volatile : for disable optimize
void HAL_SYSTICK_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
	t1ms_counter++;   // 1ms timer
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <HAL_SYSTICK_Handler+0x18>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	3301      	adds	r3, #1
 80007a6:	4a03      	ldr	r2, [pc, #12]	; (80007b4 <HAL_SYSTICK_Handler+0x18>)
 80007a8:	6013      	str	r3, [r2, #0]
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	20000d48 	.word	0x20000d48

080007b8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80007c0:	1d39      	adds	r1, r7, #4
 80007c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007c6:	2201      	movs	r2, #1
 80007c8:	4803      	ldr	r0, [pc, #12]	; (80007d8 <__io_putchar+0x20>)
 80007ca:	f005 fae6 	bl	8005d9a <HAL_UART_Transmit>

  return ch;
 80007ce:	687b      	ldr	r3, [r7, #4]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	200007a8 	.word	0x200007a8

080007dc <HAL_TIM_PeriodElapsedCallback>:

// move from Driver/STM32F4xx_HAL_Driver/stm32f4xx_hal_tim.c to here
// enter here when every timer INT occurs

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a09      	ldr	r2, [pc, #36]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d109      	bne.n	8000802 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		TIM10_10ms_counter++;  // 10ms timer counter
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	3301      	adds	r3, #1
 80007f4:	4a07      	ldr	r2, [pc, #28]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80007f6:	6013      	str	r3, [r2, #0]
		TIM10_10ms_ultrasonic++;  // ultrasonic trigger timer
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	3301      	adds	r3, #1
 80007fe:	4a06      	ldr	r2, [pc, #24]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000800:	6013      	str	r3, [r2, #0]
	}
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40014400 	.word	0x40014400
 8000814:	20000d40 	.word	0x20000d40
 8000818:	20000d44 	.word	0x20000d44

0800081c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000820:	f001 fb1e 	bl	8001e60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000824:	f000 f856 	bl	80008d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000828:	f000 fc0c 	bl	8001044 <MX_GPIO_Init>
  MX_ETH_Init();
 800082c:	f000 f8be 	bl	80009ac <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000830:	f000 fb86 	bl	8000f40 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000834:	f000 fbd8 	bl	8000fe8 <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 8000838:	f000 fbac 	bl	8000f94 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 800083c:	f000 fb38 	bl	8000eb0 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000840:	f000 fb5a 	bl	8000ef8 <MX_TIM11_Init>
  MX_TIM3_Init();
 8000844:	f000 f9f4 	bl	8000c30 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000848:	f000 fa46 	bl	8000cd8 <MX_TIM4_Init>
  MX_TIM2_Init();
 800084c:	f000 f996 	bl	8000b7c <MX_TIM2_Init>
  MX_RTC_Init();
 8000850:	f000 f93a 	bl	8000ac8 <MX_RTC_Init>
  MX_TIM5_Init();
 8000854:	f000 fab6 	bl	8000dc4 <MX_TIM5_Init>
  MX_I2C1_Init();
 8000858:	f000 f8f6 	bl	8000a48 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data, 1);   // assing to RX INT
 800085c:	2201      	movs	r2, #1
 800085e:	4912      	ldr	r1, [pc, #72]	; (80008a8 <main+0x8c>)
 8000860:	4812      	ldr	r0, [pc, #72]	; (80008ac <main+0x90>)
 8000862:	f005 fb2c 	bl	8005ebe <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);   // for BT assing to RX INT
 8000866:	2201      	movs	r2, #1
 8000868:	4911      	ldr	r1, [pc, #68]	; (80008b0 <main+0x94>)
 800086a:	4812      	ldr	r0, [pc, #72]	; (80008b4 <main+0x98>)
 800086c:	f005 fb27 	bl	8005ebe <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim10);   // ADD_SIKWON_1011
 8000870:	4811      	ldr	r0, [pc, #68]	; (80008b8 <main+0x9c>)
 8000872:	f003 fdd5 	bl	8004420 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);   // ADD_SIKWON_1011
 8000876:	4811      	ldr	r0, [pc, #68]	; (80008bc <main+0xa0>)
 8000878:	f003 fdd2 	bl	8004420 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);   // for count pulse(rising edge & falling edge)
 800087c:	2100      	movs	r1, #0
 800087e:	4810      	ldr	r0, [pc, #64]	; (80008c0 <main+0xa4>)
 8000880:	f004 f8bc 	bl	80049fc <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);  // for DC motor PWM control
 8000884:	2100      	movs	r1, #0
 8000886:	480f      	ldr	r0, [pc, #60]	; (80008c4 <main+0xa8>)
 8000888:	f003 ff52 	bl	8004730 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);   // for SERVO motor PWM control
 800088c:	2100      	movs	r1, #0
 800088e:	480e      	ldr	r0, [pc, #56]	; (80008c8 <main+0xac>)
 8000890:	f003 fe86 	bl	80045a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);   // PIEZO Buzzer
 8000894:	210c      	movs	r1, #12
 8000896:	480d      	ldr	r0, [pc, #52]	; (80008cc <main+0xb0>)
 8000898:	f003 fe82 	bl	80045a0 <HAL_TIM_PWM_Start>

//  DHT11_Init();
//  i2c_lcd_init();

  TIM10_10ms_counter=0;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <main+0xb4>)
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  dotmatrix_main_test();
 80008a2:	f7ff fefb 	bl	800069c <dotmatrix_main_test>

  while (1)
 80008a6:	e7fe      	b.n	80008a6 <main+0x8a>
 80008a8:	20000d3c 	.word	0x20000d3c
 80008ac:	200007a8 	.word	0x200007a8
 80008b0:	20000d3d 	.word	0x20000d3d
 80008b4:	200007ec 	.word	0x200007ec
 80008b8:	20000718 	.word	0x20000718
 80008bc:	20000760 	.word	0x20000760
 80008c0:	20000640 	.word	0x20000640
 80008c4:	20000688 	.word	0x20000688
 80008c8:	200005f8 	.word	0x200005f8
 80008cc:	200006d0 	.word	0x200006d0
 80008d0:	20000d40 	.word	0x20000d40

080008d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b094      	sub	sp, #80	; 0x50
 80008d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008da:	f107 0320 	add.w	r3, r7, #32
 80008de:	2230      	movs	r2, #48	; 0x30
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f006 fdb0 	bl	8007448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f8:	2300      	movs	r3, #0
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	4b29      	ldr	r3, [pc, #164]	; (80009a4 <SystemClock_Config+0xd0>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000900:	4a28      	ldr	r2, [pc, #160]	; (80009a4 <SystemClock_Config+0xd0>)
 8000902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000906:	6413      	str	r3, [r2, #64]	; 0x40
 8000908:	4b26      	ldr	r3, [pc, #152]	; (80009a4 <SystemClock_Config+0xd0>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000914:	2300      	movs	r3, #0
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <SystemClock_Config+0xd4>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a22      	ldr	r2, [pc, #136]	; (80009a8 <SystemClock_Config+0xd4>)
 800091e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000922:	6013      	str	r3, [r2, #0]
 8000924:	4b20      	ldr	r3, [pc, #128]	; (80009a8 <SystemClock_Config+0xd4>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000930:	2309      	movs	r3, #9
 8000932:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000934:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800093a:	2301      	movs	r3, #1
 800093c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093e:	2302      	movs	r3, #2
 8000940:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000942:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000946:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000948:	2304      	movs	r3, #4
 800094a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800094c:	23a8      	movs	r3, #168	; 0xa8
 800094e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000950:	2302      	movs	r3, #2
 8000952:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000954:	2307      	movs	r3, #7
 8000956:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000958:	f107 0320 	add.w	r3, r7, #32
 800095c:	4618      	mov	r0, r3
 800095e:	f002 fc83 	bl	8003268 <HAL_RCC_OscConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000968:	f000 fc9a 	bl	80012a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096c:	230f      	movs	r3, #15
 800096e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000970:	2302      	movs	r3, #2
 8000972:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000978:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800097c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800097e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000982:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	2105      	movs	r1, #5
 800098a:	4618      	mov	r0, r3
 800098c:	f002 fee4 	bl	8003758 <HAL_RCC_ClockConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000996:	f000 fc83 	bl	80012a0 <Error_Handler>
  }
}
 800099a:	bf00      	nop
 800099c:	3750      	adds	r7, #80	; 0x50
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40007000 	.word	0x40007000

080009ac <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009b0:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <MX_ETH_Init+0x84>)
 80009b2:	4a20      	ldr	r2, [pc, #128]	; (8000a34 <MX_ETH_Init+0x88>)
 80009b4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009b6:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <MX_ETH_Init+0x8c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009bc:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <MX_ETH_Init+0x8c>)
 80009be:	2280      	movs	r2, #128	; 0x80
 80009c0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009c2:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <MX_ETH_Init+0x8c>)
 80009c4:	22e1      	movs	r2, #225	; 0xe1
 80009c6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009c8:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <MX_ETH_Init+0x8c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <MX_ETH_Init+0x8c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009d4:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <MX_ETH_Init+0x8c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <MX_ETH_Init+0x84>)
 80009dc:	4a16      	ldr	r2, [pc, #88]	; (8000a38 <MX_ETH_Init+0x8c>)
 80009de:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009e0:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_ETH_Init+0x84>)
 80009e2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009e6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_ETH_Init+0x84>)
 80009ea:	4a14      	ldr	r2, [pc, #80]	; (8000a3c <MX_ETH_Init+0x90>)
 80009ec:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <MX_ETH_Init+0x84>)
 80009f0:	4a13      	ldr	r2, [pc, #76]	; (8000a40 <MX_ETH_Init+0x94>)
 80009f2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_ETH_Init+0x84>)
 80009f6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80009fa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009fc:	480c      	ldr	r0, [pc, #48]	; (8000a30 <MX_ETH_Init+0x84>)
 80009fe:	f001 fc69 	bl	80022d4 <HAL_ETH_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a08:	f000 fc4a 	bl	80012a0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a0c:	2238      	movs	r2, #56	; 0x38
 8000a0e:	2100      	movs	r1, #0
 8000a10:	480c      	ldr	r0, [pc, #48]	; (8000a44 <MX_ETH_Init+0x98>)
 8000a12:	f006 fd19 	bl	8007448 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_ETH_Init+0x98>)
 8000a18:	2221      	movs	r2, #33	; 0x21
 8000a1a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_ETH_Init+0x98>)
 8000a1e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000a22:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <MX_ETH_Init+0x98>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200004d4 	.word	0x200004d4
 8000a34:	40028000 	.word	0x40028000
 8000a38:	20000d4c 	.word	0x20000d4c
 8000a3c:	20000434 	.word	0x20000434
 8000a40:	20000394 	.word	0x20000394
 8000a44:	2000035c 	.word	0x2000035c

08000a48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a4c:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <MX_I2C1_Init+0x74>)
 8000a4e:	4a1c      	ldr	r2, [pc, #112]	; (8000ac0 <MX_I2C1_Init+0x78>)
 8000a50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a52:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <MX_I2C1_Init+0x74>)
 8000a54:	4a1b      	ldr	r2, [pc, #108]	; (8000ac4 <MX_I2C1_Init+0x7c>)
 8000a56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a58:	4b18      	ldr	r3, [pc, #96]	; (8000abc <MX_I2C1_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a5e:	4b17      	ldr	r3, [pc, #92]	; (8000abc <MX_I2C1_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a64:	4b15      	ldr	r3, [pc, #84]	; (8000abc <MX_I2C1_Init+0x74>)
 8000a66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <MX_I2C1_Init+0x74>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <MX_I2C1_Init+0x74>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a78:	4b10      	ldr	r3, [pc, #64]	; (8000abc <MX_I2C1_Init+0x74>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <MX_I2C1_Init+0x74>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a84:	480d      	ldr	r0, [pc, #52]	; (8000abc <MX_I2C1_Init+0x74>)
 8000a86:	f002 f913 	bl	8002cb0 <HAL_I2C_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a90:	f000 fc06 	bl	80012a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a94:	2100      	movs	r1, #0
 8000a96:	4809      	ldr	r0, [pc, #36]	; (8000abc <MX_I2C1_Init+0x74>)
 8000a98:	f002 fa4e 	bl	8002f38 <HAL_I2CEx_ConfigAnalogFilter>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000aa2:	f000 fbfd 	bl	80012a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4804      	ldr	r0, [pc, #16]	; (8000abc <MX_I2C1_Init+0x74>)
 8000aaa:	f002 fa81 	bl	8002fb0 <HAL_I2CEx_ConfigDigitalFilter>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000ab4:	f000 fbf4 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000584 	.word	0x20000584
 8000ac0:	40005400 	.word	0x40005400
 8000ac4:	000186a0 	.word	0x000186a0

08000ac8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000adc:	2300      	movs	r3, #0
 8000ade:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ae0:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <MX_RTC_Init+0xac>)
 8000ae2:	4a25      	ldr	r2, [pc, #148]	; (8000b78 <MX_RTC_Init+0xb0>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ae6:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <MX_RTC_Init+0xac>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000aec:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <MX_RTC_Init+0xac>)
 8000aee:	227f      	movs	r2, #127	; 0x7f
 8000af0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000af2:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <MX_RTC_Init+0xac>)
 8000af4:	22ff      	movs	r2, #255	; 0xff
 8000af6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000af8:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <MX_RTC_Init+0xac>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000afe:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <MX_RTC_Init+0xac>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b04:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <MX_RTC_Init+0xac>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b0a:	481a      	ldr	r0, [pc, #104]	; (8000b74 <MX_RTC_Init+0xac>)
 8000b0c:	f003 fa04 	bl	8003f18 <HAL_RTC_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000b16:	f000 fbc3 	bl	80012a0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8000b1a:	2309      	movs	r3, #9
 8000b1c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x38;
 8000b1e:	2338      	movs	r3, #56	; 0x38
 8000b20:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	2201      	movs	r2, #1
 8000b32:	4619      	mov	r1, r3
 8000b34:	480f      	ldr	r0, [pc, #60]	; (8000b74 <MX_RTC_Init+0xac>)
 8000b36:	f003 fa65 	bl	8004004 <HAL_RTC_SetTime>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000b40:	f000 fbae 	bl	80012a0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000b44:	2301      	movs	r3, #1
 8000b46:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8000b48:	2310      	movs	r3, #16
 8000b4a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8000b4c:	2316      	movs	r3, #22
 8000b4e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8000b50:	2323      	movs	r3, #35	; 0x23
 8000b52:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b54:	463b      	mov	r3, r7
 8000b56:	2201      	movs	r2, #1
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4806      	ldr	r0, [pc, #24]	; (8000b74 <MX_RTC_Init+0xac>)
 8000b5c:	f003 faec 	bl	8004138 <HAL_RTC_SetDate>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000b66:	f000 fb9b 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200005d8 	.word	0x200005d8
 8000b78:	40002800 	.word	0x40002800

08000b7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b82:	f107 0320 	add.w	r3, r7, #32
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
 8000b98:	611a      	str	r2, [r3, #16]
 8000b9a:	615a      	str	r2, [r3, #20]
 8000b9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b9e:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <MX_TIM2_Init+0xb0>)
 8000ba0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ba4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8000ba6:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <MX_TIM2_Init+0xb0>)
 8000ba8:	f240 628f 	movw	r2, #1679	; 0x68f
 8000bac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bae:	4b1f      	ldr	r3, [pc, #124]	; (8000c2c <MX_TIM2_Init+0xb0>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000bb4:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <MX_TIM2_Init+0xb0>)
 8000bb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	; (8000c2c <MX_TIM2_Init+0xb0>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc2:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <MX_TIM2_Init+0xb0>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bc8:	4818      	ldr	r0, [pc, #96]	; (8000c2c <MX_TIM2_Init+0xb0>)
 8000bca:	f003 fc99 	bl	8004500 <HAL_TIM_PWM_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000bd4:	f000 fb64 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000be0:	f107 0320 	add.w	r3, r7, #32
 8000be4:	4619      	mov	r1, r3
 8000be6:	4811      	ldr	r0, [pc, #68]	; (8000c2c <MX_TIM2_Init+0xb0>)
 8000be8:	f004 fffa 	bl	8005be0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000bf2:	f000 fb55 	bl	80012a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bf6:	2360      	movs	r3, #96	; 0x60
 8000bf8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8000bfa:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000bfe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4807      	ldr	r0, [pc, #28]	; (8000c2c <MX_TIM2_Init+0xb0>)
 8000c10:	f004 f9c0 	bl	8004f94 <HAL_TIM_PWM_ConfigChannel>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000c1a:	f000 fb41 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c1e:	4803      	ldr	r0, [pc, #12]	; (8000c2c <MX_TIM2_Init+0xb0>)
 8000c20:	f000 fd9c 	bl	800175c <HAL_TIM_MspPostInit>

}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	; 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	200005f8 	.word	0x200005f8

08000c30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c36:	f107 0310 	add.w	r3, r7, #16
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c40:	463b      	mov	r3, r7
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c4c:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <MX_TIM3_Init+0xa0>)
 8000c4e:	4a21      	ldr	r2, [pc, #132]	; (8000cd4 <MX_TIM3_Init+0xa4>)
 8000c50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000c52:	4b1f      	ldr	r3, [pc, #124]	; (8000cd0 <MX_TIM3_Init+0xa0>)
 8000c54:	2253      	movs	r2, #83	; 0x53
 8000c56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c58:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <MX_TIM3_Init+0xa0>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <MX_TIM3_Init+0xa0>)
 8000c60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c66:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <MX_TIM3_Init+0xa0>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6c:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <MX_TIM3_Init+0xa0>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000c72:	4817      	ldr	r0, [pc, #92]	; (8000cd0 <MX_TIM3_Init+0xa0>)
 8000c74:	f003 fe72 	bl	800495c <HAL_TIM_IC_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000c7e:	f000 fb0f 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480f      	ldr	r0, [pc, #60]	; (8000cd0 <MX_TIM3_Init+0xa0>)
 8000c92:	f004 ffa5 	bl	8005be0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c9c:	f000 fb00 	bl	80012a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000ca0:	230a      	movs	r3, #10
 8000ca2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <MX_TIM3_Init+0xa0>)
 8000cb8:	f004 f8d0 	bl	8004e5c <HAL_TIM_IC_ConfigChannel>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000cc2:	f000 faed 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000640 	.word	0x20000640
 8000cd4:	40000400 	.word	0x40000400

08000cd8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08e      	sub	sp, #56	; 0x38
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cec:	f107 0320 	add.w	r3, r7, #32
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
 8000d04:	615a      	str	r2, [r3, #20]
 8000d06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d08:	4b2c      	ldr	r3, [pc, #176]	; (8000dbc <MX_TIM4_Init+0xe4>)
 8000d0a:	4a2d      	ldr	r2, [pc, #180]	; (8000dc0 <MX_TIM4_Init+0xe8>)
 8000d0c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8000d0e:	4b2b      	ldr	r3, [pc, #172]	; (8000dbc <MX_TIM4_Init+0xe4>)
 8000d10:	f240 3247 	movw	r2, #839	; 0x347
 8000d14:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d16:	4b29      	ldr	r3, [pc, #164]	; (8000dbc <MX_TIM4_Init+0xe4>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000d1c:	4b27      	ldr	r3, [pc, #156]	; (8000dbc <MX_TIM4_Init+0xe4>)
 8000d1e:	2263      	movs	r2, #99	; 0x63
 8000d20:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d22:	4b26      	ldr	r3, [pc, #152]	; (8000dbc <MX_TIM4_Init+0xe4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d28:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <MX_TIM4_Init+0xe4>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d2e:	4823      	ldr	r0, [pc, #140]	; (8000dbc <MX_TIM4_Init+0xe4>)
 8000d30:	f003 fb27 	bl	8004382 <HAL_TIM_Base_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000d3a:	f000 fab1 	bl	80012a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d48:	4619      	mov	r1, r3
 8000d4a:	481c      	ldr	r0, [pc, #112]	; (8000dbc <MX_TIM4_Init+0xe4>)
 8000d4c:	f004 f9e4 	bl	8005118 <HAL_TIM_ConfigClockSource>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000d56:	f000 faa3 	bl	80012a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d5a:	4818      	ldr	r0, [pc, #96]	; (8000dbc <MX_TIM4_Init+0xe4>)
 8000d5c:	f003 fbd0 	bl	8004500 <HAL_TIM_PWM_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000d66:	f000 fa9b 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d72:	f107 0320 	add.w	r3, r7, #32
 8000d76:	4619      	mov	r1, r3
 8000d78:	4810      	ldr	r0, [pc, #64]	; (8000dbc <MX_TIM4_Init+0xe4>)
 8000d7a:	f004 ff31 	bl	8005be0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000d84:	f000 fa8c 	bl	80012a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d88:	2360      	movs	r3, #96	; 0x60
 8000d8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 70-1;
 8000d8c:	2345      	movs	r3, #69	; 0x45
 8000d8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000d94:	2304      	movs	r3, #4
 8000d96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4807      	ldr	r0, [pc, #28]	; (8000dbc <MX_TIM4_Init+0xe4>)
 8000da0:	f004 f8f8 	bl	8004f94 <HAL_TIM_PWM_ConfigChannel>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000daa:	f000 fa79 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000dae:	4803      	ldr	r0, [pc, #12]	; (8000dbc <MX_TIM4_Init+0xe4>)
 8000db0:	f000 fcd4 	bl	800175c <HAL_TIM_MspPostInit>

}
 8000db4:	bf00      	nop
 8000db6:	3738      	adds	r7, #56	; 0x38
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000688 	.word	0x20000688
 8000dc0:	40000800 	.word	0x40000800

08000dc4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08e      	sub	sp, #56	; 0x38
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd8:	f107 0320 	add.w	r3, r7, #32
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
 8000df0:	615a      	str	r2, [r3, #20]
 8000df2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000df4:	4b2c      	ldr	r3, [pc, #176]	; (8000ea8 <MX_TIM5_Init+0xe4>)
 8000df6:	4a2d      	ldr	r2, [pc, #180]	; (8000eac <MX_TIM5_Init+0xe8>)
 8000df8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 52.5-1;
 8000dfa:	4b2b      	ldr	r3, [pc, #172]	; (8000ea8 <MX_TIM5_Init+0xe4>)
 8000dfc:	2233      	movs	r2, #51	; 0x33
 8000dfe:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e00:	4b29      	ldr	r3, [pc, #164]	; (8000ea8 <MX_TIM5_Init+0xe4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 400-1;
 8000e06:	4b28      	ldr	r3, [pc, #160]	; (8000ea8 <MX_TIM5_Init+0xe4>)
 8000e08:	f240 128f 	movw	r2, #399	; 0x18f
 8000e0c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0e:	4b26      	ldr	r3, [pc, #152]	; (8000ea8 <MX_TIM5_Init+0xe4>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e14:	4b24      	ldr	r3, [pc, #144]	; (8000ea8 <MX_TIM5_Init+0xe4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e1a:	4823      	ldr	r0, [pc, #140]	; (8000ea8 <MX_TIM5_Init+0xe4>)
 8000e1c:	f003 fab1 	bl	8004382 <HAL_TIM_Base_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8000e26:	f000 fa3b 	bl	80012a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000e30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e34:	4619      	mov	r1, r3
 8000e36:	481c      	ldr	r0, [pc, #112]	; (8000ea8 <MX_TIM5_Init+0xe4>)
 8000e38:	f004 f96e 	bl	8005118 <HAL_TIM_ConfigClockSource>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8000e42:	f000 fa2d 	bl	80012a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000e46:	4818      	ldr	r0, [pc, #96]	; (8000ea8 <MX_TIM5_Init+0xe4>)
 8000e48:	f003 fb5a 	bl	8004500 <HAL_TIM_PWM_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000e52:	f000 fa25 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e56:	2300      	movs	r3, #0
 8000e58:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e5e:	f107 0320 	add.w	r3, r7, #32
 8000e62:	4619      	mov	r1, r3
 8000e64:	4810      	ldr	r0, [pc, #64]	; (8000ea8 <MX_TIM5_Init+0xe4>)
 8000e66:	f004 febb 	bl	8005be0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000e70:	f000 fa16 	bl	80012a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e74:	2360      	movs	r3, #96	; 0x60
 8000e76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 8000e78:	23c7      	movs	r3, #199	; 0xc7
 8000e7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	220c      	movs	r2, #12
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4807      	ldr	r0, [pc, #28]	; (8000ea8 <MX_TIM5_Init+0xe4>)
 8000e8c:	f004 f882 	bl	8004f94 <HAL_TIM_PWM_ConfigChannel>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8000e96:	f000 fa03 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000e9a:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <MX_TIM5_Init+0xe4>)
 8000e9c:	f000 fc5e 	bl	800175c <HAL_TIM_MspPostInit>

}
 8000ea0:	bf00      	nop
 8000ea2:	3738      	adds	r7, #56	; 0x38
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	200006d0 	.word	0x200006d0
 8000eac:	40000c00 	.word	0x40000c00

08000eb0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000eb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <MX_TIM10_Init+0x40>)
 8000eb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ef4 <MX_TIM10_Init+0x44>)
 8000eb8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8000eba:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <MX_TIM10_Init+0x40>)
 8000ebc:	22a7      	movs	r2, #167	; 0xa7
 8000ebe:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <MX_TIM10_Init+0x40>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <MX_TIM10_Init+0x40>)
 8000ec8:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ecc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ece:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <MX_TIM10_Init+0x40>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <MX_TIM10_Init+0x40>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_TIM10_Init+0x40>)
 8000edc:	f003 fa51 	bl	8004382 <HAL_TIM_Base_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000ee6:	f000 f9db 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000718 	.word	0x20000718
 8000ef4:	40014400 	.word	0x40014400

08000ef8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_TIM11_Init+0x40>)
 8000efe:	4a0f      	ldr	r2, [pc, #60]	; (8000f3c <MX_TIM11_Init+0x44>)
 8000f00:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 8000f02:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <MX_TIM11_Init+0x40>)
 8000f04:	22a7      	movs	r2, #167	; 0xa7
 8000f06:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f08:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MX_TIM11_Init+0x40>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <MX_TIM11_Init+0x40>)
 8000f10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f14:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <MX_TIM11_Init+0x40>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_TIM11_Init+0x40>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_TIM11_Init+0x40>)
 8000f24:	f003 fa2d 	bl	8004382 <HAL_TIM_Base_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000f2e:	f000 f9b7 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000760 	.word	0x20000760
 8000f3c:	40014800 	.word	0x40014800

08000f40 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_USART3_UART_Init+0x4c>)
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <MX_USART3_UART_Init+0x50>)
 8000f48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <MX_USART3_UART_Init+0x4c>)
 8000f4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_USART3_UART_Init+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_USART3_UART_Init+0x4c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <MX_USART3_UART_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_USART3_UART_Init+0x4c>)
 8000f66:	220c      	movs	r2, #12
 8000f68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <MX_USART3_UART_Init+0x4c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_USART3_UART_Init+0x4c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_USART3_UART_Init+0x4c>)
 8000f78:	f004 fec2 	bl	8005d00 <HAL_UART_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f82:	f000 f98d 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200007a8 	.word	0x200007a8
 8000f90:	40004800 	.word	0x40004800

08000f94 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_USART6_UART_Init+0x4c>)
 8000f9a:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <MX_USART6_UART_Init+0x50>)
 8000f9c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <MX_USART6_UART_Init+0x4c>)
 8000fa0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fa4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_USART6_UART_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_USART6_UART_Init+0x4c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <MX_USART6_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_USART6_UART_Init+0x4c>)
 8000fba:	220c      	movs	r2, #12
 8000fbc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <MX_USART6_UART_Init+0x4c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_USART6_UART_Init+0x4c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_USART6_UART_Init+0x4c>)
 8000fcc:	f004 fe98 	bl	8005d00 <HAL_UART_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000fd6:	f000 f963 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200007ec 	.word	0x200007ec
 8000fe4:	40011400 	.word	0x40011400

08000fe8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ff2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff6:	2204      	movs	r2, #4
 8000ff8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001008:	2202      	movs	r2, #2
 800100a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800100e:	2201      	movs	r2, #1
 8001010:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001014:	2200      	movs	r2, #0
 8001016:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800101a:	2200      	movs	r2, #0
 800101c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001020:	2201      	movs	r2, #1
 8001022:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001026:	2200      	movs	r2, #0
 8001028:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800102c:	f001 ffff 	bl	800302e <HAL_PCD_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001036:	f000 f933 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000830 	.word	0x20000830

08001044 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08e      	sub	sp, #56	; 0x38
 8001048:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	623b      	str	r3, [r7, #32]
 800105e:	4b88      	ldr	r3, [pc, #544]	; (8001280 <MX_GPIO_Init+0x23c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a87      	ldr	r2, [pc, #540]	; (8001280 <MX_GPIO_Init+0x23c>)
 8001064:	f043 0310 	orr.w	r3, r3, #16
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b85      	ldr	r3, [pc, #532]	; (8001280 <MX_GPIO_Init+0x23c>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0310 	and.w	r3, r3, #16
 8001072:	623b      	str	r3, [r7, #32]
 8001074:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
 800107a:	4b81      	ldr	r3, [pc, #516]	; (8001280 <MX_GPIO_Init+0x23c>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a80      	ldr	r2, [pc, #512]	; (8001280 <MX_GPIO_Init+0x23c>)
 8001080:	f043 0304 	orr.w	r3, r3, #4
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b7e      	ldr	r3, [pc, #504]	; (8001280 <MX_GPIO_Init+0x23c>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	61fb      	str	r3, [r7, #28]
 8001090:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
 8001096:	4b7a      	ldr	r3, [pc, #488]	; (8001280 <MX_GPIO_Init+0x23c>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a79      	ldr	r2, [pc, #484]	; (8001280 <MX_GPIO_Init+0x23c>)
 800109c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b77      	ldr	r3, [pc, #476]	; (8001280 <MX_GPIO_Init+0x23c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010aa:	61bb      	str	r3, [r7, #24]
 80010ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	4b73      	ldr	r3, [pc, #460]	; (8001280 <MX_GPIO_Init+0x23c>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a72      	ldr	r2, [pc, #456]	; (8001280 <MX_GPIO_Init+0x23c>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b70      	ldr	r3, [pc, #448]	; (8001280 <MX_GPIO_Init+0x23c>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	4b6c      	ldr	r3, [pc, #432]	; (8001280 <MX_GPIO_Init+0x23c>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a6b      	ldr	r2, [pc, #428]	; (8001280 <MX_GPIO_Init+0x23c>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b69      	ldr	r3, [pc, #420]	; (8001280 <MX_GPIO_Init+0x23c>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b65      	ldr	r3, [pc, #404]	; (8001280 <MX_GPIO_Init+0x23c>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a64      	ldr	r2, [pc, #400]	; (8001280 <MX_GPIO_Init+0x23c>)
 80010f0:	f043 0320 	orr.w	r3, r3, #32
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b62      	ldr	r3, [pc, #392]	; (8001280 <MX_GPIO_Init+0x23c>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0320 	and.w	r3, r3, #32
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	4b5e      	ldr	r3, [pc, #376]	; (8001280 <MX_GPIO_Init+0x23c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a5d      	ldr	r2, [pc, #372]	; (8001280 <MX_GPIO_Init+0x23c>)
 800110c:	f043 0308 	orr.w	r3, r3, #8
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b5b      	ldr	r3, [pc, #364]	; (8001280 <MX_GPIO_Init+0x23c>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0308 	and.w	r3, r3, #8
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	4b57      	ldr	r3, [pc, #348]	; (8001280 <MX_GPIO_Init+0x23c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a56      	ldr	r2, [pc, #344]	; (8001280 <MX_GPIO_Init+0x23c>)
 8001128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b54      	ldr	r3, [pc, #336]	; (8001280 <MX_GPIO_Init+0x23c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 800113a:	2200      	movs	r2, #0
 800113c:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8001140:	4850      	ldr	r0, [pc, #320]	; (8001284 <MX_GPIO_Init+0x240>)
 8001142:	f001 fd9b 	bl	8002c7c <HAL_GPIO_WritePin>
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	2101      	movs	r1, #1
 800114a:	484f      	ldr	r0, [pc, #316]	; (8001288 <MX_GPIO_Init+0x244>)
 800114c:	f001 fd96 	bl	8002c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	f244 0181 	movw	r1, #16513	; 0x4081
 8001156:	484d      	ldr	r0, [pc, #308]	; (800128c <MX_GPIO_Init+0x248>)
 8001158:	f001 fd90 	bl	8002c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001162:	484b      	ldr	r0, [pc, #300]	; (8001290 <MX_GPIO_Init+0x24c>)
 8001164:	f001 fd8a 	bl	8002c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	2140      	movs	r1, #64	; 0x40
 800116c:	4849      	ldr	r0, [pc, #292]	; (8001294 <MX_GPIO_Init+0x250>)
 800116e:	f001 fd85 	bl	8002c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
 8001172:	2200      	movs	r2, #0
 8001174:	21ff      	movs	r1, #255	; 0xff
 8001176:	4848      	ldr	r0, [pc, #288]	; (8001298 <MX_GPIO_Init+0x254>)
 8001178:	f001 fd80 	bl	8002c7c <HAL_GPIO_WritePin>
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin COL4_Pin
                           COL5_Pin COL6_Pin COL7_Pin COL8_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 800117c:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001182:	2301      	movs	r3, #1
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2300      	movs	r3, #0
 800118c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800118e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001192:	4619      	mov	r1, r3
 8001194:	483b      	ldr	r0, [pc, #236]	; (8001284 <MX_GPIO_Init+0x240>)
 8001196:	f001 fbc5 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800119a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ae:	4619      	mov	r1, r3
 80011b0:	483a      	ldr	r0, [pc, #232]	; (800129c <MX_GPIO_Init+0x258>)
 80011b2:	f001 fbb7 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80011b6:	2301      	movs	r3, #1
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80011c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ca:	4619      	mov	r1, r3
 80011cc:	482e      	ldr	r0, [pc, #184]	; (8001288 <MX_GPIO_Init+0x244>)
 80011ce:	f001 fba9 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80011d2:	f244 0381 	movw	r3, #16513	; 0x4081
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d8:	2301      	movs	r3, #1
 80011da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e8:	4619      	mov	r1, r3
 80011ea:	4828      	ldr	r0, [pc, #160]	; (800128c <MX_GPIO_Init+0x248>)
 80011ec:	f001 fb9a 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 80011f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8001202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001206:	4619      	mov	r1, r3
 8001208:	4821      	ldr	r0, [pc, #132]	; (8001290 <MX_GPIO_Init+0x24c>)
 800120a:	f001 fb8b 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 800120e:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001214:	2300      	movs	r3, #0
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800121c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001220:	4619      	mov	r1, r3
 8001222:	4818      	ldr	r0, [pc, #96]	; (8001284 <MX_GPIO_Init+0x240>)
 8001224:	f001 fb7e 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001228:	2340      	movs	r3, #64	; 0x40
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122c:	2301      	movs	r3, #1
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123c:	4619      	mov	r1, r3
 800123e:	4815      	ldr	r0, [pc, #84]	; (8001294 <MX_GPIO_Init+0x250>)
 8001240:	f001 fb70 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001248:	2300      	movs	r3, #0
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001254:	4619      	mov	r1, r3
 8001256:	480f      	ldr	r0, [pc, #60]	; (8001294 <MX_GPIO_Init+0x250>)
 8001258:	f001 fb64 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW1_Pin ROW2_Pin ROW3_Pin ROW4_Pin
                           ROW5_Pin ROW6_Pin ROW7_Pin ROW8_Pin */
  GPIO_InitStruct.Pin = ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
 800125c:	23ff      	movs	r3, #255	; 0xff
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001260:	2301      	movs	r3, #1
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800126c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001270:	4619      	mov	r1, r3
 8001272:	4809      	ldr	r0, [pc, #36]	; (8001298 <MX_GPIO_Init+0x254>)
 8001274:	f001 fb56 	bl	8002924 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001278:	bf00      	nop
 800127a:	3738      	adds	r7, #56	; 0x38
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40023800 	.word	0x40023800
 8001284:	40021000 	.word	0x40021000
 8001288:	40020000 	.word	0x40020000
 800128c:	40020400 	.word	0x40020400
 8001290:	40021400 	.word	0x40021400
 8001294:	40021800 	.word	0x40021800
 8001298:	40020c00 	.word	0x40020c00
 800129c:	40020800 	.word	0x40020800

080012a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a4:	b672      	cpsid	i
}
 80012a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <Error_Handler+0x8>
	...

080012ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <HAL_MspInit+0x4c>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	4a0f      	ldr	r2, [pc, #60]	; (80012f8 <HAL_MspInit+0x4c>)
 80012bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c0:	6453      	str	r3, [r2, #68]	; 0x44
 80012c2:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <HAL_MspInit+0x4c>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	603b      	str	r3, [r7, #0]
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <HAL_MspInit+0x4c>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	4a08      	ldr	r2, [pc, #32]	; (80012f8 <HAL_MspInit+0x4c>)
 80012d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012dc:	6413      	str	r3, [r2, #64]	; 0x40
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_MspInit+0x4c>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800

080012fc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08e      	sub	sp, #56	; 0x38
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a55      	ldr	r2, [pc, #340]	; (8001470 <HAL_ETH_MspInit+0x174>)
 800131a:	4293      	cmp	r3, r2
 800131c:	f040 80a4 	bne.w	8001468 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001320:	2300      	movs	r3, #0
 8001322:	623b      	str	r3, [r7, #32]
 8001324:	4b53      	ldr	r3, [pc, #332]	; (8001474 <HAL_ETH_MspInit+0x178>)
 8001326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001328:	4a52      	ldr	r2, [pc, #328]	; (8001474 <HAL_ETH_MspInit+0x178>)
 800132a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800132e:	6313      	str	r3, [r2, #48]	; 0x30
 8001330:	4b50      	ldr	r3, [pc, #320]	; (8001474 <HAL_ETH_MspInit+0x178>)
 8001332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001338:	623b      	str	r3, [r7, #32]
 800133a:	6a3b      	ldr	r3, [r7, #32]
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
 8001340:	4b4c      	ldr	r3, [pc, #304]	; (8001474 <HAL_ETH_MspInit+0x178>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	4a4b      	ldr	r2, [pc, #300]	; (8001474 <HAL_ETH_MspInit+0x178>)
 8001346:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800134a:	6313      	str	r3, [r2, #48]	; 0x30
 800134c:	4b49      	ldr	r3, [pc, #292]	; (8001474 <HAL_ETH_MspInit+0x178>)
 800134e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001350:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001354:	61fb      	str	r3, [r7, #28]
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	2300      	movs	r3, #0
 800135a:	61bb      	str	r3, [r7, #24]
 800135c:	4b45      	ldr	r3, [pc, #276]	; (8001474 <HAL_ETH_MspInit+0x178>)
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	4a44      	ldr	r2, [pc, #272]	; (8001474 <HAL_ETH_MspInit+0x178>)
 8001362:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001366:	6313      	str	r3, [r2, #48]	; 0x30
 8001368:	4b42      	ldr	r3, [pc, #264]	; (8001474 <HAL_ETH_MspInit+0x178>)
 800136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001370:	61bb      	str	r3, [r7, #24]
 8001372:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	4b3e      	ldr	r3, [pc, #248]	; (8001474 <HAL_ETH_MspInit+0x178>)
 800137a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137c:	4a3d      	ldr	r2, [pc, #244]	; (8001474 <HAL_ETH_MspInit+0x178>)
 800137e:	f043 0304 	orr.w	r3, r3, #4
 8001382:	6313      	str	r3, [r2, #48]	; 0x30
 8001384:	4b3b      	ldr	r3, [pc, #236]	; (8001474 <HAL_ETH_MspInit+0x178>)
 8001386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001390:	2300      	movs	r3, #0
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	4b37      	ldr	r3, [pc, #220]	; (8001474 <HAL_ETH_MspInit+0x178>)
 8001396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001398:	4a36      	ldr	r2, [pc, #216]	; (8001474 <HAL_ETH_MspInit+0x178>)
 800139a:	f043 0301 	orr.w	r3, r3, #1
 800139e:	6313      	str	r3, [r2, #48]	; 0x30
 80013a0:	4b34      	ldr	r3, [pc, #208]	; (8001474 <HAL_ETH_MspInit+0x178>)
 80013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	613b      	str	r3, [r7, #16]
 80013aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	4b30      	ldr	r3, [pc, #192]	; (8001474 <HAL_ETH_MspInit+0x178>)
 80013b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b4:	4a2f      	ldr	r2, [pc, #188]	; (8001474 <HAL_ETH_MspInit+0x178>)
 80013b6:	f043 0302 	orr.w	r3, r3, #2
 80013ba:	6313      	str	r3, [r2, #48]	; 0x30
 80013bc:	4b2d      	ldr	r3, [pc, #180]	; (8001474 <HAL_ETH_MspInit+0x178>)
 80013be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013c8:	2300      	movs	r3, #0
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	4b29      	ldr	r3, [pc, #164]	; (8001474 <HAL_ETH_MspInit+0x178>)
 80013ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d0:	4a28      	ldr	r2, [pc, #160]	; (8001474 <HAL_ETH_MspInit+0x178>)
 80013d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013d6:	6313      	str	r3, [r2, #48]	; 0x30
 80013d8:	4b26      	ldr	r3, [pc, #152]	; (8001474 <HAL_ETH_MspInit+0x178>)
 80013da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80013e4:	2332      	movs	r3, #50	; 0x32
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f0:	2303      	movs	r3, #3
 80013f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013f4:	230b      	movs	r3, #11
 80013f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fc:	4619      	mov	r1, r3
 80013fe:	481e      	ldr	r0, [pc, #120]	; (8001478 <HAL_ETH_MspInit+0x17c>)
 8001400:	f001 fa90 	bl	8002924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001404:	2386      	movs	r3, #134	; 0x86
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001410:	2303      	movs	r3, #3
 8001412:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001414:	230b      	movs	r3, #11
 8001416:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141c:	4619      	mov	r1, r3
 800141e:	4817      	ldr	r0, [pc, #92]	; (800147c <HAL_ETH_MspInit+0x180>)
 8001420:	f001 fa80 	bl	8002924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001424:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001436:	230b      	movs	r3, #11
 8001438:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800143a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143e:	4619      	mov	r1, r3
 8001440:	480f      	ldr	r0, [pc, #60]	; (8001480 <HAL_ETH_MspInit+0x184>)
 8001442:	f001 fa6f 	bl	8002924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001446:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001458:	230b      	movs	r3, #11
 800145a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800145c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001460:	4619      	mov	r1, r3
 8001462:	4808      	ldr	r0, [pc, #32]	; (8001484 <HAL_ETH_MspInit+0x188>)
 8001464:	f001 fa5e 	bl	8002924 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001468:	bf00      	nop
 800146a:	3738      	adds	r7, #56	; 0x38
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40028000 	.word	0x40028000
 8001474:	40023800 	.word	0x40023800
 8001478:	40020800 	.word	0x40020800
 800147c:	40020000 	.word	0x40020000
 8001480:	40020400 	.word	0x40020400
 8001484:	40021800 	.word	0x40021800

08001488 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a19      	ldr	r2, [pc, #100]	; (800150c <HAL_I2C_MspInit+0x84>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d12c      	bne.n	8001504 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <HAL_I2C_MspInit+0x88>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a17      	ldr	r2, [pc, #92]	; (8001510 <HAL_I2C_MspInit+0x88>)
 80014b4:	f043 0302 	orr.w	r3, r3, #2
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <HAL_I2C_MspInit+0x88>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014cc:	2312      	movs	r3, #18
 80014ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d4:	2303      	movs	r3, #3
 80014d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014d8:	2304      	movs	r3, #4
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	480c      	ldr	r0, [pc, #48]	; (8001514 <HAL_I2C_MspInit+0x8c>)
 80014e4:	f001 fa1e 	bl	8002924 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <HAL_I2C_MspInit+0x88>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	4a07      	ldr	r2, [pc, #28]	; (8001510 <HAL_I2C_MspInit+0x88>)
 80014f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014f6:	6413      	str	r3, [r2, #64]	; 0x40
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <HAL_I2C_MspInit+0x88>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001504:	bf00      	nop
 8001506:	3728      	adds	r7, #40	; 0x28
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40005400 	.word	0x40005400
 8001510:	40023800 	.word	0x40023800
 8001514:	40020400 	.word	0x40020400

08001518 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08e      	sub	sp, #56	; 0x38
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001520:	f107 0308 	add.w	r3, r7, #8
 8001524:	2230      	movs	r2, #48	; 0x30
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f005 ff8d 	bl	8007448 <memset>
  if(hrtc->Instance==RTC)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a0c      	ldr	r2, [pc, #48]	; (8001564 <HAL_RTC_MspInit+0x4c>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d111      	bne.n	800155c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001538:	2320      	movs	r3, #32
 800153a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800153c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001540:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001542:	f107 0308 	add.w	r3, r7, #8
 8001546:	4618      	mov	r0, r3
 8001548:	f002 fb26 	bl	8003b98 <HAL_RCCEx_PeriphCLKConfig>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001552:	f7ff fea5 	bl	80012a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <HAL_RTC_MspInit+0x50>)
 8001558:	2201      	movs	r2, #1
 800155a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800155c:	bf00      	nop
 800155e:	3738      	adds	r7, #56	; 0x38
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40002800 	.word	0x40002800
 8001568:	42470e3c 	.word	0x42470e3c

0800156c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800157c:	d115      	bne.n	80015aa <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <HAL_TIM_PWM_MspInit+0x48>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <HAL_TIM_PWM_MspInit+0x48>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6413      	str	r3, [r2, #64]	; 0x40
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <HAL_TIM_PWM_MspInit+0x48>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2100      	movs	r1, #0
 800159e:	201c      	movs	r0, #28
 80015a0:	f000 fdcf 	bl	8002142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015a4:	201c      	movs	r0, #28
 80015a6:	f000 fde8 	bl	800217a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015aa:	bf00      	nop
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800

080015b8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a1d      	ldr	r2, [pc, #116]	; (800164c <HAL_TIM_IC_MspInit+0x94>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d133      	bne.n	8001642 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <HAL_TIM_IC_MspInit+0x98>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	4a1b      	ldr	r2, [pc, #108]	; (8001650 <HAL_TIM_IC_MspInit+0x98>)
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ea:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_TIM_IC_MspInit+0x98>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <HAL_TIM_IC_MspInit+0x98>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a14      	ldr	r2, [pc, #80]	; (8001650 <HAL_TIM_IC_MspInit+0x98>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_TIM_IC_MspInit+0x98>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 8001612:	2340      	movs	r3, #64	; 0x40
 8001614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161e:	2300      	movs	r3, #0
 8001620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001622:	2302      	movs	r3, #2
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	4809      	ldr	r0, [pc, #36]	; (8001654 <HAL_TIM_IC_MspInit+0x9c>)
 800162e:	f001 f979 	bl	8002924 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	201d      	movs	r0, #29
 8001638:	f000 fd83 	bl	8002142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800163c:	201d      	movs	r0, #29
 800163e:	f000 fd9c 	bl	800217a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001642:	bf00      	nop
 8001644:	3728      	adds	r7, #40	; 0x28
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40000400 	.word	0x40000400
 8001650:	40023800 	.word	0x40023800
 8001654:	40020000 	.word	0x40020000

08001658 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a38      	ldr	r2, [pc, #224]	; (8001748 <HAL_TIM_Base_MspInit+0xf0>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d116      	bne.n	8001698 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	4b37      	ldr	r3, [pc, #220]	; (800174c <HAL_TIM_Base_MspInit+0xf4>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	4a36      	ldr	r2, [pc, #216]	; (800174c <HAL_TIM_Base_MspInit+0xf4>)
 8001674:	f043 0304 	orr.w	r3, r3, #4
 8001678:	6413      	str	r3, [r2, #64]	; 0x40
 800167a:	4b34      	ldr	r3, [pc, #208]	; (800174c <HAL_TIM_Base_MspInit+0xf4>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	201e      	movs	r0, #30
 800168c:	f000 fd59 	bl	8002142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001690:	201e      	movs	r0, #30
 8001692:	f000 fd72 	bl	800217a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001696:	e052      	b.n	800173e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a2c      	ldr	r2, [pc, #176]	; (8001750 <HAL_TIM_Base_MspInit+0xf8>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d116      	bne.n	80016d0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	4b29      	ldr	r3, [pc, #164]	; (800174c <HAL_TIM_Base_MspInit+0xf4>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	4a28      	ldr	r2, [pc, #160]	; (800174c <HAL_TIM_Base_MspInit+0xf4>)
 80016ac:	f043 0308 	orr.w	r3, r3, #8
 80016b0:	6413      	str	r3, [r2, #64]	; 0x40
 80016b2:	4b26      	ldr	r3, [pc, #152]	; (800174c <HAL_TIM_Base_MspInit+0xf4>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	2032      	movs	r0, #50	; 0x32
 80016c4:	f000 fd3d 	bl	8002142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80016c8:	2032      	movs	r0, #50	; 0x32
 80016ca:	f000 fd56 	bl	800217a <HAL_NVIC_EnableIRQ>
}
 80016ce:	e036      	b.n	800173e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a1f      	ldr	r2, [pc, #124]	; (8001754 <HAL_TIM_Base_MspInit+0xfc>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d116      	bne.n	8001708 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	4b1b      	ldr	r3, [pc, #108]	; (800174c <HAL_TIM_Base_MspInit+0xf4>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	4a1a      	ldr	r2, [pc, #104]	; (800174c <HAL_TIM_Base_MspInit+0xf4>)
 80016e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ea:	4b18      	ldr	r3, [pc, #96]	; (800174c <HAL_TIM_Base_MspInit+0xf4>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	2019      	movs	r0, #25
 80016fc:	f000 fd21 	bl	8002142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001700:	2019      	movs	r0, #25
 8001702:	f000 fd3a 	bl	800217a <HAL_NVIC_EnableIRQ>
}
 8001706:	e01a      	b.n	800173e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a12      	ldr	r2, [pc, #72]	; (8001758 <HAL_TIM_Base_MspInit+0x100>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d115      	bne.n	800173e <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	4b0d      	ldr	r3, [pc, #52]	; (800174c <HAL_TIM_Base_MspInit+0xf4>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	4a0c      	ldr	r2, [pc, #48]	; (800174c <HAL_TIM_Base_MspInit+0xf4>)
 800171c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001720:	6453      	str	r3, [r2, #68]	; 0x44
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <HAL_TIM_Base_MspInit+0xf4>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	201a      	movs	r0, #26
 8001734:	f000 fd05 	bl	8002142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001738:	201a      	movs	r0, #26
 800173a:	f000 fd1e 	bl	800217a <HAL_NVIC_EnableIRQ>
}
 800173e:	bf00      	nop
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40000800 	.word	0x40000800
 800174c:	40023800 	.word	0x40023800
 8001750:	40000c00 	.word	0x40000c00
 8001754:	40014400 	.word	0x40014400
 8001758:	40014800 	.word	0x40014800

0800175c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800177c:	d11e      	bne.n	80017bc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	4b34      	ldr	r3, [pc, #208]	; (8001854 <HAL_TIM_MspPostInit+0xf8>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a33      	ldr	r2, [pc, #204]	; (8001854 <HAL_TIM_MspPostInit+0xf8>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b31      	ldr	r3, [pc, #196]	; (8001854 <HAL_TIM_MspPostInit+0xf8>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_SERVO_Pin;
 800179a:	2320      	movs	r3, #32
 800179c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017aa:	2301      	movs	r3, #1
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM2_CH1_SERVO_GPIO_Port, &GPIO_InitStruct);
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	4828      	ldr	r0, [pc, #160]	; (8001858 <HAL_TIM_MspPostInit+0xfc>)
 80017b6:	f001 f8b5 	bl	8002924 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80017ba:	e047      	b.n	800184c <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a26      	ldr	r2, [pc, #152]	; (800185c <HAL_TIM_MspPostInit+0x100>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d11f      	bne.n	8001806 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	4b22      	ldr	r3, [pc, #136]	; (8001854 <HAL_TIM_MspPostInit+0xf8>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a21      	ldr	r2, [pc, #132]	; (8001854 <HAL_TIM_MspPostInit+0xf8>)
 80017d0:	f043 0308 	orr.w	r3, r3, #8
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b1f      	ldr	r3, [pc, #124]	; (8001854 <HAL_TIM_MspPostInit+0xf8>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f0:	2300      	movs	r3, #0
 80017f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80017f4:	2302      	movs	r3, #2
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	4619      	mov	r1, r3
 80017fe:	4818      	ldr	r0, [pc, #96]	; (8001860 <HAL_TIM_MspPostInit+0x104>)
 8001800:	f001 f890 	bl	8002924 <HAL_GPIO_Init>
}
 8001804:	e022      	b.n	800184c <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a16      	ldr	r2, [pc, #88]	; (8001864 <HAL_TIM_MspPostInit+0x108>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d11d      	bne.n	800184c <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001810:	2300      	movs	r3, #0
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <HAL_TIM_MspPostInit+0xf8>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001818:	4a0e      	ldr	r2, [pc, #56]	; (8001854 <HAL_TIM_MspPostInit+0xf8>)
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	6313      	str	r3, [r2, #48]	; 0x30
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <HAL_TIM_MspPostInit+0xf8>)
 8001822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800182c:	2308      	movs	r3, #8
 800182e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001830:	2302      	movs	r3, #2
 8001832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800183c:	2302      	movs	r3, #2
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	4619      	mov	r1, r3
 8001846:	4804      	ldr	r0, [pc, #16]	; (8001858 <HAL_TIM_MspPostInit+0xfc>)
 8001848:	f001 f86c 	bl	8002924 <HAL_GPIO_Init>
}
 800184c:	bf00      	nop
 800184e:	3728      	adds	r7, #40	; 0x28
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40023800 	.word	0x40023800
 8001858:	40020000 	.word	0x40020000
 800185c:	40000800 	.word	0x40000800
 8001860:	40020c00 	.word	0x40020c00
 8001864:	40000c00 	.word	0x40000c00

08001868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08c      	sub	sp, #48	; 0x30
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 031c 	add.w	r3, r7, #28
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a3a      	ldr	r2, [pc, #232]	; (8001970 <HAL_UART_MspInit+0x108>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d135      	bne.n	80018f6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	61bb      	str	r3, [r7, #24]
 800188e:	4b39      	ldr	r3, [pc, #228]	; (8001974 <HAL_UART_MspInit+0x10c>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	4a38      	ldr	r2, [pc, #224]	; (8001974 <HAL_UART_MspInit+0x10c>)
 8001894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001898:	6413      	str	r3, [r2, #64]	; 0x40
 800189a:	4b36      	ldr	r3, [pc, #216]	; (8001974 <HAL_UART_MspInit+0x10c>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018a2:	61bb      	str	r3, [r7, #24]
 80018a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	4b32      	ldr	r3, [pc, #200]	; (8001974 <HAL_UART_MspInit+0x10c>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a31      	ldr	r2, [pc, #196]	; (8001974 <HAL_UART_MspInit+0x10c>)
 80018b0:	f043 0308 	orr.w	r3, r3, #8
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b2f      	ldr	r3, [pc, #188]	; (8001974 <HAL_UART_MspInit+0x10c>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80018c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c8:	2302      	movs	r3, #2
 80018ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d0:	2303      	movs	r3, #3
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018d4:	2307      	movs	r3, #7
 80018d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018d8:	f107 031c 	add.w	r3, r7, #28
 80018dc:	4619      	mov	r1, r3
 80018de:	4826      	ldr	r0, [pc, #152]	; (8001978 <HAL_UART_MspInit+0x110>)
 80018e0:	f001 f820 	bl	8002924 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2100      	movs	r1, #0
 80018e8:	2027      	movs	r0, #39	; 0x27
 80018ea:	f000 fc2a 	bl	8002142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80018ee:	2027      	movs	r0, #39	; 0x27
 80018f0:	f000 fc43 	bl	800217a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80018f4:	e038      	b.n	8001968 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a20      	ldr	r2, [pc, #128]	; (800197c <HAL_UART_MspInit+0x114>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d133      	bne.n	8001968 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001900:	2300      	movs	r3, #0
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <HAL_UART_MspInit+0x10c>)
 8001906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001908:	4a1a      	ldr	r2, [pc, #104]	; (8001974 <HAL_UART_MspInit+0x10c>)
 800190a:	f043 0320 	orr.w	r3, r3, #32
 800190e:	6453      	str	r3, [r2, #68]	; 0x44
 8001910:	4b18      	ldr	r3, [pc, #96]	; (8001974 <HAL_UART_MspInit+0x10c>)
 8001912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001914:	f003 0320 	and.w	r3, r3, #32
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	4b14      	ldr	r3, [pc, #80]	; (8001974 <HAL_UART_MspInit+0x10c>)
 8001922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001924:	4a13      	ldr	r2, [pc, #76]	; (8001974 <HAL_UART_MspInit+0x10c>)
 8001926:	f043 0304 	orr.w	r3, r3, #4
 800192a:	6313      	str	r3, [r2, #48]	; 0x30
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <HAL_UART_MspInit+0x10c>)
 800192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001938:	23c0      	movs	r3, #192	; 0xc0
 800193a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001944:	2303      	movs	r3, #3
 8001946:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001948:	2308      	movs	r3, #8
 800194a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800194c:	f107 031c 	add.w	r3, r7, #28
 8001950:	4619      	mov	r1, r3
 8001952:	480b      	ldr	r0, [pc, #44]	; (8001980 <HAL_UART_MspInit+0x118>)
 8001954:	f000 ffe6 	bl	8002924 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001958:	2200      	movs	r2, #0
 800195a:	2100      	movs	r1, #0
 800195c:	2047      	movs	r0, #71	; 0x47
 800195e:	f000 fbf0 	bl	8002142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001962:	2047      	movs	r0, #71	; 0x47
 8001964:	f000 fc09 	bl	800217a <HAL_NVIC_EnableIRQ>
}
 8001968:	bf00      	nop
 800196a:	3730      	adds	r7, #48	; 0x30
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40004800 	.word	0x40004800
 8001974:	40023800 	.word	0x40023800
 8001978:	40020c00 	.word	0x40020c00
 800197c:	40011400 	.word	0x40011400
 8001980:	40020800 	.word	0x40020800

08001984 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	; 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019a4:	d13f      	bne.n	8001a26 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <HAL_PCD_MspInit+0xac>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a20      	ldr	r2, [pc, #128]	; (8001a30 <HAL_PCD_MspInit+0xac>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <HAL_PCD_MspInit+0xac>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80019c2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80019c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d0:	2303      	movs	r3, #3
 80019d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019d4:	230a      	movs	r3, #10
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4619      	mov	r1, r3
 80019de:	4815      	ldr	r0, [pc, #84]	; (8001a34 <HAL_PCD_MspInit+0xb0>)
 80019e0:	f000 ffa0 	bl	8002924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80019e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	4619      	mov	r1, r3
 80019f8:	480e      	ldr	r0, [pc, #56]	; (8001a34 <HAL_PCD_MspInit+0xb0>)
 80019fa:	f000 ff93 	bl	8002924 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80019fe:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <HAL_PCD_MspInit+0xac>)
 8001a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a02:	4a0b      	ldr	r2, [pc, #44]	; (8001a30 <HAL_PCD_MspInit+0xac>)
 8001a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a08:	6353      	str	r3, [r2, #52]	; 0x34
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <HAL_PCD_MspInit+0xac>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	4a07      	ldr	r2, [pc, #28]	; (8001a30 <HAL_PCD_MspInit+0xac>)
 8001a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a18:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1a:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <HAL_PCD_MspInit+0xac>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001a26:	bf00      	nop
 8001a28:	3728      	adds	r7, #40	; 0x28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40020000 	.word	0x40020000

08001a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <NMI_Handler+0x4>

08001a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <HardFault_Handler+0x4>

08001a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <MemManage_Handler+0x4>

08001a4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a4e:	e7fe      	b.n	8001a4e <BusFault_Handler+0x4>

08001a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <UsageFault_Handler+0x4>

08001a56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a84:	f000 fa3e 	bl	8001f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Handler();  // ADD_SIKWON_231006
 8001a88:	f7fe fe88 	bl	800079c <HAL_SYSTICK_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001a94:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001a96:	f003 f8d9 	bl	8004c4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000718 	.word	0x20000718

08001aa4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001aa8:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001aaa:	f003 f8cf 	bl	8004c4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000760 	.word	0x20000760

08001ab8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <TIM2_IRQHandler+0x10>)
 8001abe:	f003 f8c5 	bl	8004c4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200005f8 	.word	0x200005f8

08001acc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ad0:	4802      	ldr	r0, [pc, #8]	; (8001adc <TIM3_IRQHandler+0x10>)
 8001ad2:	f003 f8bb 	bl	8004c4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000640 	.word	0x20000640

08001ae0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ae4:	4802      	ldr	r0, [pc, #8]	; (8001af0 <TIM4_IRQHandler+0x10>)
 8001ae6:	f003 f8b1 	bl	8004c4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000688 	.word	0x20000688

08001af4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <USART3_IRQHandler+0x10>)
 8001afa:	f004 fa11 	bl	8005f20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200007a8 	.word	0x200007a8

08001b08 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001b0c:	4802      	ldr	r0, [pc, #8]	; (8001b18 <TIM5_IRQHandler+0x10>)
 8001b0e:	f003 f89d 	bl	8004c4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	200006d0 	.word	0x200006d0

08001b1c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001b20:	4802      	ldr	r0, [pc, #8]	; (8001b2c <USART6_IRQHandler+0x10>)
 8001b22:	f004 f9fd 	bl	8005f20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	200007ec 	.word	0x200007ec

08001b30 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	e00a      	b.n	8001b58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b42:	f3af 8000 	nop.w
 8001b46:	4601      	mov	r1, r0
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	60ba      	str	r2, [r7, #8]
 8001b4e:	b2ca      	uxtb	r2, r1
 8001b50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	3301      	adds	r3, #1
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	dbf0      	blt.n	8001b42 <_read+0x12>
  }

  return len;
 8001b60:	687b      	ldr	r3, [r7, #4]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b086      	sub	sp, #24
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	e009      	b.n	8001b90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	60ba      	str	r2, [r7, #8]
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7fe fe17 	bl	80007b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	dbf1      	blt.n	8001b7c <_write+0x12>
  }
  return len;
 8001b98:	687b      	ldr	r3, [r7, #4]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <_close>:

int _close(int file)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bca:	605a      	str	r2, [r3, #4]
  return 0;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <_isatty>:

int _isatty(int file)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001be2:	2301      	movs	r3, #1
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c14:	4a14      	ldr	r2, [pc, #80]	; (8001c68 <_sbrk+0x5c>)
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <_sbrk+0x60>)
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c20:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d102      	bne.n	8001c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c28:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <_sbrk+0x64>)
 8001c2a:	4a12      	ldr	r2, [pc, #72]	; (8001c74 <_sbrk+0x68>)
 8001c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <_sbrk+0x64>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d207      	bcs.n	8001c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c3c:	f005 fbda 	bl	80073f4 <__errno>
 8001c40:	4603      	mov	r3, r0
 8001c42:	220c      	movs	r2, #12
 8001c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4a:	e009      	b.n	8001c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <_sbrk+0x64>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c52:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <_sbrk+0x64>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	4a05      	ldr	r2, [pc, #20]	; (8001c70 <_sbrk+0x64>)
 8001c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20030000 	.word	0x20030000
 8001c6c:	00000400 	.word	0x00000400
 8001c70:	20000d54 	.word	0x20000d54
 8001c74:	20000dd8 	.word	0x20000dd8

08001c78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <SystemInit+0x20>)
 8001c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c82:	4a05      	ldr	r2, [pc, #20]	; (8001c98 <SystemInit+0x20>)
 8001c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <HAL_UART_RxCpltCallback>:
volatile unsigned char bt_rx_buff[COMMAND_LENGTH];  // UART6으로부터 수신된 char를 저장하는 공간(\n을 만날때 까지)
volatile int bt_rx_index=0;  // bt rx_buff의 save위치
volatile int bt_newline_detect_flag=0;  // new line을 만났을때의 indicator 예) ledallon\n

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)   // comport master와 연결된 uart
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a32      	ldr	r2, [pc, #200]	; (8001d70 <HAL_UART_RxCpltCallback+0xd4>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d12c      	bne.n	8001d06 <HAL_UART_RxCpltCallback+0x6a>
	{
		if (rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8001cac:	4b31      	ldr	r3, [pc, #196]	; (8001d74 <HAL_UART_RxCpltCallback+0xd8>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b27      	cmp	r3, #39	; 0x27
 8001cb2:	dc1d      	bgt.n	8001cf0 <HAL_UART_RxCpltCallback+0x54>
		{
			if (rx_data == '\n' || rx_data == '\r')
 8001cb4:	4b30      	ldr	r3, [pc, #192]	; (8001d78 <HAL_UART_RxCpltCallback+0xdc>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b0a      	cmp	r3, #10
 8001cba:	d003      	beq.n	8001cc4 <HAL_UART_RxCpltCallback+0x28>
 8001cbc:	4b2e      	ldr	r3, [pc, #184]	; (8001d78 <HAL_UART_RxCpltCallback+0xdc>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b0d      	cmp	r3, #13
 8001cc2:	d10b      	bne.n	8001cdc <HAL_UART_RxCpltCallback+0x40>
			{
				rx_buff[rx_index] = 0; // '\0'
 8001cc4:	4b2b      	ldr	r3, [pc, #172]	; (8001d74 <HAL_UART_RxCpltCallback+0xd8>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a2c      	ldr	r2, [pc, #176]	; (8001d7c <HAL_UART_RxCpltCallback+0xe0>)
 8001cca:	2100      	movs	r1, #0
 8001ccc:	54d1      	strb	r1, [r2, r3]
				newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8001cce:	4b2c      	ldr	r3, [pc, #176]	; (8001d80 <HAL_UART_RxCpltCallback+0xe4>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]
				rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 8001cd4:	4b27      	ldr	r3, [pc, #156]	; (8001d74 <HAL_UART_RxCpltCallback+0xd8>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	e00f      	b.n	8001cfc <HAL_UART_RxCpltCallback+0x60>
			}
			else
			{
				rx_buff[rx_index++]=rx_data;
 8001cdc:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <HAL_UART_RxCpltCallback+0xd8>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	4924      	ldr	r1, [pc, #144]	; (8001d74 <HAL_UART_RxCpltCallback+0xd8>)
 8001ce4:	600a      	str	r2, [r1, #0]
 8001ce6:	4a24      	ldr	r2, [pc, #144]	; (8001d78 <HAL_UART_RxCpltCallback+0xdc>)
 8001ce8:	7811      	ldrb	r1, [r2, #0]
 8001cea:	4a24      	ldr	r2, [pc, #144]	; (8001d7c <HAL_UART_RxCpltCallback+0xe0>)
 8001cec:	54d1      	strb	r1, [r2, r3]
 8001cee:	e005      	b.n	8001cfc <HAL_UART_RxCpltCallback+0x60>
			}

		}
		else
		{
			rx_index=0;
 8001cf0:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <HAL_UART_RxCpltCallback+0xd8>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!!\n");
 8001cf6:	4823      	ldr	r0, [pc, #140]	; (8001d84 <HAL_UART_RxCpltCallback+0xe8>)
 8001cf8:	f005 fc1c 	bl	8007534 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	491e      	ldr	r1, [pc, #120]	; (8001d78 <HAL_UART_RxCpltCallback+0xdc>)
 8001d00:	481b      	ldr	r0, [pc, #108]	; (8001d70 <HAL_UART_RxCpltCallback+0xd4>)
 8001d02:	f004 f8dc 	bl	8005ebe <HAL_UART_Receive_IT>
	}

	if (huart == &huart6)   // BT 와 연결된 uart
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a1f      	ldr	r2, [pc, #124]	; (8001d88 <HAL_UART_RxCpltCallback+0xec>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d12c      	bne.n	8001d68 <HAL_UART_RxCpltCallback+0xcc>
	{
		if (bt_rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8001d0e:	4b1f      	ldr	r3, [pc, #124]	; (8001d8c <HAL_UART_RxCpltCallback+0xf0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b27      	cmp	r3, #39	; 0x27
 8001d14:	dc1d      	bgt.n	8001d52 <HAL_UART_RxCpltCallback+0xb6>
		{
			if (bt_rx_data == '\n' || bt_rx_data == '\r')
 8001d16:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <HAL_UART_RxCpltCallback+0xf4>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b0a      	cmp	r3, #10
 8001d1c:	d003      	beq.n	8001d26 <HAL_UART_RxCpltCallback+0x8a>
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	; (8001d90 <HAL_UART_RxCpltCallback+0xf4>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b0d      	cmp	r3, #13
 8001d24:	d10b      	bne.n	8001d3e <HAL_UART_RxCpltCallback+0xa2>
			{
				bt_rx_buff[rx_index] = 0; // '\0'
 8001d26:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <HAL_UART_RxCpltCallback+0xd8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a1a      	ldr	r2, [pc, #104]	; (8001d94 <HAL_UART_RxCpltCallback+0xf8>)
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	54d1      	strb	r1, [r2, r3]
				bt_newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8001d30:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <HAL_UART_RxCpltCallback+0xfc>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	601a      	str	r2, [r3, #0]
				bt_rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <HAL_UART_RxCpltCallback+0xf0>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	e00f      	b.n	8001d5e <HAL_UART_RxCpltCallback+0xc2>
			}
			else
			{
				bt_rx_buff[bt_rx_index++]=bt_rx_data;
 8001d3e:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <HAL_UART_RxCpltCallback+0xf0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	1c5a      	adds	r2, r3, #1
 8001d44:	4911      	ldr	r1, [pc, #68]	; (8001d8c <HAL_UART_RxCpltCallback+0xf0>)
 8001d46:	600a      	str	r2, [r1, #0]
 8001d48:	4a11      	ldr	r2, [pc, #68]	; (8001d90 <HAL_UART_RxCpltCallback+0xf4>)
 8001d4a:	7811      	ldrb	r1, [r2, #0]
 8001d4c:	4a11      	ldr	r2, [pc, #68]	; (8001d94 <HAL_UART_RxCpltCallback+0xf8>)
 8001d4e:	54d1      	strb	r1, [r2, r3]
 8001d50:	e005      	b.n	8001d5e <HAL_UART_RxCpltCallback+0xc2>
			}

		}
		else
		{
			bt_rx_index=0;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <HAL_UART_RxCpltCallback+0xf0>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
			printf("BT Message Overflow !!!!\n");
 8001d58:	4810      	ldr	r0, [pc, #64]	; (8001d9c <HAL_UART_RxCpltCallback+0x100>)
 8001d5a:	f005 fbeb 	bl	8007534 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 8001d5e:	2201      	movs	r2, #1
 8001d60:	490b      	ldr	r1, [pc, #44]	; (8001d90 <HAL_UART_RxCpltCallback+0xf4>)
 8001d62:	4809      	ldr	r0, [pc, #36]	; (8001d88 <HAL_UART_RxCpltCallback+0xec>)
 8001d64:	f004 f8ab 	bl	8005ebe <HAL_UART_Receive_IT>
	}
}
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	200007a8 	.word	0x200007a8
 8001d74:	20000d80 	.word	0x20000d80
 8001d78:	20000d3c 	.word	0x20000d3c
 8001d7c:	20000d58 	.word	0x20000d58
 8001d80:	20000d84 	.word	0x20000d84
 8001d84:	08007e6c 	.word	0x08007e6c
 8001d88:	200007ec 	.word	0x200007ec
 8001d8c:	20000db0 	.word	0x20000db0
 8001d90:	20000d3d 	.word	0x20000d3d
 8001d94:	20000d88 	.word	0x20000d88
 8001d98:	20000db4 	.word	0x20000db4
 8001d9c:	08007e84 	.word	0x08007e84

08001da0 <HAL_TIM_IC_CaptureCallback>:
// 1. Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c에 가서
//  HAL_TIM_IC_CaptureCallback를 잘라내기를 해서 이곳으로 가져 온다.
// 2. 초음파 센서의 ECHO핀의 상승 에지와 하강에지 발생시 이곳으로 들어 온다.
volatile uint8_t  is_first_capture=0;  // 0:상승에지 1:하강에지
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a13      	ldr	r2, [pc, #76]	; (8001dfc <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d11f      	bne.n	8001df2 <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (is_first_capture == 0)   // 상승에지
 8001db2:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d107      	bne.n	8001dcc <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim,0);   // clear H/W counter
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture=1;  // 상승에지를 만났다는 flag변수 indicator를 set
 8001dc4:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	701a      	strb	r2, [r3, #0]
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
		}
	}
}
 8001dca:	e012      	b.n	8001df2 <HAL_TIM_IC_CaptureCallback+0x52>
		else if (is_first_capture == 1)   // 하강 에지를 만나면
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d10d      	bne.n	8001df2 <HAL_TIM_IC_CaptureCallback+0x52>
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
 8001ddc:	2100      	movs	r1, #0
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f003 fa62 	bl	80052a8 <HAL_TIM_ReadCapturedValue>
 8001de4:	4603      	mov	r3, r0
 8001de6:	461a      	mov	r2, r3
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001dea:	601a      	str	r2, [r3, #0]
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	601a      	str	r2, [r3, #0]
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40000400 	.word	0x40000400
 8001e00:	20000dc0 	.word	0x20000dc0
 8001e04:	20000db8 	.word	0x20000db8
 8001e08:	20000dbc 	.word	0x20000dbc

08001e0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001e0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e44 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e10:	480d      	ldr	r0, [pc, #52]	; (8001e48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e12:	490e      	ldr	r1, [pc, #56]	; (8001e4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e14:	4a0e      	ldr	r2, [pc, #56]	; (8001e50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e18:	e002      	b.n	8001e20 <LoopCopyDataInit>

08001e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e1e:	3304      	adds	r3, #4

08001e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e24:	d3f9      	bcc.n	8001e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e26:	4a0b      	ldr	r2, [pc, #44]	; (8001e54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e28:	4c0b      	ldr	r4, [pc, #44]	; (8001e58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e2c:	e001      	b.n	8001e32 <LoopFillZerobss>

08001e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e30:	3204      	adds	r2, #4

08001e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e34:	d3fb      	bcc.n	8001e2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e36:	f7ff ff1f 	bl	8001c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e3a:	f005 fae1 	bl	8007400 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e3e:	f7fe fced 	bl	800081c <main>
  bx  lr    
 8001e42:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e44:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e4c:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 8001e50:	08007fa8 	.word	0x08007fa8
  ldr r2, =_sbss
 8001e54:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8001e58:	20000dd8 	.word	0x20000dd8

08001e5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e5c:	e7fe      	b.n	8001e5c <ADC_IRQHandler>
	...

08001e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e64:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <HAL_Init+0x40>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a0d      	ldr	r2, [pc, #52]	; (8001ea0 <HAL_Init+0x40>)
 8001e6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_Init+0x40>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <HAL_Init+0x40>)
 8001e76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e7c:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <HAL_Init+0x40>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a07      	ldr	r2, [pc, #28]	; (8001ea0 <HAL_Init+0x40>)
 8001e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e88:	2003      	movs	r0, #3
 8001e8a:	f000 f94f 	bl	800212c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e8e:	2000      	movs	r0, #0
 8001e90:	f000 f808 	bl	8001ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e94:	f7ff fa0a 	bl	80012ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40023c00 	.word	0x40023c00

08001ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_InitTick+0x54>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_InitTick+0x58>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f967 	bl	8002196 <HAL_SYSTICK_Config>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e00e      	b.n	8001ef0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b0f      	cmp	r3, #15
 8001ed6:	d80a      	bhi.n	8001eee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee0:	f000 f92f 	bl	8002142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ee4:	4a06      	ldr	r2, [pc, #24]	; (8001f00 <HAL_InitTick+0x5c>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
 8001eec:	e000      	b.n	8001ef0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	2000012c 	.word	0x2000012c
 8001efc:	20000134 	.word	0x20000134
 8001f00:	20000130 	.word	0x20000130

08001f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_IncTick+0x20>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_IncTick+0x24>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4413      	add	r3, r2
 8001f14:	4a04      	ldr	r2, [pc, #16]	; (8001f28 <HAL_IncTick+0x24>)
 8001f16:	6013      	str	r3, [r2, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	20000134 	.word	0x20000134
 8001f28:	20000dc4 	.word	0x20000dc4

08001f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f30:	4b03      	ldr	r3, [pc, #12]	; (8001f40 <HAL_GetTick+0x14>)
 8001f32:	681b      	ldr	r3, [r3, #0]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	20000dc4 	.word	0x20000dc4

08001f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f4c:	f7ff ffee 	bl	8001f2c <HAL_GetTick>
 8001f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f5c:	d005      	beq.n	8001f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <HAL_Delay+0x44>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4413      	add	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f6a:	bf00      	nop
 8001f6c:	f7ff ffde 	bl	8001f2c <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d8f7      	bhi.n	8001f6c <HAL_Delay+0x28>
  {
  }
}
 8001f7c:	bf00      	nop
 8001f7e:	bf00      	nop
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000134 	.word	0x20000134

08001f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fbe:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	60d3      	str	r3, [r2, #12]
}
 8001fc4:	bf00      	nop
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd8:	4b04      	ldr	r3, [pc, #16]	; (8001fec <__NVIC_GetPriorityGrouping+0x18>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	0a1b      	lsrs	r3, r3, #8
 8001fde:	f003 0307 	and.w	r3, r3, #7
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	db0b      	blt.n	800201a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	f003 021f 	and.w	r2, r3, #31
 8002008:	4907      	ldr	r1, [pc, #28]	; (8002028 <__NVIC_EnableIRQ+0x38>)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	095b      	lsrs	r3, r3, #5
 8002010:	2001      	movs	r0, #1
 8002012:	fa00 f202 	lsl.w	r2, r0, r2
 8002016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	e000e100 	.word	0xe000e100

0800202c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	6039      	str	r1, [r7, #0]
 8002036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203c:	2b00      	cmp	r3, #0
 800203e:	db0a      	blt.n	8002056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	b2da      	uxtb	r2, r3
 8002044:	490c      	ldr	r1, [pc, #48]	; (8002078 <__NVIC_SetPriority+0x4c>)
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	0112      	lsls	r2, r2, #4
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	440b      	add	r3, r1
 8002050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002054:	e00a      	b.n	800206c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	b2da      	uxtb	r2, r3
 800205a:	4908      	ldr	r1, [pc, #32]	; (800207c <__NVIC_SetPriority+0x50>)
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	3b04      	subs	r3, #4
 8002064:	0112      	lsls	r2, r2, #4
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	440b      	add	r3, r1
 800206a:	761a      	strb	r2, [r3, #24]
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	e000e100 	.word	0xe000e100
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002080:	b480      	push	{r7}
 8002082:	b089      	sub	sp, #36	; 0x24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f1c3 0307 	rsb	r3, r3, #7
 800209a:	2b04      	cmp	r3, #4
 800209c:	bf28      	it	cs
 800209e:	2304      	movcs	r3, #4
 80020a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3304      	adds	r3, #4
 80020a6:	2b06      	cmp	r3, #6
 80020a8:	d902      	bls.n	80020b0 <NVIC_EncodePriority+0x30>
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3b03      	subs	r3, #3
 80020ae:	e000      	b.n	80020b2 <NVIC_EncodePriority+0x32>
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b4:	f04f 32ff 	mov.w	r2, #4294967295
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43da      	mvns	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	401a      	ands	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c8:	f04f 31ff 	mov.w	r1, #4294967295
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	fa01 f303 	lsl.w	r3, r1, r3
 80020d2:	43d9      	mvns	r1, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d8:	4313      	orrs	r3, r2
         );
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3724      	adds	r7, #36	; 0x24
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
	...

080020e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f8:	d301      	bcc.n	80020fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020fa:	2301      	movs	r3, #1
 80020fc:	e00f      	b.n	800211e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020fe:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <SysTick_Config+0x40>)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002106:	210f      	movs	r1, #15
 8002108:	f04f 30ff 	mov.w	r0, #4294967295
 800210c:	f7ff ff8e 	bl	800202c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <SysTick_Config+0x40>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002116:	4b04      	ldr	r3, [pc, #16]	; (8002128 <SysTick_Config+0x40>)
 8002118:	2207      	movs	r2, #7
 800211a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	e000e010 	.word	0xe000e010

0800212c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff ff29 	bl	8001f8c <__NVIC_SetPriorityGrouping>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002142:	b580      	push	{r7, lr}
 8002144:	b086      	sub	sp, #24
 8002146:	af00      	add	r7, sp, #0
 8002148:	4603      	mov	r3, r0
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	607a      	str	r2, [r7, #4]
 800214e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002154:	f7ff ff3e 	bl	8001fd4 <__NVIC_GetPriorityGrouping>
 8002158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	6978      	ldr	r0, [r7, #20]
 8002160:	f7ff ff8e 	bl	8002080 <NVIC_EncodePriority>
 8002164:	4602      	mov	r2, r0
 8002166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216a:	4611      	mov	r1, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff5d 	bl	800202c <__NVIC_SetPriority>
}
 8002172:	bf00      	nop
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	4603      	mov	r3, r0
 8002182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff31 	bl	8001ff0 <__NVIC_EnableIRQ>
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff ffa2 	bl	80020e8 <SysTick_Config>
 80021a4:	4603      	mov	r3, r0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b084      	sub	sp, #16
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021bc:	f7ff feb6 	bl	8001f2c <HAL_GetTick>
 80021c0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d008      	beq.n	80021e0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2280      	movs	r2, #128	; 0x80
 80021d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e052      	b.n	8002286 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0216 	bic.w	r2, r2, #22
 80021ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021fe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	2b00      	cmp	r3, #0
 8002206:	d103      	bne.n	8002210 <HAL_DMA_Abort+0x62>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800220c:	2b00      	cmp	r3, #0
 800220e:	d007      	beq.n	8002220 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0208 	bic.w	r2, r2, #8
 800221e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0201 	bic.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002230:	e013      	b.n	800225a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002232:	f7ff fe7b 	bl	8001f2c <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b05      	cmp	r3, #5
 800223e:	d90c      	bls.n	800225a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2220      	movs	r2, #32
 8002244:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2203      	movs	r2, #3
 800224a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e015      	b.n	8002286 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1e4      	bne.n	8002232 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226c:	223f      	movs	r2, #63	; 0x3f
 800226e:	409a      	lsls	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d004      	beq.n	80022ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2280      	movs	r2, #128	; 0x80
 80022a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e00c      	b.n	80022c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2205      	movs	r2, #5
 80022b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0201 	bic.w	r2, r2, #1
 80022c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e06c      	b.n	80023c0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d106      	bne.n	80022fe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2223      	movs	r2, #35	; 0x23
 80022f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7fe ffff 	bl	80012fc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	4b31      	ldr	r3, [pc, #196]	; (80023c8 <HAL_ETH_Init+0xf4>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002306:	4a30      	ldr	r2, [pc, #192]	; (80023c8 <HAL_ETH_Init+0xf4>)
 8002308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800230c:	6453      	str	r3, [r2, #68]	; 0x44
 800230e:	4b2e      	ldr	r3, [pc, #184]	; (80023c8 <HAL_ETH_Init+0xf4>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002316:	60bb      	str	r3, [r7, #8]
 8002318:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800231a:	4b2c      	ldr	r3, [pc, #176]	; (80023cc <HAL_ETH_Init+0xf8>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	4a2b      	ldr	r2, [pc, #172]	; (80023cc <HAL_ETH_Init+0xf8>)
 8002320:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002324:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002326:	4b29      	ldr	r3, [pc, #164]	; (80023cc <HAL_ETH_Init+0xf8>)
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	4927      	ldr	r1, [pc, #156]	; (80023cc <HAL_ETH_Init+0xf8>)
 8002330:	4313      	orrs	r3, r2
 8002332:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002334:	4b25      	ldr	r3, [pc, #148]	; (80023cc <HAL_ETH_Init+0xf8>)
 8002336:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6812      	ldr	r2, [r2, #0]
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800234e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002350:	f7ff fdec 	bl	8001f2c <HAL_GetTick>
 8002354:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002356:	e011      	b.n	800237c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002358:	f7ff fde8 	bl	8001f2c <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002366:	d909      	bls.n	800237c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2204      	movs	r2, #4
 800236c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	22e0      	movs	r2, #224	; 0xe0
 8002374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e021      	b.n	80023c0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1e4      	bne.n	8002358 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f958 	bl	8002644 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f9ff 	bl	8002798 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 fa55 	bl	800284a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	461a      	mov	r2, r3
 80023a6:	2100      	movs	r1, #0
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 f9bd 	bl	8002728 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2210      	movs	r2, #16
 80023ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40013800 	.word	0x40013800

080023d0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4b51      	ldr	r3, [pc, #324]	; (800252c <ETH_SetMACConfig+0x15c>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	7c1b      	ldrb	r3, [r3, #16]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d102      	bne.n	80023f8 <ETH_SetMACConfig+0x28>
 80023f2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80023f6:	e000      	b.n	80023fa <ETH_SetMACConfig+0x2a>
 80023f8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	7c5b      	ldrb	r3, [r3, #17]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d102      	bne.n	8002408 <ETH_SetMACConfig+0x38>
 8002402:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002406:	e000      	b.n	800240a <ETH_SetMACConfig+0x3a>
 8002408:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800240a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002410:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	7fdb      	ldrb	r3, [r3, #31]
 8002416:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002418:	431a      	orrs	r2, r3
                        macconf->Speed |
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800241e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	7f92      	ldrb	r2, [r2, #30]
 8002424:	2a00      	cmp	r2, #0
 8002426:	d102      	bne.n	800242e <ETH_SetMACConfig+0x5e>
 8002428:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800242c:	e000      	b.n	8002430 <ETH_SetMACConfig+0x60>
 800242e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002430:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	7f1b      	ldrb	r3, [r3, #28]
 8002436:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002438:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800243e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	791b      	ldrb	r3, [r3, #4]
 8002444:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002446:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800244e:	2a00      	cmp	r2, #0
 8002450:	d102      	bne.n	8002458 <ETH_SetMACConfig+0x88>
 8002452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002456:	e000      	b.n	800245a <ETH_SetMACConfig+0x8a>
 8002458:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800245a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	7bdb      	ldrb	r3, [r3, #15]
 8002460:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002462:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002468:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002470:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002472:	4313      	orrs	r3, r2
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	4313      	orrs	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800248a:	2001      	movs	r0, #1
 800248c:	f7ff fd5a 	bl	8001f44 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80024a6:	4013      	ands	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ae:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80024b6:	2a00      	cmp	r2, #0
 80024b8:	d101      	bne.n	80024be <ETH_SetMACConfig+0xee>
 80024ba:	2280      	movs	r2, #128	; 0x80
 80024bc:	e000      	b.n	80024c0 <ETH_SetMACConfig+0xf0>
 80024be:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024c0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80024c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80024ce:	2a01      	cmp	r2, #1
 80024d0:	d101      	bne.n	80024d6 <ETH_SetMACConfig+0x106>
 80024d2:	2208      	movs	r2, #8
 80024d4:	e000      	b.n	80024d8 <ETH_SetMACConfig+0x108>
 80024d6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80024d8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80024e0:	2a01      	cmp	r2, #1
 80024e2:	d101      	bne.n	80024e8 <ETH_SetMACConfig+0x118>
 80024e4:	2204      	movs	r2, #4
 80024e6:	e000      	b.n	80024ea <ETH_SetMACConfig+0x11a>
 80024e8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80024ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80024f2:	2a01      	cmp	r2, #1
 80024f4:	d101      	bne.n	80024fa <ETH_SetMACConfig+0x12a>
 80024f6:	2202      	movs	r2, #2
 80024f8:	e000      	b.n	80024fc <ETH_SetMACConfig+0x12c>
 80024fa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024fc:	4313      	orrs	r3, r2
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	4313      	orrs	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002514:	2001      	movs	r0, #1
 8002516:	f7ff fd15 	bl	8001f44 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	619a      	str	r2, [r3, #24]
}
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	ff20810f 	.word	0xff20810f

08002530 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	4b3d      	ldr	r3, [pc, #244]	; (8002640 <ETH_SetDMAConfig+0x110>)
 800254a:	4013      	ands	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	7b1b      	ldrb	r3, [r3, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d102      	bne.n	800255c <ETH_SetDMAConfig+0x2c>
 8002556:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800255a:	e000      	b.n	800255e <ETH_SetDMAConfig+0x2e>
 800255c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	7b5b      	ldrb	r3, [r3, #13]
 8002562:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002564:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	7f52      	ldrb	r2, [r2, #29]
 800256a:	2a00      	cmp	r2, #0
 800256c:	d102      	bne.n	8002574 <ETH_SetDMAConfig+0x44>
 800256e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002572:	e000      	b.n	8002576 <ETH_SetDMAConfig+0x46>
 8002574:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002576:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	7b9b      	ldrb	r3, [r3, #14]
 800257c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800257e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002584:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	7f1b      	ldrb	r3, [r3, #28]
 800258a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800258c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	7f9b      	ldrb	r3, [r3, #30]
 8002592:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002594:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800259a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025a2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80025a4:	4313      	orrs	r3, r2
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025b4:	461a      	mov	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025c6:	2001      	movs	r0, #1
 80025c8:	f7ff fcbc 	bl	8001f44 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025d4:	461a      	mov	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	791b      	ldrb	r3, [r3, #4]
 80025de:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025e4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80025ea:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025f0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025f8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80025fa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002600:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002602:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002608:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6812      	ldr	r2, [r2, #0]
 800260e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002612:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002616:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002624:	2001      	movs	r0, #1
 8002626:	f7ff fc8d 	bl	8001f44 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002632:	461a      	mov	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6013      	str	r3, [r2, #0]
}
 8002638:	bf00      	nop
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	f8de3f23 	.word	0xf8de3f23

08002644 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b0a6      	sub	sp, #152	; 0x98
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800264c:	2301      	movs	r3, #1
 800264e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002652:	2301      	movs	r3, #1
 8002654:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002658:	2300      	movs	r3, #0
 800265a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800265c:	2300      	movs	r3, #0
 800265e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002662:	2301      	movs	r3, #1
 8002664:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002668:	2300      	movs	r3, #0
 800266a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800266e:	2301      	movs	r3, #1
 8002670:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002674:	2300      	movs	r3, #0
 8002676:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800267a:	2300      	movs	r3, #0
 800267c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002680:	2300      	movs	r3, #0
 8002682:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002684:	2300      	movs	r3, #0
 8002686:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800268a:	2300      	movs	r3, #0
 800268c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800268e:	2300      	movs	r3, #0
 8002690:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002694:	2300      	movs	r3, #0
 8002696:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800269a:	2300      	movs	r3, #0
 800269c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80026a0:	2300      	movs	r3, #0
 80026a2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80026a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026aa:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80026ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80026b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026bc:	4619      	mov	r1, r3
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7ff fe86 	bl	80023d0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80026c4:	2301      	movs	r3, #1
 80026c6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80026c8:	2301      	movs	r3, #1
 80026ca:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80026cc:	2301      	movs	r3, #1
 80026ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80026d2:	2301      	movs	r3, #1
 80026d4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80026da:	2300      	movs	r3, #0
 80026dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80026e0:	2300      	movs	r3, #0
 80026e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80026e6:	2300      	movs	r3, #0
 80026e8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80026ea:	2301      	movs	r3, #1
 80026ec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80026f0:	2301      	movs	r3, #1
 80026f2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80026f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026f8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80026fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026fe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002704:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002706:	2301      	movs	r3, #1
 8002708:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800270c:	2300      	movs	r3, #0
 800270e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002710:	2300      	movs	r3, #0
 8002712:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002714:	f107 0308 	add.w	r3, r7, #8
 8002718:	4619      	mov	r1, r3
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff ff08 	bl	8002530 <ETH_SetDMAConfig>
}
 8002720:	bf00      	nop
 8002722:	3798      	adds	r7, #152	; 0x98
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3305      	adds	r3, #5
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	021b      	lsls	r3, r3, #8
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	3204      	adds	r2, #4
 8002740:	7812      	ldrb	r2, [r2, #0]
 8002742:	4313      	orrs	r3, r2
 8002744:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	4b11      	ldr	r3, [pc, #68]	; (8002790 <ETH_MACAddressConfig+0x68>)
 800274a:	4413      	add	r3, r2
 800274c:	461a      	mov	r2, r3
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3303      	adds	r3, #3
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	061a      	lsls	r2, r3, #24
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3302      	adds	r3, #2
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	041b      	lsls	r3, r3, #16
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3301      	adds	r3, #1
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	021b      	lsls	r3, r3, #8
 800276c:	4313      	orrs	r3, r2
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	7812      	ldrb	r2, [r2, #0]
 8002772:	4313      	orrs	r3, r2
 8002774:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <ETH_MACAddressConfig+0x6c>)
 800277a:	4413      	add	r3, r2
 800277c:	461a      	mov	r2, r3
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	6013      	str	r3, [r2, #0]
}
 8002782:	bf00      	nop
 8002784:	371c      	adds	r7, #28
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40028040 	.word	0x40028040
 8002794:	40028044 	.word	0x40028044

08002798 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	e03e      	b.n	8002824 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68d9      	ldr	r1, [r3, #12]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	440b      	add	r3, r1
 80027b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2200      	movs	r2, #0
 80027c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2200      	movs	r2, #0
 80027ce:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	3206      	adds	r2, #6
 80027d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d80c      	bhi.n	8002808 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68d9      	ldr	r1, [r3, #12]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	4613      	mov	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	440b      	add	r3, r1
 8002800:	461a      	mov	r2, r3
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	60da      	str	r2, [r3, #12]
 8002806:	e004      	b.n	8002812 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	461a      	mov	r2, r3
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	3301      	adds	r3, #1
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2b03      	cmp	r3, #3
 8002828:	d9bd      	bls.n	80027a6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68da      	ldr	r2, [r3, #12]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800283c:	611a      	str	r2, [r3, #16]
}
 800283e:	bf00      	nop
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800284a:	b480      	push	{r7}
 800284c:	b085      	sub	sp, #20
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	e046      	b.n	80028e6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6919      	ldr	r1, [r3, #16]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	440b      	add	r3, r1
 8002868:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2200      	movs	r2, #0
 8002874:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2200      	movs	r2, #0
 800287a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2200      	movs	r2, #0
 8002880:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2200      	movs	r2, #0
 8002886:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2200      	movs	r2, #0
 800288c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002894:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800289c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80028aa:	68b9      	ldr	r1, [r7, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	3212      	adds	r2, #18
 80028b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d80c      	bhi.n	80028d6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6919      	ldr	r1, [r3, #16]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	440b      	add	r3, r1
 80028ce:	461a      	mov	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	60da      	str	r2, [r3, #12]
 80028d4:	e004      	b.n	80028e0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	461a      	mov	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	3301      	adds	r3, #1
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d9b5      	bls.n	8002858 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691a      	ldr	r2, [r3, #16]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002916:	60da      	str	r2, [r3, #12]
}
 8002918:	bf00      	nop
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002924:	b480      	push	{r7}
 8002926:	b089      	sub	sp, #36	; 0x24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002932:	2300      	movs	r3, #0
 8002934:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002936:	2300      	movs	r3, #0
 8002938:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800293a:	2300      	movs	r3, #0
 800293c:	61fb      	str	r3, [r7, #28]
 800293e:	e177      	b.n	8002c30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002940:	2201      	movs	r2, #1
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	4013      	ands	r3, r2
 8002952:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	429a      	cmp	r2, r3
 800295a:	f040 8166 	bne.w	8002c2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	2b01      	cmp	r3, #1
 8002968:	d005      	beq.n	8002976 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002972:	2b02      	cmp	r3, #2
 8002974:	d130      	bne.n	80029d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	2203      	movs	r2, #3
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4313      	orrs	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029ac:	2201      	movs	r2, #1
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	091b      	lsrs	r3, r3, #4
 80029c2:	f003 0201 	and.w	r2, r3, #1
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 0303 	and.w	r3, r3, #3
 80029e0:	2b03      	cmp	r3, #3
 80029e2:	d017      	beq.n	8002a14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	2203      	movs	r2, #3
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d123      	bne.n	8002a68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	08da      	lsrs	r2, r3, #3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3208      	adds	r2, #8
 8002a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	220f      	movs	r2, #15
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4013      	ands	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	691a      	ldr	r2, [r3, #16]
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	08da      	lsrs	r2, r3, #3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3208      	adds	r2, #8
 8002a62:	69b9      	ldr	r1, [r7, #24]
 8002a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	2203      	movs	r2, #3
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0203 	and.w	r2, r3, #3
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 80c0 	beq.w	8002c2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	4b66      	ldr	r3, [pc, #408]	; (8002c48 <HAL_GPIO_Init+0x324>)
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab2:	4a65      	ldr	r2, [pc, #404]	; (8002c48 <HAL_GPIO_Init+0x324>)
 8002ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aba:	4b63      	ldr	r3, [pc, #396]	; (8002c48 <HAL_GPIO_Init+0x324>)
 8002abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ac6:	4a61      	ldr	r2, [pc, #388]	; (8002c4c <HAL_GPIO_Init+0x328>)
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	089b      	lsrs	r3, r3, #2
 8002acc:	3302      	adds	r3, #2
 8002ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	220f      	movs	r2, #15
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a58      	ldr	r2, [pc, #352]	; (8002c50 <HAL_GPIO_Init+0x32c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d037      	beq.n	8002b62 <HAL_GPIO_Init+0x23e>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a57      	ldr	r2, [pc, #348]	; (8002c54 <HAL_GPIO_Init+0x330>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d031      	beq.n	8002b5e <HAL_GPIO_Init+0x23a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a56      	ldr	r2, [pc, #344]	; (8002c58 <HAL_GPIO_Init+0x334>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d02b      	beq.n	8002b5a <HAL_GPIO_Init+0x236>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a55      	ldr	r2, [pc, #340]	; (8002c5c <HAL_GPIO_Init+0x338>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d025      	beq.n	8002b56 <HAL_GPIO_Init+0x232>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a54      	ldr	r2, [pc, #336]	; (8002c60 <HAL_GPIO_Init+0x33c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d01f      	beq.n	8002b52 <HAL_GPIO_Init+0x22e>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a53      	ldr	r2, [pc, #332]	; (8002c64 <HAL_GPIO_Init+0x340>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d019      	beq.n	8002b4e <HAL_GPIO_Init+0x22a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a52      	ldr	r2, [pc, #328]	; (8002c68 <HAL_GPIO_Init+0x344>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d013      	beq.n	8002b4a <HAL_GPIO_Init+0x226>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a51      	ldr	r2, [pc, #324]	; (8002c6c <HAL_GPIO_Init+0x348>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d00d      	beq.n	8002b46 <HAL_GPIO_Init+0x222>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a50      	ldr	r2, [pc, #320]	; (8002c70 <HAL_GPIO_Init+0x34c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d007      	beq.n	8002b42 <HAL_GPIO_Init+0x21e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a4f      	ldr	r2, [pc, #316]	; (8002c74 <HAL_GPIO_Init+0x350>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d101      	bne.n	8002b3e <HAL_GPIO_Init+0x21a>
 8002b3a:	2309      	movs	r3, #9
 8002b3c:	e012      	b.n	8002b64 <HAL_GPIO_Init+0x240>
 8002b3e:	230a      	movs	r3, #10
 8002b40:	e010      	b.n	8002b64 <HAL_GPIO_Init+0x240>
 8002b42:	2308      	movs	r3, #8
 8002b44:	e00e      	b.n	8002b64 <HAL_GPIO_Init+0x240>
 8002b46:	2307      	movs	r3, #7
 8002b48:	e00c      	b.n	8002b64 <HAL_GPIO_Init+0x240>
 8002b4a:	2306      	movs	r3, #6
 8002b4c:	e00a      	b.n	8002b64 <HAL_GPIO_Init+0x240>
 8002b4e:	2305      	movs	r3, #5
 8002b50:	e008      	b.n	8002b64 <HAL_GPIO_Init+0x240>
 8002b52:	2304      	movs	r3, #4
 8002b54:	e006      	b.n	8002b64 <HAL_GPIO_Init+0x240>
 8002b56:	2303      	movs	r3, #3
 8002b58:	e004      	b.n	8002b64 <HAL_GPIO_Init+0x240>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e002      	b.n	8002b64 <HAL_GPIO_Init+0x240>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <HAL_GPIO_Init+0x240>
 8002b62:	2300      	movs	r3, #0
 8002b64:	69fa      	ldr	r2, [r7, #28]
 8002b66:	f002 0203 	and.w	r2, r2, #3
 8002b6a:	0092      	lsls	r2, r2, #2
 8002b6c:	4093      	lsls	r3, r2
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b74:	4935      	ldr	r1, [pc, #212]	; (8002c4c <HAL_GPIO_Init+0x328>)
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	089b      	lsrs	r3, r3, #2
 8002b7a:	3302      	adds	r3, #2
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b82:	4b3d      	ldr	r3, [pc, #244]	; (8002c78 <HAL_GPIO_Init+0x354>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ba6:	4a34      	ldr	r2, [pc, #208]	; (8002c78 <HAL_GPIO_Init+0x354>)
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bac:	4b32      	ldr	r3, [pc, #200]	; (8002c78 <HAL_GPIO_Init+0x354>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bd0:	4a29      	ldr	r2, [pc, #164]	; (8002c78 <HAL_GPIO_Init+0x354>)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bd6:	4b28      	ldr	r3, [pc, #160]	; (8002c78 <HAL_GPIO_Init+0x354>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bfa:	4a1f      	ldr	r2, [pc, #124]	; (8002c78 <HAL_GPIO_Init+0x354>)
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c00:	4b1d      	ldr	r3, [pc, #116]	; (8002c78 <HAL_GPIO_Init+0x354>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c24:	4a14      	ldr	r2, [pc, #80]	; (8002c78 <HAL_GPIO_Init+0x354>)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	61fb      	str	r3, [r7, #28]
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	2b0f      	cmp	r3, #15
 8002c34:	f67f ae84 	bls.w	8002940 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c38:	bf00      	nop
 8002c3a:	bf00      	nop
 8002c3c:	3724      	adds	r7, #36	; 0x24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40013800 	.word	0x40013800
 8002c50:	40020000 	.word	0x40020000
 8002c54:	40020400 	.word	0x40020400
 8002c58:	40020800 	.word	0x40020800
 8002c5c:	40020c00 	.word	0x40020c00
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40021400 	.word	0x40021400
 8002c68:	40021800 	.word	0x40021800
 8002c6c:	40021c00 	.word	0x40021c00
 8002c70:	40022000 	.word	0x40022000
 8002c74:	40022400 	.word	0x40022400
 8002c78:	40013c00 	.word	0x40013c00

08002c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	460b      	mov	r3, r1
 8002c86:	807b      	strh	r3, [r7, #2]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c8c:	787b      	ldrb	r3, [r7, #1]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c92:	887a      	ldrh	r2, [r7, #2]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c98:	e003      	b.n	8002ca2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c9a:	887b      	ldrh	r3, [r7, #2]
 8002c9c:	041a      	lsls	r2, r3, #16
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	619a      	str	r2, [r3, #24]
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
	...

08002cb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e12b      	b.n	8002f1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fe fbd6 	bl	8001488 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2224      	movs	r2, #36	; 0x24
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0201 	bic.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d14:	f000 ff18 	bl	8003b48 <HAL_RCC_GetPCLK1Freq>
 8002d18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	4a81      	ldr	r2, [pc, #516]	; (8002f24 <HAL_I2C_Init+0x274>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d807      	bhi.n	8002d34 <HAL_I2C_Init+0x84>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4a80      	ldr	r2, [pc, #512]	; (8002f28 <HAL_I2C_Init+0x278>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	bf94      	ite	ls
 8002d2c:	2301      	movls	r3, #1
 8002d2e:	2300      	movhi	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	e006      	b.n	8002d42 <HAL_I2C_Init+0x92>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4a7d      	ldr	r2, [pc, #500]	; (8002f2c <HAL_I2C_Init+0x27c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	bf94      	ite	ls
 8002d3c:	2301      	movls	r3, #1
 8002d3e:	2300      	movhi	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e0e7      	b.n	8002f1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4a78      	ldr	r2, [pc, #480]	; (8002f30 <HAL_I2C_Init+0x280>)
 8002d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d52:	0c9b      	lsrs	r3, r3, #18
 8002d54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	4a6a      	ldr	r2, [pc, #424]	; (8002f24 <HAL_I2C_Init+0x274>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d802      	bhi.n	8002d84 <HAL_I2C_Init+0xd4>
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	3301      	adds	r3, #1
 8002d82:	e009      	b.n	8002d98 <HAL_I2C_Init+0xe8>
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d8a:	fb02 f303 	mul.w	r3, r2, r3
 8002d8e:	4a69      	ldr	r2, [pc, #420]	; (8002f34 <HAL_I2C_Init+0x284>)
 8002d90:	fba2 2303 	umull	r2, r3, r2, r3
 8002d94:	099b      	lsrs	r3, r3, #6
 8002d96:	3301      	adds	r3, #1
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002daa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	495c      	ldr	r1, [pc, #368]	; (8002f24 <HAL_I2C_Init+0x274>)
 8002db4:	428b      	cmp	r3, r1
 8002db6:	d819      	bhi.n	8002dec <HAL_I2C_Init+0x13c>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	1e59      	subs	r1, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dc6:	1c59      	adds	r1, r3, #1
 8002dc8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002dcc:	400b      	ands	r3, r1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <HAL_I2C_Init+0x138>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1e59      	subs	r1, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002de0:	3301      	adds	r3, #1
 8002de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de6:	e051      	b.n	8002e8c <HAL_I2C_Init+0x1dc>
 8002de8:	2304      	movs	r3, #4
 8002dea:	e04f      	b.n	8002e8c <HAL_I2C_Init+0x1dc>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d111      	bne.n	8002e18 <HAL_I2C_Init+0x168>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	1e58      	subs	r0, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6859      	ldr	r1, [r3, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	440b      	add	r3, r1
 8002e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e06:	3301      	adds	r3, #1
 8002e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	bf0c      	ite	eq
 8002e10:	2301      	moveq	r3, #1
 8002e12:	2300      	movne	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	e012      	b.n	8002e3e <HAL_I2C_Init+0x18e>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	1e58      	subs	r0, r3, #1
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6859      	ldr	r1, [r3, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	0099      	lsls	r1, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e2e:	3301      	adds	r3, #1
 8002e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf0c      	ite	eq
 8002e38:	2301      	moveq	r3, #1
 8002e3a:	2300      	movne	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <HAL_I2C_Init+0x196>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e022      	b.n	8002e8c <HAL_I2C_Init+0x1dc>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10e      	bne.n	8002e6c <HAL_I2C_Init+0x1bc>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	1e58      	subs	r0, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6859      	ldr	r1, [r3, #4]
 8002e56:	460b      	mov	r3, r1
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	440b      	add	r3, r1
 8002e5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e60:	3301      	adds	r3, #1
 8002e62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e6a:	e00f      	b.n	8002e8c <HAL_I2C_Init+0x1dc>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	1e58      	subs	r0, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6859      	ldr	r1, [r3, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	0099      	lsls	r1, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e82:	3301      	adds	r3, #1
 8002e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	6809      	ldr	r1, [r1, #0]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69da      	ldr	r2, [r3, #28]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002eba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6911      	ldr	r1, [r2, #16]
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	68d2      	ldr	r2, [r2, #12]
 8002ec6:	4311      	orrs	r1, r2
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6812      	ldr	r2, [r2, #0]
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2220      	movs	r2, #32
 8002f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	000186a0 	.word	0x000186a0
 8002f28:	001e847f 	.word	0x001e847f
 8002f2c:	003d08ff 	.word	0x003d08ff
 8002f30:	431bde83 	.word	0x431bde83
 8002f34:	10624dd3 	.word	0x10624dd3

08002f38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b20      	cmp	r3, #32
 8002f4c:	d129      	bne.n	8002fa2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2224      	movs	r2, #36	; 0x24
 8002f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0201 	bic.w	r2, r2, #1
 8002f64:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0210 	bic.w	r2, r2, #16
 8002f74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0201 	orr.w	r2, r2, #1
 8002f94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	e000      	b.n	8002fa4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002fa2:	2302      	movs	r3, #2
  }
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b20      	cmp	r3, #32
 8002fc8:	d12a      	bne.n	8003020 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2224      	movs	r2, #36	; 0x24
 8002fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0201 	bic.w	r2, r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002fea:	89fb      	ldrh	r3, [r7, #14]
 8002fec:	f023 030f 	bic.w	r3, r3, #15
 8002ff0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	89fb      	ldrh	r3, [r7, #14]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	89fa      	ldrh	r2, [r7, #14]
 8003002:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0201 	orr.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	e000      	b.n	8003022 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003020:	2302      	movs	r3, #2
  }
}
 8003022:	4618      	mov	r0, r3
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800302e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003030:	b08f      	sub	sp, #60	; 0x3c
 8003032:	af0a      	add	r7, sp, #40	; 0x28
 8003034:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e10f      	b.n	8003260 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d106      	bne.n	8003060 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7fe fc92 	bl	8001984 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2203      	movs	r2, #3
 8003064:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003070:	2b00      	cmp	r3, #0
 8003072:	d102      	bne.n	800307a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f003 ff17 	bl	8006eb2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	603b      	str	r3, [r7, #0]
 800308a:	687e      	ldr	r6, [r7, #4]
 800308c:	466d      	mov	r5, sp
 800308e:	f106 0410 	add.w	r4, r6, #16
 8003092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003098:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800309a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800309e:	e885 0003 	stmia.w	r5, {r0, r1}
 80030a2:	1d33      	adds	r3, r6, #4
 80030a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030a6:	6838      	ldr	r0, [r7, #0]
 80030a8:	f003 fea2 	bl	8006df0 <USB_CoreInit>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d005      	beq.n	80030be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2202      	movs	r2, #2
 80030b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e0d0      	b.n	8003260 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2100      	movs	r1, #0
 80030c4:	4618      	mov	r0, r3
 80030c6:	f003 ff05 	bl	8006ed4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ca:	2300      	movs	r3, #0
 80030cc:	73fb      	strb	r3, [r7, #15]
 80030ce:	e04a      	b.n	8003166 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030d0:	7bfa      	ldrb	r2, [r7, #15]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	333d      	adds	r3, #61	; 0x3d
 80030e0:	2201      	movs	r2, #1
 80030e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030e4:	7bfa      	ldrb	r2, [r7, #15]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4413      	add	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	333c      	adds	r3, #60	; 0x3c
 80030f4:	7bfa      	ldrb	r2, [r7, #15]
 80030f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030f8:	7bfa      	ldrb	r2, [r7, #15]
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
 80030fc:	b298      	uxth	r0, r3
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	4613      	mov	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	3344      	adds	r3, #68	; 0x44
 800310c:	4602      	mov	r2, r0
 800310e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003110:	7bfa      	ldrb	r2, [r7, #15]
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	4413      	add	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	3340      	adds	r3, #64	; 0x40
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003124:	7bfa      	ldrb	r2, [r7, #15]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	3348      	adds	r3, #72	; 0x48
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003138:	7bfa      	ldrb	r2, [r7, #15]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4413      	add	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	334c      	adds	r3, #76	; 0x4c
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800314c:	7bfa      	ldrb	r2, [r7, #15]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	3354      	adds	r3, #84	; 0x54
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	3301      	adds	r3, #1
 8003164:	73fb      	strb	r3, [r7, #15]
 8003166:	7bfa      	ldrb	r2, [r7, #15]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	429a      	cmp	r2, r3
 800316e:	d3af      	bcc.n	80030d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003170:	2300      	movs	r3, #0
 8003172:	73fb      	strb	r3, [r7, #15]
 8003174:	e044      	b.n	8003200 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003176:	7bfa      	ldrb	r2, [r7, #15]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800319e:	7bfa      	ldrb	r2, [r7, #15]
 80031a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031a2:	7bfa      	ldrb	r2, [r7, #15]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	4413      	add	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80031b4:	2200      	movs	r2, #0
 80031b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031b8:	7bfa      	ldrb	r2, [r7, #15]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4413      	add	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031ce:	7bfa      	ldrb	r2, [r7, #15]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031e4:	7bfa      	ldrb	r2, [r7, #15]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	3301      	adds	r3, #1
 80031fe:	73fb      	strb	r3, [r7, #15]
 8003200:	7bfa      	ldrb	r2, [r7, #15]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	429a      	cmp	r2, r3
 8003208:	d3b5      	bcc.n	8003176 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	603b      	str	r3, [r7, #0]
 8003210:	687e      	ldr	r6, [r7, #4]
 8003212:	466d      	mov	r5, sp
 8003214:	f106 0410 	add.w	r4, r6, #16
 8003218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800321a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800321c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800321e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003220:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003224:	e885 0003 	stmia.w	r5, {r0, r1}
 8003228:	1d33      	adds	r3, r6, #4
 800322a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800322c:	6838      	ldr	r0, [r7, #0]
 800322e:	f003 fe9d 	bl	8006f6c <USB_DevInit>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e00d      	b.n	8003260 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f004 f868 	bl	800732e <USB_DevDisconnect>

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003268 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e267      	b.n	800374a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d075      	beq.n	8003372 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003286:	4b88      	ldr	r3, [pc, #544]	; (80034a8 <HAL_RCC_OscConfig+0x240>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 030c 	and.w	r3, r3, #12
 800328e:	2b04      	cmp	r3, #4
 8003290:	d00c      	beq.n	80032ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003292:	4b85      	ldr	r3, [pc, #532]	; (80034a8 <HAL_RCC_OscConfig+0x240>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800329a:	2b08      	cmp	r3, #8
 800329c:	d112      	bne.n	80032c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800329e:	4b82      	ldr	r3, [pc, #520]	; (80034a8 <HAL_RCC_OscConfig+0x240>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032aa:	d10b      	bne.n	80032c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ac:	4b7e      	ldr	r3, [pc, #504]	; (80034a8 <HAL_RCC_OscConfig+0x240>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d05b      	beq.n	8003370 <HAL_RCC_OscConfig+0x108>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d157      	bne.n	8003370 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e242      	b.n	800374a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032cc:	d106      	bne.n	80032dc <HAL_RCC_OscConfig+0x74>
 80032ce:	4b76      	ldr	r3, [pc, #472]	; (80034a8 <HAL_RCC_OscConfig+0x240>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a75      	ldr	r2, [pc, #468]	; (80034a8 <HAL_RCC_OscConfig+0x240>)
 80032d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	e01d      	b.n	8003318 <HAL_RCC_OscConfig+0xb0>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032e4:	d10c      	bne.n	8003300 <HAL_RCC_OscConfig+0x98>
 80032e6:	4b70      	ldr	r3, [pc, #448]	; (80034a8 <HAL_RCC_OscConfig+0x240>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a6f      	ldr	r2, [pc, #444]	; (80034a8 <HAL_RCC_OscConfig+0x240>)
 80032ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	4b6d      	ldr	r3, [pc, #436]	; (80034a8 <HAL_RCC_OscConfig+0x240>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a6c      	ldr	r2, [pc, #432]	; (80034a8 <HAL_RCC_OscConfig+0x240>)
 80032f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	e00b      	b.n	8003318 <HAL_RCC_OscConfig+0xb0>
 8003300:	4b69      	ldr	r3, [pc, #420]	; (80034a8 <HAL_RCC_OscConfig+0x240>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a68      	ldr	r2, [pc, #416]	; (80034a8 <HAL_RCC_OscConfig+0x240>)
 8003306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	4b66      	ldr	r3, [pc, #408]	; (80034a8 <HAL_RCC_OscConfig+0x240>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a65      	ldr	r2, [pc, #404]	; (80034a8 <HAL_RCC_OscConfig+0x240>)
 8003312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d013      	beq.n	8003348 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003320:	f7fe fe04 	bl	8001f2c <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003328:	f7fe fe00 	bl	8001f2c <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b64      	cmp	r3, #100	; 0x64
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e207      	b.n	800374a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333a:	4b5b      	ldr	r3, [pc, #364]	; (80034a8 <HAL_RCC_OscConfig+0x240>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f0      	beq.n	8003328 <HAL_RCC_OscConfig+0xc0>
 8003346:	e014      	b.n	8003372 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003348:	f7fe fdf0 	bl	8001f2c <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003350:	f7fe fdec 	bl	8001f2c <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b64      	cmp	r3, #100	; 0x64
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e1f3      	b.n	800374a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003362:	4b51      	ldr	r3, [pc, #324]	; (80034a8 <HAL_RCC_OscConfig+0x240>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0xe8>
 800336e:	e000      	b.n	8003372 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d063      	beq.n	8003446 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800337e:	4b4a      	ldr	r3, [pc, #296]	; (80034a8 <HAL_RCC_OscConfig+0x240>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 030c 	and.w	r3, r3, #12
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00b      	beq.n	80033a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800338a:	4b47      	ldr	r3, [pc, #284]	; (80034a8 <HAL_RCC_OscConfig+0x240>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003392:	2b08      	cmp	r3, #8
 8003394:	d11c      	bne.n	80033d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003396:	4b44      	ldr	r3, [pc, #272]	; (80034a8 <HAL_RCC_OscConfig+0x240>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d116      	bne.n	80033d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033a2:	4b41      	ldr	r3, [pc, #260]	; (80034a8 <HAL_RCC_OscConfig+0x240>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d005      	beq.n	80033ba <HAL_RCC_OscConfig+0x152>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d001      	beq.n	80033ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e1c7      	b.n	800374a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ba:	4b3b      	ldr	r3, [pc, #236]	; (80034a8 <HAL_RCC_OscConfig+0x240>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4937      	ldr	r1, [pc, #220]	; (80034a8 <HAL_RCC_OscConfig+0x240>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ce:	e03a      	b.n	8003446 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d020      	beq.n	800341a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033d8:	4b34      	ldr	r3, [pc, #208]	; (80034ac <HAL_RCC_OscConfig+0x244>)
 80033da:	2201      	movs	r2, #1
 80033dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033de:	f7fe fda5 	bl	8001f2c <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033e6:	f7fe fda1 	bl	8001f2c <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e1a8      	b.n	800374a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f8:	4b2b      	ldr	r3, [pc, #172]	; (80034a8 <HAL_RCC_OscConfig+0x240>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0f0      	beq.n	80033e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003404:	4b28      	ldr	r3, [pc, #160]	; (80034a8 <HAL_RCC_OscConfig+0x240>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	4925      	ldr	r1, [pc, #148]	; (80034a8 <HAL_RCC_OscConfig+0x240>)
 8003414:	4313      	orrs	r3, r2
 8003416:	600b      	str	r3, [r1, #0]
 8003418:	e015      	b.n	8003446 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800341a:	4b24      	ldr	r3, [pc, #144]	; (80034ac <HAL_RCC_OscConfig+0x244>)
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003420:	f7fe fd84 	bl	8001f2c <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003428:	f7fe fd80 	bl	8001f2c <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e187      	b.n	800374a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800343a:	4b1b      	ldr	r3, [pc, #108]	; (80034a8 <HAL_RCC_OscConfig+0x240>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	2b00      	cmp	r3, #0
 8003450:	d036      	beq.n	80034c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d016      	beq.n	8003488 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800345a:	4b15      	ldr	r3, [pc, #84]	; (80034b0 <HAL_RCC_OscConfig+0x248>)
 800345c:	2201      	movs	r2, #1
 800345e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003460:	f7fe fd64 	bl	8001f2c <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003468:	f7fe fd60 	bl	8001f2c <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e167      	b.n	800374a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800347a:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <HAL_RCC_OscConfig+0x240>)
 800347c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0x200>
 8003486:	e01b      	b.n	80034c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003488:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <HAL_RCC_OscConfig+0x248>)
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800348e:	f7fe fd4d 	bl	8001f2c <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003494:	e00e      	b.n	80034b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003496:	f7fe fd49 	bl	8001f2c <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d907      	bls.n	80034b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e150      	b.n	800374a <HAL_RCC_OscConfig+0x4e2>
 80034a8:	40023800 	.word	0x40023800
 80034ac:	42470000 	.word	0x42470000
 80034b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b4:	4b88      	ldr	r3, [pc, #544]	; (80036d8 <HAL_RCC_OscConfig+0x470>)
 80034b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1ea      	bne.n	8003496 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 8097 	beq.w	80035fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ce:	2300      	movs	r3, #0
 80034d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034d2:	4b81      	ldr	r3, [pc, #516]	; (80036d8 <HAL_RCC_OscConfig+0x470>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10f      	bne.n	80034fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034de:	2300      	movs	r3, #0
 80034e0:	60bb      	str	r3, [r7, #8]
 80034e2:	4b7d      	ldr	r3, [pc, #500]	; (80036d8 <HAL_RCC_OscConfig+0x470>)
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	4a7c      	ldr	r2, [pc, #496]	; (80036d8 <HAL_RCC_OscConfig+0x470>)
 80034e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ec:	6413      	str	r3, [r2, #64]	; 0x40
 80034ee:	4b7a      	ldr	r3, [pc, #488]	; (80036d8 <HAL_RCC_OscConfig+0x470>)
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034fa:	2301      	movs	r3, #1
 80034fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fe:	4b77      	ldr	r3, [pc, #476]	; (80036dc <HAL_RCC_OscConfig+0x474>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003506:	2b00      	cmp	r3, #0
 8003508:	d118      	bne.n	800353c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800350a:	4b74      	ldr	r3, [pc, #464]	; (80036dc <HAL_RCC_OscConfig+0x474>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a73      	ldr	r2, [pc, #460]	; (80036dc <HAL_RCC_OscConfig+0x474>)
 8003510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003516:	f7fe fd09 	bl	8001f2c <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351c:	e008      	b.n	8003530 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800351e:	f7fe fd05 	bl	8001f2c <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e10c      	b.n	800374a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003530:	4b6a      	ldr	r3, [pc, #424]	; (80036dc <HAL_RCC_OscConfig+0x474>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0f0      	beq.n	800351e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d106      	bne.n	8003552 <HAL_RCC_OscConfig+0x2ea>
 8003544:	4b64      	ldr	r3, [pc, #400]	; (80036d8 <HAL_RCC_OscConfig+0x470>)
 8003546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003548:	4a63      	ldr	r2, [pc, #396]	; (80036d8 <HAL_RCC_OscConfig+0x470>)
 800354a:	f043 0301 	orr.w	r3, r3, #1
 800354e:	6713      	str	r3, [r2, #112]	; 0x70
 8003550:	e01c      	b.n	800358c <HAL_RCC_OscConfig+0x324>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	2b05      	cmp	r3, #5
 8003558:	d10c      	bne.n	8003574 <HAL_RCC_OscConfig+0x30c>
 800355a:	4b5f      	ldr	r3, [pc, #380]	; (80036d8 <HAL_RCC_OscConfig+0x470>)
 800355c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355e:	4a5e      	ldr	r2, [pc, #376]	; (80036d8 <HAL_RCC_OscConfig+0x470>)
 8003560:	f043 0304 	orr.w	r3, r3, #4
 8003564:	6713      	str	r3, [r2, #112]	; 0x70
 8003566:	4b5c      	ldr	r3, [pc, #368]	; (80036d8 <HAL_RCC_OscConfig+0x470>)
 8003568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356a:	4a5b      	ldr	r2, [pc, #364]	; (80036d8 <HAL_RCC_OscConfig+0x470>)
 800356c:	f043 0301 	orr.w	r3, r3, #1
 8003570:	6713      	str	r3, [r2, #112]	; 0x70
 8003572:	e00b      	b.n	800358c <HAL_RCC_OscConfig+0x324>
 8003574:	4b58      	ldr	r3, [pc, #352]	; (80036d8 <HAL_RCC_OscConfig+0x470>)
 8003576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003578:	4a57      	ldr	r2, [pc, #348]	; (80036d8 <HAL_RCC_OscConfig+0x470>)
 800357a:	f023 0301 	bic.w	r3, r3, #1
 800357e:	6713      	str	r3, [r2, #112]	; 0x70
 8003580:	4b55      	ldr	r3, [pc, #340]	; (80036d8 <HAL_RCC_OscConfig+0x470>)
 8003582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003584:	4a54      	ldr	r2, [pc, #336]	; (80036d8 <HAL_RCC_OscConfig+0x470>)
 8003586:	f023 0304 	bic.w	r3, r3, #4
 800358a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d015      	beq.n	80035c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003594:	f7fe fcca 	bl	8001f2c <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359a:	e00a      	b.n	80035b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800359c:	f7fe fcc6 	bl	8001f2c <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e0cb      	b.n	800374a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b2:	4b49      	ldr	r3, [pc, #292]	; (80036d8 <HAL_RCC_OscConfig+0x470>)
 80035b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0ee      	beq.n	800359c <HAL_RCC_OscConfig+0x334>
 80035be:	e014      	b.n	80035ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c0:	f7fe fcb4 	bl	8001f2c <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c6:	e00a      	b.n	80035de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035c8:	f7fe fcb0 	bl	8001f2c <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e0b5      	b.n	800374a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035de:	4b3e      	ldr	r3, [pc, #248]	; (80036d8 <HAL_RCC_OscConfig+0x470>)
 80035e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1ee      	bne.n	80035c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035ea:	7dfb      	ldrb	r3, [r7, #23]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d105      	bne.n	80035fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f0:	4b39      	ldr	r3, [pc, #228]	; (80036d8 <HAL_RCC_OscConfig+0x470>)
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	4a38      	ldr	r2, [pc, #224]	; (80036d8 <HAL_RCC_OscConfig+0x470>)
 80035f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 80a1 	beq.w	8003748 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003606:	4b34      	ldr	r3, [pc, #208]	; (80036d8 <HAL_RCC_OscConfig+0x470>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
 800360e:	2b08      	cmp	r3, #8
 8003610:	d05c      	beq.n	80036cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	2b02      	cmp	r3, #2
 8003618:	d141      	bne.n	800369e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800361a:	4b31      	ldr	r3, [pc, #196]	; (80036e0 <HAL_RCC_OscConfig+0x478>)
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003620:	f7fe fc84 	bl	8001f2c <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003628:	f7fe fc80 	bl	8001f2c <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e087      	b.n	800374a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800363a:	4b27      	ldr	r3, [pc, #156]	; (80036d8 <HAL_RCC_OscConfig+0x470>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f0      	bne.n	8003628 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69da      	ldr	r2, [r3, #28]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	019b      	lsls	r3, r3, #6
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365c:	085b      	lsrs	r3, r3, #1
 800365e:	3b01      	subs	r3, #1
 8003660:	041b      	lsls	r3, r3, #16
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003668:	061b      	lsls	r3, r3, #24
 800366a:	491b      	ldr	r1, [pc, #108]	; (80036d8 <HAL_RCC_OscConfig+0x470>)
 800366c:	4313      	orrs	r3, r2
 800366e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003670:	4b1b      	ldr	r3, [pc, #108]	; (80036e0 <HAL_RCC_OscConfig+0x478>)
 8003672:	2201      	movs	r2, #1
 8003674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003676:	f7fe fc59 	bl	8001f2c <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800367c:	e008      	b.n	8003690 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800367e:	f7fe fc55 	bl	8001f2c <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e05c      	b.n	800374a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003690:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <HAL_RCC_OscConfig+0x470>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0f0      	beq.n	800367e <HAL_RCC_OscConfig+0x416>
 800369c:	e054      	b.n	8003748 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369e:	4b10      	ldr	r3, [pc, #64]	; (80036e0 <HAL_RCC_OscConfig+0x478>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a4:	f7fe fc42 	bl	8001f2c <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ac:	f7fe fc3e 	bl	8001f2c <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e045      	b.n	800374a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036be:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <HAL_RCC_OscConfig+0x470>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f0      	bne.n	80036ac <HAL_RCC_OscConfig+0x444>
 80036ca:	e03d      	b.n	8003748 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d107      	bne.n	80036e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e038      	b.n	800374a <HAL_RCC_OscConfig+0x4e2>
 80036d8:	40023800 	.word	0x40023800
 80036dc:	40007000 	.word	0x40007000
 80036e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036e4:	4b1b      	ldr	r3, [pc, #108]	; (8003754 <HAL_RCC_OscConfig+0x4ec>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d028      	beq.n	8003744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d121      	bne.n	8003744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800370a:	429a      	cmp	r2, r3
 800370c:	d11a      	bne.n	8003744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003714:	4013      	ands	r3, r2
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800371a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800371c:	4293      	cmp	r3, r2
 800371e:	d111      	bne.n	8003744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372a:	085b      	lsrs	r3, r3, #1
 800372c:	3b01      	subs	r3, #1
 800372e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003730:	429a      	cmp	r2, r3
 8003732:	d107      	bne.n	8003744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003740:	429a      	cmp	r2, r3
 8003742:	d001      	beq.n	8003748 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e000      	b.n	800374a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40023800 	.word	0x40023800

08003758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e0cc      	b.n	8003906 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800376c:	4b68      	ldr	r3, [pc, #416]	; (8003910 <HAL_RCC_ClockConfig+0x1b8>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 030f 	and.w	r3, r3, #15
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d90c      	bls.n	8003794 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377a:	4b65      	ldr	r3, [pc, #404]	; (8003910 <HAL_RCC_ClockConfig+0x1b8>)
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003782:	4b63      	ldr	r3, [pc, #396]	; (8003910 <HAL_RCC_ClockConfig+0x1b8>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d001      	beq.n	8003794 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e0b8      	b.n	8003906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d020      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037ac:	4b59      	ldr	r3, [pc, #356]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	4a58      	ldr	r2, [pc, #352]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 80037b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d005      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037c4:	4b53      	ldr	r3, [pc, #332]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	4a52      	ldr	r2, [pc, #328]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 80037ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037d0:	4b50      	ldr	r3, [pc, #320]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	494d      	ldr	r1, [pc, #308]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d044      	beq.n	8003878 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d107      	bne.n	8003806 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f6:	4b47      	ldr	r3, [pc, #284]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d119      	bne.n	8003836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e07f      	b.n	8003906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b02      	cmp	r3, #2
 800380c:	d003      	beq.n	8003816 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003812:	2b03      	cmp	r3, #3
 8003814:	d107      	bne.n	8003826 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003816:	4b3f      	ldr	r3, [pc, #252]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d109      	bne.n	8003836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e06f      	b.n	8003906 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003826:	4b3b      	ldr	r3, [pc, #236]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e067      	b.n	8003906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003836:	4b37      	ldr	r3, [pc, #220]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f023 0203 	bic.w	r2, r3, #3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	4934      	ldr	r1, [pc, #208]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 8003844:	4313      	orrs	r3, r2
 8003846:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003848:	f7fe fb70 	bl	8001f2c <HAL_GetTick>
 800384c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800384e:	e00a      	b.n	8003866 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003850:	f7fe fb6c 	bl	8001f2c <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	f241 3288 	movw	r2, #5000	; 0x1388
 800385e:	4293      	cmp	r3, r2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e04f      	b.n	8003906 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003866:	4b2b      	ldr	r3, [pc, #172]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 020c 	and.w	r2, r3, #12
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	429a      	cmp	r2, r3
 8003876:	d1eb      	bne.n	8003850 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003878:	4b25      	ldr	r3, [pc, #148]	; (8003910 <HAL_RCC_ClockConfig+0x1b8>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d20c      	bcs.n	80038a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003886:	4b22      	ldr	r3, [pc, #136]	; (8003910 <HAL_RCC_ClockConfig+0x1b8>)
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800388e:	4b20      	ldr	r3, [pc, #128]	; (8003910 <HAL_RCC_ClockConfig+0x1b8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	429a      	cmp	r2, r3
 800389a:	d001      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e032      	b.n	8003906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d008      	beq.n	80038be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038ac:	4b19      	ldr	r3, [pc, #100]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	4916      	ldr	r1, [pc, #88]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d009      	beq.n	80038de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ca:	4b12      	ldr	r3, [pc, #72]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	490e      	ldr	r1, [pc, #56]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038de:	f000 f821 	bl	8003924 <HAL_RCC_GetSysClockFreq>
 80038e2:	4602      	mov	r2, r0
 80038e4:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	091b      	lsrs	r3, r3, #4
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	490a      	ldr	r1, [pc, #40]	; (8003918 <HAL_RCC_ClockConfig+0x1c0>)
 80038f0:	5ccb      	ldrb	r3, [r1, r3]
 80038f2:	fa22 f303 	lsr.w	r3, r2, r3
 80038f6:	4a09      	ldr	r2, [pc, #36]	; (800391c <HAL_RCC_ClockConfig+0x1c4>)
 80038f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038fa:	4b09      	ldr	r3, [pc, #36]	; (8003920 <HAL_RCC_ClockConfig+0x1c8>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fe fad0 	bl	8001ea4 <HAL_InitTick>

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40023c00 	.word	0x40023c00
 8003914:	40023800 	.word	0x40023800
 8003918:	08007f1c 	.word	0x08007f1c
 800391c:	2000012c 	.word	0x2000012c
 8003920:	20000130 	.word	0x20000130

08003924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003928:	b094      	sub	sp, #80	; 0x50
 800392a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	647b      	str	r3, [r7, #68]	; 0x44
 8003930:	2300      	movs	r3, #0
 8003932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003934:	2300      	movs	r3, #0
 8003936:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003938:	2300      	movs	r3, #0
 800393a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800393c:	4b79      	ldr	r3, [pc, #484]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x200>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 030c 	and.w	r3, r3, #12
 8003944:	2b08      	cmp	r3, #8
 8003946:	d00d      	beq.n	8003964 <HAL_RCC_GetSysClockFreq+0x40>
 8003948:	2b08      	cmp	r3, #8
 800394a:	f200 80e1 	bhi.w	8003b10 <HAL_RCC_GetSysClockFreq+0x1ec>
 800394e:	2b00      	cmp	r3, #0
 8003950:	d002      	beq.n	8003958 <HAL_RCC_GetSysClockFreq+0x34>
 8003952:	2b04      	cmp	r3, #4
 8003954:	d003      	beq.n	800395e <HAL_RCC_GetSysClockFreq+0x3a>
 8003956:	e0db      	b.n	8003b10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003958:	4b73      	ldr	r3, [pc, #460]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x204>)
 800395a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800395c:	e0db      	b.n	8003b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800395e:	4b73      	ldr	r3, [pc, #460]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x208>)
 8003960:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003962:	e0d8      	b.n	8003b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003964:	4b6f      	ldr	r3, [pc, #444]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800396c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800396e:	4b6d      	ldr	r3, [pc, #436]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d063      	beq.n	8003a42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800397a:	4b6a      	ldr	r3, [pc, #424]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x200>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	099b      	lsrs	r3, r3, #6
 8003980:	2200      	movs	r2, #0
 8003982:	63bb      	str	r3, [r7, #56]	; 0x38
 8003984:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800398c:	633b      	str	r3, [r7, #48]	; 0x30
 800398e:	2300      	movs	r3, #0
 8003990:	637b      	str	r3, [r7, #52]	; 0x34
 8003992:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003996:	4622      	mov	r2, r4
 8003998:	462b      	mov	r3, r5
 800399a:	f04f 0000 	mov.w	r0, #0
 800399e:	f04f 0100 	mov.w	r1, #0
 80039a2:	0159      	lsls	r1, r3, #5
 80039a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039a8:	0150      	lsls	r0, r2, #5
 80039aa:	4602      	mov	r2, r0
 80039ac:	460b      	mov	r3, r1
 80039ae:	4621      	mov	r1, r4
 80039b0:	1a51      	subs	r1, r2, r1
 80039b2:	6139      	str	r1, [r7, #16]
 80039b4:	4629      	mov	r1, r5
 80039b6:	eb63 0301 	sbc.w	r3, r3, r1
 80039ba:	617b      	str	r3, [r7, #20]
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	f04f 0300 	mov.w	r3, #0
 80039c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039c8:	4659      	mov	r1, fp
 80039ca:	018b      	lsls	r3, r1, #6
 80039cc:	4651      	mov	r1, sl
 80039ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039d2:	4651      	mov	r1, sl
 80039d4:	018a      	lsls	r2, r1, #6
 80039d6:	4651      	mov	r1, sl
 80039d8:	ebb2 0801 	subs.w	r8, r2, r1
 80039dc:	4659      	mov	r1, fp
 80039de:	eb63 0901 	sbc.w	r9, r3, r1
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039f6:	4690      	mov	r8, r2
 80039f8:	4699      	mov	r9, r3
 80039fa:	4623      	mov	r3, r4
 80039fc:	eb18 0303 	adds.w	r3, r8, r3
 8003a00:	60bb      	str	r3, [r7, #8]
 8003a02:	462b      	mov	r3, r5
 8003a04:	eb49 0303 	adc.w	r3, r9, r3
 8003a08:	60fb      	str	r3, [r7, #12]
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	f04f 0300 	mov.w	r3, #0
 8003a12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a16:	4629      	mov	r1, r5
 8003a18:	024b      	lsls	r3, r1, #9
 8003a1a:	4621      	mov	r1, r4
 8003a1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a20:	4621      	mov	r1, r4
 8003a22:	024a      	lsls	r2, r1, #9
 8003a24:	4610      	mov	r0, r2
 8003a26:	4619      	mov	r1, r3
 8003a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a34:	f7fc fbda 	bl	80001ec <__aeabi_uldivmod>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a40:	e058      	b.n	8003af4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a42:	4b38      	ldr	r3, [pc, #224]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	099b      	lsrs	r3, r3, #6
 8003a48:	2200      	movs	r2, #0
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a52:	623b      	str	r3, [r7, #32]
 8003a54:	2300      	movs	r3, #0
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24
 8003a58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a5c:	4642      	mov	r2, r8
 8003a5e:	464b      	mov	r3, r9
 8003a60:	f04f 0000 	mov.w	r0, #0
 8003a64:	f04f 0100 	mov.w	r1, #0
 8003a68:	0159      	lsls	r1, r3, #5
 8003a6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a6e:	0150      	lsls	r0, r2, #5
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	4641      	mov	r1, r8
 8003a76:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a7a:	4649      	mov	r1, r9
 8003a7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a94:	ebb2 040a 	subs.w	r4, r2, sl
 8003a98:	eb63 050b 	sbc.w	r5, r3, fp
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	00eb      	lsls	r3, r5, #3
 8003aa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aaa:	00e2      	lsls	r2, r4, #3
 8003aac:	4614      	mov	r4, r2
 8003aae:	461d      	mov	r5, r3
 8003ab0:	4643      	mov	r3, r8
 8003ab2:	18e3      	adds	r3, r4, r3
 8003ab4:	603b      	str	r3, [r7, #0]
 8003ab6:	464b      	mov	r3, r9
 8003ab8:	eb45 0303 	adc.w	r3, r5, r3
 8003abc:	607b      	str	r3, [r7, #4]
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003aca:	4629      	mov	r1, r5
 8003acc:	028b      	lsls	r3, r1, #10
 8003ace:	4621      	mov	r1, r4
 8003ad0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ad4:	4621      	mov	r1, r4
 8003ad6:	028a      	lsls	r2, r1, #10
 8003ad8:	4610      	mov	r0, r2
 8003ada:	4619      	mov	r1, r3
 8003adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ade:	2200      	movs	r2, #0
 8003ae0:	61bb      	str	r3, [r7, #24]
 8003ae2:	61fa      	str	r2, [r7, #28]
 8003ae4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ae8:	f7fc fb80 	bl	80001ec <__aeabi_uldivmod>
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	4613      	mov	r3, r2
 8003af2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003af4:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	0c1b      	lsrs	r3, r3, #16
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	3301      	adds	r3, #1
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003b04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b0e:	e002      	b.n	8003b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b10:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3750      	adds	r7, #80	; 0x50
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b22:	bf00      	nop
 8003b24:	40023800 	.word	0x40023800
 8003b28:	00f42400 	.word	0x00f42400
 8003b2c:	007a1200 	.word	0x007a1200

08003b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b34:	4b03      	ldr	r3, [pc, #12]	; (8003b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b36:	681b      	ldr	r3, [r3, #0]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	2000012c 	.word	0x2000012c

08003b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b4c:	f7ff fff0 	bl	8003b30 <HAL_RCC_GetHCLKFreq>
 8003b50:	4602      	mov	r2, r0
 8003b52:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	0a9b      	lsrs	r3, r3, #10
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	4903      	ldr	r1, [pc, #12]	; (8003b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b5e:	5ccb      	ldrb	r3, [r1, r3]
 8003b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	08007f2c 	.word	0x08007f2c

08003b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b74:	f7ff ffdc 	bl	8003b30 <HAL_RCC_GetHCLKFreq>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	0b5b      	lsrs	r3, r3, #13
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	4903      	ldr	r1, [pc, #12]	; (8003b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b86:	5ccb      	ldrb	r3, [r1, r3]
 8003b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40023800 	.word	0x40023800
 8003b94:	08007f2c 	.word	0x08007f2c

08003b98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10b      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d105      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d075      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003bcc:	4b91      	ldr	r3, [pc, #580]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bd2:	f7fe f9ab 	bl	8001f2c <HAL_GetTick>
 8003bd6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bd8:	e008      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003bda:	f7fe f9a7 	bl	8001f2c <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d901      	bls.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e189      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bec:	4b8a      	ldr	r3, [pc, #552]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1f0      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d009      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	019a      	lsls	r2, r3, #6
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	071b      	lsls	r3, r3, #28
 8003c10:	4981      	ldr	r1, [pc, #516]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d01f      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c24:	4b7c      	ldr	r3, [pc, #496]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c2a:	0f1b      	lsrs	r3, r3, #28
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	019a      	lsls	r2, r3, #6
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	061b      	lsls	r3, r3, #24
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	071b      	lsls	r3, r3, #28
 8003c44:	4974      	ldr	r1, [pc, #464]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c4c:	4b72      	ldr	r3, [pc, #456]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c52:	f023 021f 	bic.w	r2, r3, #31
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	496e      	ldr	r1, [pc, #440]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00d      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	019a      	lsls	r2, r3, #6
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	061b      	lsls	r3, r3, #24
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	071b      	lsls	r3, r3, #28
 8003c84:	4964      	ldr	r1, [pc, #400]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c8c:	4b61      	ldr	r3, [pc, #388]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003c8e:	2201      	movs	r2, #1
 8003c90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c92:	f7fe f94b 	bl	8001f2c <HAL_GetTick>
 8003c96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c98:	e008      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c9a:	f7fe f947 	bl	8001f2c <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e129      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cac:	4b5a      	ldr	r3, [pc, #360]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0f0      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d105      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d079      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003cd0:	4b52      	ldr	r3, [pc, #328]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cd6:	f7fe f929 	bl	8001f2c <HAL_GetTick>
 8003cda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003cde:	f7fe f925 	bl	8001f2c <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e107      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cf0:	4b49      	ldr	r3, [pc, #292]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cfc:	d0ef      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d020      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d0a:	4b43      	ldr	r3, [pc, #268]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d10:	0f1b      	lsrs	r3, r3, #28
 8003d12:	f003 0307 	and.w	r3, r3, #7
 8003d16:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	019a      	lsls	r2, r3, #6
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	061b      	lsls	r3, r3, #24
 8003d24:	431a      	orrs	r2, r3
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	071b      	lsls	r3, r3, #28
 8003d2a:	493b      	ldr	r1, [pc, #236]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d32:	4b39      	ldr	r3, [pc, #228]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d38:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	3b01      	subs	r3, #1
 8003d42:	021b      	lsls	r3, r3, #8
 8003d44:	4934      	ldr	r1, [pc, #208]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d01e      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d58:	4b2f      	ldr	r3, [pc, #188]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5e:	0e1b      	lsrs	r3, r3, #24
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	019a      	lsls	r2, r3, #6
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	061b      	lsls	r3, r3, #24
 8003d70:	431a      	orrs	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	071b      	lsls	r3, r3, #28
 8003d78:	4927      	ldr	r1, [pc, #156]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d80:	4b25      	ldr	r3, [pc, #148]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	4922      	ldr	r1, [pc, #136]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d96:	4b21      	ldr	r3, [pc, #132]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003d98:	2201      	movs	r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d9c:	f7fe f8c6 	bl	8001f2c <HAL_GetTick>
 8003da0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003da4:	f7fe f8c2 	bl	8001f2c <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e0a4      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003db6:	4b18      	ldr	r3, [pc, #96]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dc2:	d1ef      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0320 	and.w	r3, r3, #32
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 808b 	beq.w	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60fb      	str	r3, [r7, #12]
 8003dd6:	4b10      	ldr	r3, [pc, #64]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	4a0f      	ldr	r2, [pc, #60]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de0:	6413      	str	r3, [r2, #64]	; 0x40
 8003de2:	4b0d      	ldr	r3, [pc, #52]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003dee:	4b0c      	ldr	r3, [pc, #48]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a0b      	ldr	r2, [pc, #44]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003dfa:	f7fe f897 	bl	8001f2c <HAL_GetTick>
 8003dfe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e00:	e010      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e02:	f7fe f893 	bl	8001f2c <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d909      	bls.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e075      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003e14:	42470068 	.word	0x42470068
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	42470070 	.word	0x42470070
 8003e20:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e24:	4b38      	ldr	r3, [pc, #224]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0e8      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e30:	4b36      	ldr	r3, [pc, #216]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e38:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d02f      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d028      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e4e:	4b2f      	ldr	r3, [pc, #188]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e56:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e58:	4b2d      	ldr	r3, [pc, #180]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e5e:	4b2c      	ldr	r3, [pc, #176]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003e64:	4a29      	ldr	r2, [pc, #164]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e6a:	4b28      	ldr	r3, [pc, #160]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d114      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003e76:	f7fe f859 	bl	8001f2c <HAL_GetTick>
 8003e7a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e7c:	e00a      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e7e:	f7fe f855 	bl	8001f2c <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e035      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e94:	4b1d      	ldr	r3, [pc, #116]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0ee      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eac:	d10d      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003eae:	4b17      	ldr	r3, [pc, #92]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec2:	4912      	ldr	r1, [pc, #72]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	608b      	str	r3, [r1, #8]
 8003ec8:	e005      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003eca:	4b10      	ldr	r3, [pc, #64]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	4a0f      	ldr	r2, [pc, #60]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ed0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ed4:	6093      	str	r3, [r2, #8]
 8003ed6:	4b0d      	ldr	r3, [pc, #52]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ed8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ede:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee2:	490a      	ldr	r1, [pc, #40]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0310 	and.w	r3, r3, #16
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d004      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003efa:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003efc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40007000 	.word	0x40007000
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	42470e40 	.word	0x42470e40
 8003f14:	424711e0 	.word	0x424711e0

08003f18 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e066      	b.n	8003ffc <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	7f5b      	ldrb	r3, [r3, #29]
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d105      	bne.n	8003f44 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7fd faea 	bl	8001518 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	22ca      	movs	r2, #202	; 0xca
 8003f50:	625a      	str	r2, [r3, #36]	; 0x24
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2253      	movs	r2, #83	; 0x53
 8003f58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f998 	bl	8004290 <RTC_EnterInitMode>
 8003f60:	4603      	mov	r3, r0
 8003f62:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d12c      	bne.n	8003fc4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6812      	ldr	r2, [r2, #0]
 8003f74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003f78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f7c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6899      	ldr	r1, [r3, #8]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	68d2      	ldr	r2, [r2, #12]
 8003fa4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6919      	ldr	r1, [r3, #16]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	041a      	lsls	r2, r3, #16
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f99f 	bl	80042fe <RTC_ExitInitMode>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d113      	bne.n	8003ff2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fd8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	699a      	ldr	r2, [r3, #24]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	22ff      	movs	r2, #255	; 0xff
 8003ff8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004004:	b590      	push	{r4, r7, lr}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	7f1b      	ldrb	r3, [r3, #28]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_RTC_SetTime+0x1c>
 800401c:	2302      	movs	r3, #2
 800401e:	e087      	b.n	8004130 <HAL_RTC_SetTime+0x12c>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2201      	movs	r2, #1
 8004024:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2202      	movs	r2, #2
 800402a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d126      	bne.n	8004080 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403c:	2b00      	cmp	r3, #0
 800403e:	d102      	bne.n	8004046 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2200      	movs	r2, #0
 8004044:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f000 f97c 	bl	8004348 <RTC_ByteToBcd2>
 8004050:	4603      	mov	r3, r0
 8004052:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	785b      	ldrb	r3, [r3, #1]
 8004058:	4618      	mov	r0, r3
 800405a:	f000 f975 	bl	8004348 <RTC_ByteToBcd2>
 800405e:	4603      	mov	r3, r0
 8004060:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004062:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	789b      	ldrb	r3, [r3, #2]
 8004068:	4618      	mov	r0, r3
 800406a:	f000 f96d 	bl	8004348 <RTC_ByteToBcd2>
 800406e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004070:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	78db      	ldrb	r3, [r3, #3]
 8004078:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800407a:	4313      	orrs	r3, r2
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	e018      	b.n	80040b2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408a:	2b00      	cmp	r3, #0
 800408c:	d102      	bne.n	8004094 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2200      	movs	r2, #0
 8004092:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	785b      	ldrb	r3, [r3, #1]
 800409e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80040a0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80040a6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	78db      	ldrb	r3, [r3, #3]
 80040ac:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80040ae:	4313      	orrs	r3, r2
 80040b0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	22ca      	movs	r2, #202	; 0xca
 80040b8:	625a      	str	r2, [r3, #36]	; 0x24
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2253      	movs	r2, #83	; 0x53
 80040c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 f8e4 	bl	8004290 <RTC_EnterInitMode>
 80040c8:	4603      	mov	r3, r0
 80040ca:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80040cc:	7cfb      	ldrb	r3, [r7, #19]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d120      	bne.n	8004114 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80040dc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80040e0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040f0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6899      	ldr	r1, [r3, #8]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	431a      	orrs	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 f8f7 	bl	80042fe <RTC_ExitInitMode>
 8004110:	4603      	mov	r3, r0
 8004112:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004114:	7cfb      	ldrb	r3, [r7, #19]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d102      	bne.n	8004120 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	22ff      	movs	r2, #255	; 0xff
 8004126:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	771a      	strb	r2, [r3, #28]

  return status;
 800412e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004130:	4618      	mov	r0, r3
 8004132:	371c      	adds	r7, #28
 8004134:	46bd      	mov	sp, r7
 8004136:	bd90      	pop	{r4, r7, pc}

08004138 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004138:	b590      	push	{r4, r7, lr}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	7f1b      	ldrb	r3, [r3, #28]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_RTC_SetDate+0x1c>
 8004150:	2302      	movs	r3, #2
 8004152:	e071      	b.n	8004238 <HAL_RTC_SetDate+0x100>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2202      	movs	r2, #2
 800415e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10e      	bne.n	8004184 <HAL_RTC_SetDate+0x4c>
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	785b      	ldrb	r3, [r3, #1]
 800416a:	f003 0310 	and.w	r3, r3, #16
 800416e:	2b00      	cmp	r3, #0
 8004170:	d008      	beq.n	8004184 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	785b      	ldrb	r3, [r3, #1]
 8004176:	f023 0310 	bic.w	r3, r3, #16
 800417a:	b2db      	uxtb	r3, r3
 800417c:	330a      	adds	r3, #10
 800417e:	b2da      	uxtb	r2, r3
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d11c      	bne.n	80041c4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	78db      	ldrb	r3, [r3, #3]
 800418e:	4618      	mov	r0, r3
 8004190:	f000 f8da 	bl	8004348 <RTC_ByteToBcd2>
 8004194:	4603      	mov	r3, r0
 8004196:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	785b      	ldrb	r3, [r3, #1]
 800419c:	4618      	mov	r0, r3
 800419e:	f000 f8d3 	bl	8004348 <RTC_ByteToBcd2>
 80041a2:	4603      	mov	r3, r0
 80041a4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80041a6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	789b      	ldrb	r3, [r3, #2]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 f8cb 	bl	8004348 <RTC_ByteToBcd2>
 80041b2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80041b4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	e00e      	b.n	80041e2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	78db      	ldrb	r3, [r3, #3]
 80041c8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	785b      	ldrb	r3, [r3, #1]
 80041ce:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80041d0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80041d6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80041de:	4313      	orrs	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	22ca      	movs	r2, #202	; 0xca
 80041e8:	625a      	str	r2, [r3, #36]	; 0x24
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2253      	movs	r2, #83	; 0x53
 80041f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 f84c 	bl	8004290 <RTC_EnterInitMode>
 80041f8:	4603      	mov	r3, r0
 80041fa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80041fc:	7cfb      	ldrb	r3, [r7, #19]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10c      	bne.n	800421c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800420c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004210:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 f873 	bl	80042fe <RTC_ExitInitMode>
 8004218:	4603      	mov	r3, r0
 800421a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800421c:	7cfb      	ldrb	r3, [r7, #19]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d102      	bne.n	8004228 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2201      	movs	r2, #1
 8004226:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	22ff      	movs	r2, #255	; 0xff
 800422e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	771a      	strb	r2, [r3, #28]

  return status;
 8004236:	7cfb      	ldrb	r3, [r7, #19]
}
 8004238:	4618      	mov	r0, r3
 800423a:	371c      	adds	r7, #28
 800423c:	46bd      	mov	sp, r7
 800423e:	bd90      	pop	{r4, r7, pc}

08004240 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800425a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800425c:	f7fd fe66 	bl	8001f2c <HAL_GetTick>
 8004260:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004262:	e009      	b.n	8004278 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004264:	f7fd fe62 	bl	8001f2c <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004272:	d901      	bls.n	8004278 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e007      	b.n	8004288 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0ee      	beq.n	8004264 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800429c:	2300      	movs	r3, #0
 800429e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d122      	bne.n	80042f4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68da      	ldr	r2, [r3, #12]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042bc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80042be:	f7fd fe35 	bl	8001f2c <HAL_GetTick>
 80042c2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80042c4:	e00c      	b.n	80042e0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80042c6:	f7fd fe31 	bl	8001f2c <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042d4:	d904      	bls.n	80042e0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2204      	movs	r2, #4
 80042da:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d102      	bne.n	80042f4 <RTC_EnterInitMode+0x64>
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d1e8      	bne.n	80042c6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b084      	sub	sp, #16
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68da      	ldr	r2, [r3, #12]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004318:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10a      	bne.n	800433e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7ff ff89 	bl	8004240 <HAL_RTC_WaitForSynchro>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d004      	beq.n	800433e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2204      	movs	r2, #4
 8004338:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800433e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	4603      	mov	r3, r0
 8004350:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004352:	2300      	movs	r3, #0
 8004354:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8004356:	e005      	b.n	8004364 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004358:	7bfb      	ldrb	r3, [r7, #15]
 800435a:	3301      	adds	r3, #1
 800435c:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	3b0a      	subs	r3, #10
 8004362:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004364:	79fb      	ldrb	r3, [r7, #7]
 8004366:	2b09      	cmp	r3, #9
 8004368:	d8f6      	bhi.n	8004358 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800436a:	7bfb      	ldrb	r3, [r7, #15]
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	b2da      	uxtb	r2, r3
 8004370:	79fb      	ldrb	r3, [r7, #7]
 8004372:	4313      	orrs	r3, r2
 8004374:	b2db      	uxtb	r3, r3
}
 8004376:	4618      	mov	r0, r3
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b082      	sub	sp, #8
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e041      	b.n	8004418 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d106      	bne.n	80043ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f7fd f955 	bl	8001658 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2202      	movs	r2, #2
 80043b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	3304      	adds	r3, #4
 80043be:	4619      	mov	r1, r3
 80043c0:	4610      	mov	r0, r2
 80043c2:	f000 ffd3 	bl	800536c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b01      	cmp	r3, #1
 8004432:	d001      	beq.n	8004438 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e04e      	b.n	80044d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f042 0201 	orr.w	r2, r2, #1
 800444e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a23      	ldr	r2, [pc, #140]	; (80044e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d022      	beq.n	80044a0 <HAL_TIM_Base_Start_IT+0x80>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004462:	d01d      	beq.n	80044a0 <HAL_TIM_Base_Start_IT+0x80>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a1f      	ldr	r2, [pc, #124]	; (80044e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d018      	beq.n	80044a0 <HAL_TIM_Base_Start_IT+0x80>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a1e      	ldr	r2, [pc, #120]	; (80044ec <HAL_TIM_Base_Start_IT+0xcc>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d013      	beq.n	80044a0 <HAL_TIM_Base_Start_IT+0x80>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a1c      	ldr	r2, [pc, #112]	; (80044f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d00e      	beq.n	80044a0 <HAL_TIM_Base_Start_IT+0x80>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a1b      	ldr	r2, [pc, #108]	; (80044f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d009      	beq.n	80044a0 <HAL_TIM_Base_Start_IT+0x80>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a19      	ldr	r2, [pc, #100]	; (80044f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d004      	beq.n	80044a0 <HAL_TIM_Base_Start_IT+0x80>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a18      	ldr	r2, [pc, #96]	; (80044fc <HAL_TIM_Base_Start_IT+0xdc>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d111      	bne.n	80044c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2b06      	cmp	r3, #6
 80044b0:	d010      	beq.n	80044d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f042 0201 	orr.w	r2, r2, #1
 80044c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c2:	e007      	b.n	80044d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0201 	orr.w	r2, r2, #1
 80044d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40010000 	.word	0x40010000
 80044e8:	40000400 	.word	0x40000400
 80044ec:	40000800 	.word	0x40000800
 80044f0:	40000c00 	.word	0x40000c00
 80044f4:	40010400 	.word	0x40010400
 80044f8:	40014000 	.word	0x40014000
 80044fc:	40001800 	.word	0x40001800

08004500 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e041      	b.n	8004596 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7fd f820 	bl	800156c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	3304      	adds	r3, #4
 800453c:	4619      	mov	r1, r3
 800453e:	4610      	mov	r0, r2
 8004540:	f000 ff14 	bl	800536c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
	...

080045a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d109      	bne.n	80045c4 <HAL_TIM_PWM_Start+0x24>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	bf14      	ite	ne
 80045bc:	2301      	movne	r3, #1
 80045be:	2300      	moveq	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	e022      	b.n	800460a <HAL_TIM_PWM_Start+0x6a>
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d109      	bne.n	80045de <HAL_TIM_PWM_Start+0x3e>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	bf14      	ite	ne
 80045d6:	2301      	movne	r3, #1
 80045d8:	2300      	moveq	r3, #0
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	e015      	b.n	800460a <HAL_TIM_PWM_Start+0x6a>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	d109      	bne.n	80045f8 <HAL_TIM_PWM_Start+0x58>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	bf14      	ite	ne
 80045f0:	2301      	movne	r3, #1
 80045f2:	2300      	moveq	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	e008      	b.n	800460a <HAL_TIM_PWM_Start+0x6a>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b01      	cmp	r3, #1
 8004602:	bf14      	ite	ne
 8004604:	2301      	movne	r3, #1
 8004606:	2300      	moveq	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e07c      	b.n	800470c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d104      	bne.n	8004622 <HAL_TIM_PWM_Start+0x82>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004620:	e013      	b.n	800464a <HAL_TIM_PWM_Start+0xaa>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b04      	cmp	r3, #4
 8004626:	d104      	bne.n	8004632 <HAL_TIM_PWM_Start+0x92>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004630:	e00b      	b.n	800464a <HAL_TIM_PWM_Start+0xaa>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b08      	cmp	r3, #8
 8004636:	d104      	bne.n	8004642 <HAL_TIM_PWM_Start+0xa2>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2202      	movs	r2, #2
 800463c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004640:	e003      	b.n	800464a <HAL_TIM_PWM_Start+0xaa>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2202      	movs	r2, #2
 8004646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2201      	movs	r2, #1
 8004650:	6839      	ldr	r1, [r7, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f001 fa9e 	bl	8005b94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a2d      	ldr	r2, [pc, #180]	; (8004714 <HAL_TIM_PWM_Start+0x174>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d004      	beq.n	800466c <HAL_TIM_PWM_Start+0xcc>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a2c      	ldr	r2, [pc, #176]	; (8004718 <HAL_TIM_PWM_Start+0x178>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d101      	bne.n	8004670 <HAL_TIM_PWM_Start+0xd0>
 800466c:	2301      	movs	r3, #1
 800466e:	e000      	b.n	8004672 <HAL_TIM_PWM_Start+0xd2>
 8004670:	2300      	movs	r3, #0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d007      	beq.n	8004686 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004684:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a22      	ldr	r2, [pc, #136]	; (8004714 <HAL_TIM_PWM_Start+0x174>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d022      	beq.n	80046d6 <HAL_TIM_PWM_Start+0x136>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004698:	d01d      	beq.n	80046d6 <HAL_TIM_PWM_Start+0x136>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a1f      	ldr	r2, [pc, #124]	; (800471c <HAL_TIM_PWM_Start+0x17c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d018      	beq.n	80046d6 <HAL_TIM_PWM_Start+0x136>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a1d      	ldr	r2, [pc, #116]	; (8004720 <HAL_TIM_PWM_Start+0x180>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d013      	beq.n	80046d6 <HAL_TIM_PWM_Start+0x136>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a1c      	ldr	r2, [pc, #112]	; (8004724 <HAL_TIM_PWM_Start+0x184>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d00e      	beq.n	80046d6 <HAL_TIM_PWM_Start+0x136>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a16      	ldr	r2, [pc, #88]	; (8004718 <HAL_TIM_PWM_Start+0x178>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d009      	beq.n	80046d6 <HAL_TIM_PWM_Start+0x136>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a18      	ldr	r2, [pc, #96]	; (8004728 <HAL_TIM_PWM_Start+0x188>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d004      	beq.n	80046d6 <HAL_TIM_PWM_Start+0x136>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a16      	ldr	r2, [pc, #88]	; (800472c <HAL_TIM_PWM_Start+0x18c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d111      	bne.n	80046fa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2b06      	cmp	r3, #6
 80046e6:	d010      	beq.n	800470a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0201 	orr.w	r2, r2, #1
 80046f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f8:	e007      	b.n	800470a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f042 0201 	orr.w	r2, r2, #1
 8004708:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40010000 	.word	0x40010000
 8004718:	40010400 	.word	0x40010400
 800471c:	40000400 	.word	0x40000400
 8004720:	40000800 	.word	0x40000800
 8004724:	40000c00 	.word	0x40000c00
 8004728:	40014000 	.word	0x40014000
 800472c:	40001800 	.word	0x40001800

08004730 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d109      	bne.n	8004758 <HAL_TIM_PWM_Start_IT+0x28>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b01      	cmp	r3, #1
 800474e:	bf14      	ite	ne
 8004750:	2301      	movne	r3, #1
 8004752:	2300      	moveq	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	e022      	b.n	800479e <HAL_TIM_PWM_Start_IT+0x6e>
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	2b04      	cmp	r3, #4
 800475c:	d109      	bne.n	8004772 <HAL_TIM_PWM_Start_IT+0x42>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b01      	cmp	r3, #1
 8004768:	bf14      	ite	ne
 800476a:	2301      	movne	r3, #1
 800476c:	2300      	moveq	r3, #0
 800476e:	b2db      	uxtb	r3, r3
 8004770:	e015      	b.n	800479e <HAL_TIM_PWM_Start_IT+0x6e>
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b08      	cmp	r3, #8
 8004776:	d109      	bne.n	800478c <HAL_TIM_PWM_Start_IT+0x5c>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b01      	cmp	r3, #1
 8004782:	bf14      	ite	ne
 8004784:	2301      	movne	r3, #1
 8004786:	2300      	moveq	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	e008      	b.n	800479e <HAL_TIM_PWM_Start_IT+0x6e>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b01      	cmp	r3, #1
 8004796:	bf14      	ite	ne
 8004798:	2301      	movne	r3, #1
 800479a:	2300      	moveq	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e0c7      	b.n	8004936 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d104      	bne.n	80047b6 <HAL_TIM_PWM_Start_IT+0x86>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2202      	movs	r2, #2
 80047b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047b4:	e013      	b.n	80047de <HAL_TIM_PWM_Start_IT+0xae>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b04      	cmp	r3, #4
 80047ba:	d104      	bne.n	80047c6 <HAL_TIM_PWM_Start_IT+0x96>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047c4:	e00b      	b.n	80047de <HAL_TIM_PWM_Start_IT+0xae>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d104      	bne.n	80047d6 <HAL_TIM_PWM_Start_IT+0xa6>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047d4:	e003      	b.n	80047de <HAL_TIM_PWM_Start_IT+0xae>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2202      	movs	r2, #2
 80047da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b0c      	cmp	r3, #12
 80047e2:	d841      	bhi.n	8004868 <HAL_TIM_PWM_Start_IT+0x138>
 80047e4:	a201      	add	r2, pc, #4	; (adr r2, 80047ec <HAL_TIM_PWM_Start_IT+0xbc>)
 80047e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ea:	bf00      	nop
 80047ec:	08004821 	.word	0x08004821
 80047f0:	08004869 	.word	0x08004869
 80047f4:	08004869 	.word	0x08004869
 80047f8:	08004869 	.word	0x08004869
 80047fc:	08004833 	.word	0x08004833
 8004800:	08004869 	.word	0x08004869
 8004804:	08004869 	.word	0x08004869
 8004808:	08004869 	.word	0x08004869
 800480c:	08004845 	.word	0x08004845
 8004810:	08004869 	.word	0x08004869
 8004814:	08004869 	.word	0x08004869
 8004818:	08004869 	.word	0x08004869
 800481c:	08004857 	.word	0x08004857
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68da      	ldr	r2, [r3, #12]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0202 	orr.w	r2, r2, #2
 800482e:	60da      	str	r2, [r3, #12]
      break;
 8004830:	e01d      	b.n	800486e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68da      	ldr	r2, [r3, #12]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f042 0204 	orr.w	r2, r2, #4
 8004840:	60da      	str	r2, [r3, #12]
      break;
 8004842:	e014      	b.n	800486e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f042 0208 	orr.w	r2, r2, #8
 8004852:	60da      	str	r2, [r3, #12]
      break;
 8004854:	e00b      	b.n	800486e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 0210 	orr.w	r2, r2, #16
 8004864:	60da      	str	r2, [r3, #12]
      break;
 8004866:	e002      	b.n	800486e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	73fb      	strb	r3, [r7, #15]
      break;
 800486c:	bf00      	nop
  }

  if (status == HAL_OK)
 800486e:	7bfb      	ldrb	r3, [r7, #15]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d15f      	bne.n	8004934 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2201      	movs	r2, #1
 800487a:	6839      	ldr	r1, [r7, #0]
 800487c:	4618      	mov	r0, r3
 800487e:	f001 f989 	bl	8005b94 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a2e      	ldr	r2, [pc, #184]	; (8004940 <HAL_TIM_PWM_Start_IT+0x210>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d004      	beq.n	8004896 <HAL_TIM_PWM_Start_IT+0x166>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a2c      	ldr	r2, [pc, #176]	; (8004944 <HAL_TIM_PWM_Start_IT+0x214>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d101      	bne.n	800489a <HAL_TIM_PWM_Start_IT+0x16a>
 8004896:	2301      	movs	r3, #1
 8004898:	e000      	b.n	800489c <HAL_TIM_PWM_Start_IT+0x16c>
 800489a:	2300      	movs	r3, #0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d007      	beq.n	80048b0 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048ae:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a22      	ldr	r2, [pc, #136]	; (8004940 <HAL_TIM_PWM_Start_IT+0x210>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d022      	beq.n	8004900 <HAL_TIM_PWM_Start_IT+0x1d0>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c2:	d01d      	beq.n	8004900 <HAL_TIM_PWM_Start_IT+0x1d0>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a1f      	ldr	r2, [pc, #124]	; (8004948 <HAL_TIM_PWM_Start_IT+0x218>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d018      	beq.n	8004900 <HAL_TIM_PWM_Start_IT+0x1d0>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a1e      	ldr	r2, [pc, #120]	; (800494c <HAL_TIM_PWM_Start_IT+0x21c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d013      	beq.n	8004900 <HAL_TIM_PWM_Start_IT+0x1d0>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a1c      	ldr	r2, [pc, #112]	; (8004950 <HAL_TIM_PWM_Start_IT+0x220>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d00e      	beq.n	8004900 <HAL_TIM_PWM_Start_IT+0x1d0>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a17      	ldr	r2, [pc, #92]	; (8004944 <HAL_TIM_PWM_Start_IT+0x214>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d009      	beq.n	8004900 <HAL_TIM_PWM_Start_IT+0x1d0>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a18      	ldr	r2, [pc, #96]	; (8004954 <HAL_TIM_PWM_Start_IT+0x224>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d004      	beq.n	8004900 <HAL_TIM_PWM_Start_IT+0x1d0>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a17      	ldr	r2, [pc, #92]	; (8004958 <HAL_TIM_PWM_Start_IT+0x228>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d111      	bne.n	8004924 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2b06      	cmp	r3, #6
 8004910:	d010      	beq.n	8004934 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f042 0201 	orr.w	r2, r2, #1
 8004920:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004922:	e007      	b.n	8004934 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0201 	orr.w	r2, r2, #1
 8004932:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004934:	7bfb      	ldrb	r3, [r7, #15]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	40010000 	.word	0x40010000
 8004944:	40010400 	.word	0x40010400
 8004948:	40000400 	.word	0x40000400
 800494c:	40000800 	.word	0x40000800
 8004950:	40000c00 	.word	0x40000c00
 8004954:	40014000 	.word	0x40014000
 8004958:	40001800 	.word	0x40001800

0800495c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e041      	b.n	80049f2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d106      	bne.n	8004988 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7fc fe18 	bl	80015b8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3304      	adds	r3, #4
 8004998:	4619      	mov	r1, r3
 800499a:	4610      	mov	r0, r2
 800499c:	f000 fce6 	bl	800536c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
	...

080049fc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d104      	bne.n	8004a1a <HAL_TIM_IC_Start_IT+0x1e>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	e013      	b.n	8004a42 <HAL_TIM_IC_Start_IT+0x46>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d104      	bne.n	8004a2a <HAL_TIM_IC_Start_IT+0x2e>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	e00b      	b.n	8004a42 <HAL_TIM_IC_Start_IT+0x46>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d104      	bne.n	8004a3a <HAL_TIM_IC_Start_IT+0x3e>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	e003      	b.n	8004a42 <HAL_TIM_IC_Start_IT+0x46>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d104      	bne.n	8004a54 <HAL_TIM_IC_Start_IT+0x58>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	e013      	b.n	8004a7c <HAL_TIM_IC_Start_IT+0x80>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d104      	bne.n	8004a64 <HAL_TIM_IC_Start_IT+0x68>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	e00b      	b.n	8004a7c <HAL_TIM_IC_Start_IT+0x80>
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	d104      	bne.n	8004a74 <HAL_TIM_IC_Start_IT+0x78>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	e003      	b.n	8004a7c <HAL_TIM_IC_Start_IT+0x80>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a7e:	7bbb      	ldrb	r3, [r7, #14]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d102      	bne.n	8004a8a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a84:	7b7b      	ldrb	r3, [r7, #13]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d001      	beq.n	8004a8e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e0cc      	b.n	8004c28 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d104      	bne.n	8004a9e <HAL_TIM_IC_Start_IT+0xa2>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a9c:	e013      	b.n	8004ac6 <HAL_TIM_IC_Start_IT+0xca>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d104      	bne.n	8004aae <HAL_TIM_IC_Start_IT+0xb2>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aac:	e00b      	b.n	8004ac6 <HAL_TIM_IC_Start_IT+0xca>
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d104      	bne.n	8004abe <HAL_TIM_IC_Start_IT+0xc2>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004abc:	e003      	b.n	8004ac6 <HAL_TIM_IC_Start_IT+0xca>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d104      	bne.n	8004ad6 <HAL_TIM_IC_Start_IT+0xda>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ad4:	e013      	b.n	8004afe <HAL_TIM_IC_Start_IT+0x102>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b04      	cmp	r3, #4
 8004ada:	d104      	bne.n	8004ae6 <HAL_TIM_IC_Start_IT+0xea>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ae4:	e00b      	b.n	8004afe <HAL_TIM_IC_Start_IT+0x102>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d104      	bne.n	8004af6 <HAL_TIM_IC_Start_IT+0xfa>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004af4:	e003      	b.n	8004afe <HAL_TIM_IC_Start_IT+0x102>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2202      	movs	r2, #2
 8004afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b0c      	cmp	r3, #12
 8004b02:	d841      	bhi.n	8004b88 <HAL_TIM_IC_Start_IT+0x18c>
 8004b04:	a201      	add	r2, pc, #4	; (adr r2, 8004b0c <HAL_TIM_IC_Start_IT+0x110>)
 8004b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0a:	bf00      	nop
 8004b0c:	08004b41 	.word	0x08004b41
 8004b10:	08004b89 	.word	0x08004b89
 8004b14:	08004b89 	.word	0x08004b89
 8004b18:	08004b89 	.word	0x08004b89
 8004b1c:	08004b53 	.word	0x08004b53
 8004b20:	08004b89 	.word	0x08004b89
 8004b24:	08004b89 	.word	0x08004b89
 8004b28:	08004b89 	.word	0x08004b89
 8004b2c:	08004b65 	.word	0x08004b65
 8004b30:	08004b89 	.word	0x08004b89
 8004b34:	08004b89 	.word	0x08004b89
 8004b38:	08004b89 	.word	0x08004b89
 8004b3c:	08004b77 	.word	0x08004b77
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 0202 	orr.w	r2, r2, #2
 8004b4e:	60da      	str	r2, [r3, #12]
      break;
 8004b50:	e01d      	b.n	8004b8e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68da      	ldr	r2, [r3, #12]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f042 0204 	orr.w	r2, r2, #4
 8004b60:	60da      	str	r2, [r3, #12]
      break;
 8004b62:	e014      	b.n	8004b8e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0208 	orr.w	r2, r2, #8
 8004b72:	60da      	str	r2, [r3, #12]
      break;
 8004b74:	e00b      	b.n	8004b8e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68da      	ldr	r2, [r3, #12]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f042 0210 	orr.w	r2, r2, #16
 8004b84:	60da      	str	r2, [r3, #12]
      break;
 8004b86:	e002      	b.n	8004b8e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b8c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004b8e:	7bfb      	ldrb	r3, [r7, #15]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d148      	bne.n	8004c26 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	6839      	ldr	r1, [r7, #0]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fff9 	bl	8005b94 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a22      	ldr	r2, [pc, #136]	; (8004c30 <HAL_TIM_IC_Start_IT+0x234>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d022      	beq.n	8004bf2 <HAL_TIM_IC_Start_IT+0x1f6>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb4:	d01d      	beq.n	8004bf2 <HAL_TIM_IC_Start_IT+0x1f6>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a1e      	ldr	r2, [pc, #120]	; (8004c34 <HAL_TIM_IC_Start_IT+0x238>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d018      	beq.n	8004bf2 <HAL_TIM_IC_Start_IT+0x1f6>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a1c      	ldr	r2, [pc, #112]	; (8004c38 <HAL_TIM_IC_Start_IT+0x23c>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d013      	beq.n	8004bf2 <HAL_TIM_IC_Start_IT+0x1f6>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a1b      	ldr	r2, [pc, #108]	; (8004c3c <HAL_TIM_IC_Start_IT+0x240>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d00e      	beq.n	8004bf2 <HAL_TIM_IC_Start_IT+0x1f6>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a19      	ldr	r2, [pc, #100]	; (8004c40 <HAL_TIM_IC_Start_IT+0x244>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d009      	beq.n	8004bf2 <HAL_TIM_IC_Start_IT+0x1f6>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a18      	ldr	r2, [pc, #96]	; (8004c44 <HAL_TIM_IC_Start_IT+0x248>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d004      	beq.n	8004bf2 <HAL_TIM_IC_Start_IT+0x1f6>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a16      	ldr	r2, [pc, #88]	; (8004c48 <HAL_TIM_IC_Start_IT+0x24c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d111      	bne.n	8004c16 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2b06      	cmp	r3, #6
 8004c02:	d010      	beq.n	8004c26 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f042 0201 	orr.w	r2, r2, #1
 8004c12:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c14:	e007      	b.n	8004c26 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f042 0201 	orr.w	r2, r2, #1
 8004c24:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40010000 	.word	0x40010000
 8004c34:	40000400 	.word	0x40000400
 8004c38:	40000800 	.word	0x40000800
 8004c3c:	40000c00 	.word	0x40000c00
 8004c40:	40010400 	.word	0x40010400
 8004c44:	40014000 	.word	0x40014000
 8004c48:	40001800 	.word	0x40001800

08004c4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d122      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d11b      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f06f 0202 	mvn.w	r2, #2
 8004c78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7fd f886 	bl	8001da0 <HAL_TIM_IC_CaptureCallback>
 8004c94:	e005      	b.n	8004ca2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fb4a 	bl	8005330 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 fb51 	bl	8005344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	f003 0304 	and.w	r3, r3, #4
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d122      	bne.n	8004cfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	d11b      	bne.n	8004cfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f06f 0204 	mvn.w	r2, #4
 8004ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2202      	movs	r2, #2
 8004cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7fd f85c 	bl	8001da0 <HAL_TIM_IC_CaptureCallback>
 8004ce8:	e005      	b.n	8004cf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 fb20 	bl	8005330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 fb27 	bl	8005344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	2b08      	cmp	r3, #8
 8004d08:	d122      	bne.n	8004d50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f003 0308 	and.w	r3, r3, #8
 8004d14:	2b08      	cmp	r3, #8
 8004d16:	d11b      	bne.n	8004d50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f06f 0208 	mvn.w	r2, #8
 8004d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2204      	movs	r2, #4
 8004d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	f003 0303 	and.w	r3, r3, #3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7fd f832 	bl	8001da0 <HAL_TIM_IC_CaptureCallback>
 8004d3c:	e005      	b.n	8004d4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 faf6 	bl	8005330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 fafd 	bl	8005344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f003 0310 	and.w	r3, r3, #16
 8004d5a:	2b10      	cmp	r3, #16
 8004d5c:	d122      	bne.n	8004da4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f003 0310 	and.w	r3, r3, #16
 8004d68:	2b10      	cmp	r3, #16
 8004d6a:	d11b      	bne.n	8004da4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f06f 0210 	mvn.w	r2, #16
 8004d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2208      	movs	r2, #8
 8004d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7fd f808 	bl	8001da0 <HAL_TIM_IC_CaptureCallback>
 8004d90:	e005      	b.n	8004d9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 facc 	bl	8005330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fad3 	bl	8005344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d10e      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d107      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f06f 0201 	mvn.w	r2, #1
 8004dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7fb fd06 	bl	80007dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dda:	2b80      	cmp	r3, #128	; 0x80
 8004ddc:	d10e      	bne.n	8004dfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de8:	2b80      	cmp	r3, #128	; 0x80
 8004dea:	d107      	bne.n	8004dfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 ff78 	bl	8005cec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e06:	2b40      	cmp	r3, #64	; 0x40
 8004e08:	d10e      	bne.n	8004e28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e14:	2b40      	cmp	r3, #64	; 0x40
 8004e16:	d107      	bne.n	8004e28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fa98 	bl	8005358 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	f003 0320 	and.w	r3, r3, #32
 8004e32:	2b20      	cmp	r3, #32
 8004e34:	d10e      	bne.n	8004e54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f003 0320 	and.w	r3, r3, #32
 8004e40:	2b20      	cmp	r3, #32
 8004e42:	d107      	bne.n	8004e54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f06f 0220 	mvn.w	r2, #32
 8004e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 ff42 	bl	8005cd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e54:	bf00      	nop
 8004e56:	3708      	adds	r7, #8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d101      	bne.n	8004e7a <HAL_TIM_IC_ConfigChannel+0x1e>
 8004e76:	2302      	movs	r3, #2
 8004e78:	e088      	b.n	8004f8c <HAL_TIM_IC_ConfigChannel+0x130>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d11b      	bne.n	8004ec0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6818      	ldr	r0, [r3, #0]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	6819      	ldr	r1, [r3, #0]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f000 fcb8 	bl	800580c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699a      	ldr	r2, [r3, #24]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 020c 	bic.w	r2, r2, #12
 8004eaa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6999      	ldr	r1, [r3, #24]
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	689a      	ldr	r2, [r3, #8]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	619a      	str	r2, [r3, #24]
 8004ebe:	e060      	b.n	8004f82 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	d11c      	bne.n	8004f00 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6818      	ldr	r0, [r3, #0]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	6819      	ldr	r1, [r3, #0]
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	f000 fd3c 	bl	8005952 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	699a      	ldr	r2, [r3, #24]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ee8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6999      	ldr	r1, [r3, #24]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	021a      	lsls	r2, r3, #8
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	619a      	str	r2, [r3, #24]
 8004efe:	e040      	b.n	8004f82 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b08      	cmp	r3, #8
 8004f04:	d11b      	bne.n	8004f3e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6818      	ldr	r0, [r3, #0]
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	6819      	ldr	r1, [r3, #0]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f000 fd89 	bl	8005a2c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	69da      	ldr	r2, [r3, #28]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 020c 	bic.w	r2, r2, #12
 8004f28:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	69d9      	ldr	r1, [r3, #28]
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	61da      	str	r2, [r3, #28]
 8004f3c:	e021      	b.n	8004f82 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b0c      	cmp	r3, #12
 8004f42:	d11c      	bne.n	8004f7e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6818      	ldr	r0, [r3, #0]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	6819      	ldr	r1, [r3, #0]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f000 fda6 	bl	8005aa4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	69da      	ldr	r2, [r3, #28]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004f66:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	69d9      	ldr	r1, [r3, #28]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	021a      	lsls	r2, r3, #8
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	61da      	str	r2, [r3, #28]
 8004f7c:	e001      	b.n	8004f82 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d101      	bne.n	8004fb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004fae:	2302      	movs	r3, #2
 8004fb0:	e0ae      	b.n	8005110 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2b0c      	cmp	r3, #12
 8004fbe:	f200 809f 	bhi.w	8005100 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004fc2:	a201      	add	r2, pc, #4	; (adr r2, 8004fc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc8:	08004ffd 	.word	0x08004ffd
 8004fcc:	08005101 	.word	0x08005101
 8004fd0:	08005101 	.word	0x08005101
 8004fd4:	08005101 	.word	0x08005101
 8004fd8:	0800503d 	.word	0x0800503d
 8004fdc:	08005101 	.word	0x08005101
 8004fe0:	08005101 	.word	0x08005101
 8004fe4:	08005101 	.word	0x08005101
 8004fe8:	0800507f 	.word	0x0800507f
 8004fec:	08005101 	.word	0x08005101
 8004ff0:	08005101 	.word	0x08005101
 8004ff4:	08005101 	.word	0x08005101
 8004ff8:	080050bf 	.word	0x080050bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68b9      	ldr	r1, [r7, #8]
 8005002:	4618      	mov	r0, r3
 8005004:	f000 fa52 	bl	80054ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699a      	ldr	r2, [r3, #24]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f042 0208 	orr.w	r2, r2, #8
 8005016:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	699a      	ldr	r2, [r3, #24]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0204 	bic.w	r2, r2, #4
 8005026:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6999      	ldr	r1, [r3, #24]
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	691a      	ldr	r2, [r3, #16]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	619a      	str	r2, [r3, #24]
      break;
 800503a:	e064      	b.n	8005106 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68b9      	ldr	r1, [r7, #8]
 8005042:	4618      	mov	r0, r3
 8005044:	f000 faa2 	bl	800558c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699a      	ldr	r2, [r3, #24]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005056:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	699a      	ldr	r2, [r3, #24]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005066:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6999      	ldr	r1, [r3, #24]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	021a      	lsls	r2, r3, #8
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	619a      	str	r2, [r3, #24]
      break;
 800507c:	e043      	b.n	8005106 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68b9      	ldr	r1, [r7, #8]
 8005084:	4618      	mov	r0, r3
 8005086:	f000 faf7 	bl	8005678 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	69da      	ldr	r2, [r3, #28]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f042 0208 	orr.w	r2, r2, #8
 8005098:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	69da      	ldr	r2, [r3, #28]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0204 	bic.w	r2, r2, #4
 80050a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	69d9      	ldr	r1, [r3, #28]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	691a      	ldr	r2, [r3, #16]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	61da      	str	r2, [r3, #28]
      break;
 80050bc:	e023      	b.n	8005106 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68b9      	ldr	r1, [r7, #8]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fb4b 	bl	8005760 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69da      	ldr	r2, [r3, #28]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69da      	ldr	r2, [r3, #28]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	69d9      	ldr	r1, [r3, #28]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	021a      	lsls	r2, r3, #8
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	61da      	str	r2, [r3, #28]
      break;
 80050fe:	e002      	b.n	8005106 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	75fb      	strb	r3, [r7, #23]
      break;
 8005104:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800510e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3718      	adds	r7, #24
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005122:	2300      	movs	r3, #0
 8005124:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800512c:	2b01      	cmp	r3, #1
 800512e:	d101      	bne.n	8005134 <HAL_TIM_ConfigClockSource+0x1c>
 8005130:	2302      	movs	r3, #2
 8005132:	e0b4      	b.n	800529e <HAL_TIM_ConfigClockSource+0x186>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005152:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800515a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800516c:	d03e      	beq.n	80051ec <HAL_TIM_ConfigClockSource+0xd4>
 800516e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005172:	f200 8087 	bhi.w	8005284 <HAL_TIM_ConfigClockSource+0x16c>
 8005176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800517a:	f000 8086 	beq.w	800528a <HAL_TIM_ConfigClockSource+0x172>
 800517e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005182:	d87f      	bhi.n	8005284 <HAL_TIM_ConfigClockSource+0x16c>
 8005184:	2b70      	cmp	r3, #112	; 0x70
 8005186:	d01a      	beq.n	80051be <HAL_TIM_ConfigClockSource+0xa6>
 8005188:	2b70      	cmp	r3, #112	; 0x70
 800518a:	d87b      	bhi.n	8005284 <HAL_TIM_ConfigClockSource+0x16c>
 800518c:	2b60      	cmp	r3, #96	; 0x60
 800518e:	d050      	beq.n	8005232 <HAL_TIM_ConfigClockSource+0x11a>
 8005190:	2b60      	cmp	r3, #96	; 0x60
 8005192:	d877      	bhi.n	8005284 <HAL_TIM_ConfigClockSource+0x16c>
 8005194:	2b50      	cmp	r3, #80	; 0x50
 8005196:	d03c      	beq.n	8005212 <HAL_TIM_ConfigClockSource+0xfa>
 8005198:	2b50      	cmp	r3, #80	; 0x50
 800519a:	d873      	bhi.n	8005284 <HAL_TIM_ConfigClockSource+0x16c>
 800519c:	2b40      	cmp	r3, #64	; 0x40
 800519e:	d058      	beq.n	8005252 <HAL_TIM_ConfigClockSource+0x13a>
 80051a0:	2b40      	cmp	r3, #64	; 0x40
 80051a2:	d86f      	bhi.n	8005284 <HAL_TIM_ConfigClockSource+0x16c>
 80051a4:	2b30      	cmp	r3, #48	; 0x30
 80051a6:	d064      	beq.n	8005272 <HAL_TIM_ConfigClockSource+0x15a>
 80051a8:	2b30      	cmp	r3, #48	; 0x30
 80051aa:	d86b      	bhi.n	8005284 <HAL_TIM_ConfigClockSource+0x16c>
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	d060      	beq.n	8005272 <HAL_TIM_ConfigClockSource+0x15a>
 80051b0:	2b20      	cmp	r3, #32
 80051b2:	d867      	bhi.n	8005284 <HAL_TIM_ConfigClockSource+0x16c>
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d05c      	beq.n	8005272 <HAL_TIM_ConfigClockSource+0x15a>
 80051b8:	2b10      	cmp	r3, #16
 80051ba:	d05a      	beq.n	8005272 <HAL_TIM_ConfigClockSource+0x15a>
 80051bc:	e062      	b.n	8005284 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6818      	ldr	r0, [r3, #0]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	6899      	ldr	r1, [r3, #8]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	f000 fcc1 	bl	8005b54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	609a      	str	r2, [r3, #8]
      break;
 80051ea:	e04f      	b.n	800528c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6818      	ldr	r0, [r3, #0]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	6899      	ldr	r1, [r3, #8]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f000 fcaa 	bl	8005b54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800520e:	609a      	str	r2, [r3, #8]
      break;
 8005210:	e03c      	b.n	800528c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6818      	ldr	r0, [r3, #0]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	6859      	ldr	r1, [r3, #4]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	461a      	mov	r2, r3
 8005220:	f000 fb68 	bl	80058f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2150      	movs	r1, #80	; 0x50
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fc77 	bl	8005b1e <TIM_ITRx_SetConfig>
      break;
 8005230:	e02c      	b.n	800528c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6818      	ldr	r0, [r3, #0]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	6859      	ldr	r1, [r3, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	461a      	mov	r2, r3
 8005240:	f000 fbc4 	bl	80059cc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2160      	movs	r1, #96	; 0x60
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fc67 	bl	8005b1e <TIM_ITRx_SetConfig>
      break;
 8005250:	e01c      	b.n	800528c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6818      	ldr	r0, [r3, #0]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	6859      	ldr	r1, [r3, #4]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	461a      	mov	r2, r3
 8005260:	f000 fb48 	bl	80058f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2140      	movs	r1, #64	; 0x40
 800526a:	4618      	mov	r0, r3
 800526c:	f000 fc57 	bl	8005b1e <TIM_ITRx_SetConfig>
      break;
 8005270:	e00c      	b.n	800528c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4619      	mov	r1, r3
 800527c:	4610      	mov	r0, r2
 800527e:	f000 fc4e 	bl	8005b1e <TIM_ITRx_SetConfig>
      break;
 8005282:	e003      	b.n	800528c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	73fb      	strb	r3, [r7, #15]
      break;
 8005288:	e000      	b.n	800528c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800528a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800529c:	7bfb      	ldrb	r3, [r7, #15]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
	...

080052a8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b0c      	cmp	r3, #12
 80052ba:	d831      	bhi.n	8005320 <HAL_TIM_ReadCapturedValue+0x78>
 80052bc:	a201      	add	r2, pc, #4	; (adr r2, 80052c4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80052be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c2:	bf00      	nop
 80052c4:	080052f9 	.word	0x080052f9
 80052c8:	08005321 	.word	0x08005321
 80052cc:	08005321 	.word	0x08005321
 80052d0:	08005321 	.word	0x08005321
 80052d4:	08005303 	.word	0x08005303
 80052d8:	08005321 	.word	0x08005321
 80052dc:	08005321 	.word	0x08005321
 80052e0:	08005321 	.word	0x08005321
 80052e4:	0800530d 	.word	0x0800530d
 80052e8:	08005321 	.word	0x08005321
 80052ec:	08005321 	.word	0x08005321
 80052f0:	08005321 	.word	0x08005321
 80052f4:	08005317 	.word	0x08005317
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052fe:	60fb      	str	r3, [r7, #12]

      break;
 8005300:	e00f      	b.n	8005322 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005308:	60fb      	str	r3, [r7, #12]

      break;
 800530a:	e00a      	b.n	8005322 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005312:	60fb      	str	r3, [r7, #12]

      break;
 8005314:	e005      	b.n	8005322 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531c:	60fb      	str	r3, [r7, #12]

      break;
 800531e:	e000      	b.n	8005322 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005320:	bf00      	nop
  }

  return tmpreg;
 8005322:	68fb      	ldr	r3, [r7, #12]
}
 8005324:	4618      	mov	r0, r3
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a40      	ldr	r2, [pc, #256]	; (8005480 <TIM_Base_SetConfig+0x114>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d013      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538a:	d00f      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a3d      	ldr	r2, [pc, #244]	; (8005484 <TIM_Base_SetConfig+0x118>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d00b      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a3c      	ldr	r2, [pc, #240]	; (8005488 <TIM_Base_SetConfig+0x11c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d007      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a3b      	ldr	r2, [pc, #236]	; (800548c <TIM_Base_SetConfig+0x120>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d003      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a3a      	ldr	r2, [pc, #232]	; (8005490 <TIM_Base_SetConfig+0x124>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d108      	bne.n	80053be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a2f      	ldr	r2, [pc, #188]	; (8005480 <TIM_Base_SetConfig+0x114>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d02b      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053cc:	d027      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a2c      	ldr	r2, [pc, #176]	; (8005484 <TIM_Base_SetConfig+0x118>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d023      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a2b      	ldr	r2, [pc, #172]	; (8005488 <TIM_Base_SetConfig+0x11c>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d01f      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a2a      	ldr	r2, [pc, #168]	; (800548c <TIM_Base_SetConfig+0x120>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d01b      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a29      	ldr	r2, [pc, #164]	; (8005490 <TIM_Base_SetConfig+0x124>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d017      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a28      	ldr	r2, [pc, #160]	; (8005494 <TIM_Base_SetConfig+0x128>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d013      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a27      	ldr	r2, [pc, #156]	; (8005498 <TIM_Base_SetConfig+0x12c>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d00f      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a26      	ldr	r2, [pc, #152]	; (800549c <TIM_Base_SetConfig+0x130>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d00b      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a25      	ldr	r2, [pc, #148]	; (80054a0 <TIM_Base_SetConfig+0x134>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d007      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a24      	ldr	r2, [pc, #144]	; (80054a4 <TIM_Base_SetConfig+0x138>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d003      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a23      	ldr	r2, [pc, #140]	; (80054a8 <TIM_Base_SetConfig+0x13c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d108      	bne.n	8005430 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4313      	orrs	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	4313      	orrs	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a0a      	ldr	r2, [pc, #40]	; (8005480 <TIM_Base_SetConfig+0x114>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d003      	beq.n	8005464 <TIM_Base_SetConfig+0xf8>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a0c      	ldr	r2, [pc, #48]	; (8005490 <TIM_Base_SetConfig+0x124>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d103      	bne.n	800546c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	691a      	ldr	r2, [r3, #16]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	615a      	str	r2, [r3, #20]
}
 8005472:	bf00      	nop
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	40010000 	.word	0x40010000
 8005484:	40000400 	.word	0x40000400
 8005488:	40000800 	.word	0x40000800
 800548c:	40000c00 	.word	0x40000c00
 8005490:	40010400 	.word	0x40010400
 8005494:	40014000 	.word	0x40014000
 8005498:	40014400 	.word	0x40014400
 800549c:	40014800 	.word	0x40014800
 80054a0:	40001800 	.word	0x40001800
 80054a4:	40001c00 	.word	0x40001c00
 80054a8:	40002000 	.word	0x40002000

080054ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	f023 0201 	bic.w	r2, r3, #1
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 0303 	bic.w	r3, r3, #3
 80054e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f023 0302 	bic.w	r3, r3, #2
 80054f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a20      	ldr	r2, [pc, #128]	; (8005584 <TIM_OC1_SetConfig+0xd8>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d003      	beq.n	8005510 <TIM_OC1_SetConfig+0x64>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a1f      	ldr	r2, [pc, #124]	; (8005588 <TIM_OC1_SetConfig+0xdc>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d10c      	bne.n	800552a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	f023 0308 	bic.w	r3, r3, #8
 8005516:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	4313      	orrs	r3, r2
 8005520:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f023 0304 	bic.w	r3, r3, #4
 8005528:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a15      	ldr	r2, [pc, #84]	; (8005584 <TIM_OC1_SetConfig+0xd8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d003      	beq.n	800553a <TIM_OC1_SetConfig+0x8e>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a14      	ldr	r2, [pc, #80]	; (8005588 <TIM_OC1_SetConfig+0xdc>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d111      	bne.n	800555e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005540:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005548:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	4313      	orrs	r3, r2
 8005552:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4313      	orrs	r3, r2
 800555c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	621a      	str	r2, [r3, #32]
}
 8005578:	bf00      	nop
 800557a:	371c      	adds	r7, #28
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	40010000 	.word	0x40010000
 8005588:	40010400 	.word	0x40010400

0800558c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	f023 0210 	bic.w	r2, r3, #16
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	021b      	lsls	r3, r3, #8
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f023 0320 	bic.w	r3, r3, #32
 80055d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	011b      	lsls	r3, r3, #4
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a22      	ldr	r2, [pc, #136]	; (8005670 <TIM_OC2_SetConfig+0xe4>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d003      	beq.n	80055f4 <TIM_OC2_SetConfig+0x68>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a21      	ldr	r2, [pc, #132]	; (8005674 <TIM_OC2_SetConfig+0xe8>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d10d      	bne.n	8005610 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	011b      	lsls	r3, r3, #4
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	4313      	orrs	r3, r2
 8005606:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800560e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a17      	ldr	r2, [pc, #92]	; (8005670 <TIM_OC2_SetConfig+0xe4>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d003      	beq.n	8005620 <TIM_OC2_SetConfig+0x94>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a16      	ldr	r2, [pc, #88]	; (8005674 <TIM_OC2_SetConfig+0xe8>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d113      	bne.n	8005648 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005626:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800562e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	4313      	orrs	r3, r2
 800563a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	4313      	orrs	r3, r2
 8005646:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	621a      	str	r2, [r3, #32]
}
 8005662:	bf00      	nop
 8005664:	371c      	adds	r7, #28
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	40010000 	.word	0x40010000
 8005674:	40010400 	.word	0x40010400

08005678 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005678:	b480      	push	{r7}
 800567a:	b087      	sub	sp, #28
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f023 0303 	bic.w	r3, r3, #3
 80056ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	021b      	lsls	r3, r3, #8
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a21      	ldr	r2, [pc, #132]	; (8005758 <TIM_OC3_SetConfig+0xe0>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d003      	beq.n	80056de <TIM_OC3_SetConfig+0x66>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a20      	ldr	r2, [pc, #128]	; (800575c <TIM_OC3_SetConfig+0xe4>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d10d      	bne.n	80056fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	021b      	lsls	r3, r3, #8
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a16      	ldr	r2, [pc, #88]	; (8005758 <TIM_OC3_SetConfig+0xe0>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d003      	beq.n	800570a <TIM_OC3_SetConfig+0x92>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a15      	ldr	r2, [pc, #84]	; (800575c <TIM_OC3_SetConfig+0xe4>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d113      	bne.n	8005732 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005710:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005718:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	621a      	str	r2, [r3, #32]
}
 800574c:	bf00      	nop
 800574e:	371c      	adds	r7, #28
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	40010000 	.word	0x40010000
 800575c:	40010400 	.word	0x40010400

08005760 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800578e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005796:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	021b      	lsls	r3, r3, #8
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	031b      	lsls	r3, r3, #12
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a12      	ldr	r2, [pc, #72]	; (8005804 <TIM_OC4_SetConfig+0xa4>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d003      	beq.n	80057c8 <TIM_OC4_SetConfig+0x68>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a11      	ldr	r2, [pc, #68]	; (8005808 <TIM_OC4_SetConfig+0xa8>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d109      	bne.n	80057dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	019b      	lsls	r3, r3, #6
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	4313      	orrs	r3, r2
 80057da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	621a      	str	r2, [r3, #32]
}
 80057f6:	bf00      	nop
 80057f8:	371c      	adds	r7, #28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	40010000 	.word	0x40010000
 8005808:	40010400 	.word	0x40010400

0800580c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	f023 0201 	bic.w	r2, r3, #1
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4a28      	ldr	r2, [pc, #160]	; (80058d8 <TIM_TI1_SetConfig+0xcc>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d01b      	beq.n	8005872 <TIM_TI1_SetConfig+0x66>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005840:	d017      	beq.n	8005872 <TIM_TI1_SetConfig+0x66>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	4a25      	ldr	r2, [pc, #148]	; (80058dc <TIM_TI1_SetConfig+0xd0>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d013      	beq.n	8005872 <TIM_TI1_SetConfig+0x66>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	4a24      	ldr	r2, [pc, #144]	; (80058e0 <TIM_TI1_SetConfig+0xd4>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d00f      	beq.n	8005872 <TIM_TI1_SetConfig+0x66>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	4a23      	ldr	r2, [pc, #140]	; (80058e4 <TIM_TI1_SetConfig+0xd8>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d00b      	beq.n	8005872 <TIM_TI1_SetConfig+0x66>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	4a22      	ldr	r2, [pc, #136]	; (80058e8 <TIM_TI1_SetConfig+0xdc>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d007      	beq.n	8005872 <TIM_TI1_SetConfig+0x66>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	4a21      	ldr	r2, [pc, #132]	; (80058ec <TIM_TI1_SetConfig+0xe0>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d003      	beq.n	8005872 <TIM_TI1_SetConfig+0x66>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	4a20      	ldr	r2, [pc, #128]	; (80058f0 <TIM_TI1_SetConfig+0xe4>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d101      	bne.n	8005876 <TIM_TI1_SetConfig+0x6a>
 8005872:	2301      	movs	r3, #1
 8005874:	e000      	b.n	8005878 <TIM_TI1_SetConfig+0x6c>
 8005876:	2300      	movs	r3, #0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d008      	beq.n	800588e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f023 0303 	bic.w	r3, r3, #3
 8005882:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4313      	orrs	r3, r2
 800588a:	617b      	str	r3, [r7, #20]
 800588c:	e003      	b.n	8005896 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f043 0301 	orr.w	r3, r3, #1
 8005894:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800589c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	011b      	lsls	r3, r3, #4
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	f023 030a 	bic.w	r3, r3, #10
 80058b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	f003 030a 	and.w	r3, r3, #10
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	621a      	str	r2, [r3, #32]
}
 80058ca:	bf00      	nop
 80058cc:	371c      	adds	r7, #28
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	40010000 	.word	0x40010000
 80058dc:	40000400 	.word	0x40000400
 80058e0:	40000800 	.word	0x40000800
 80058e4:	40000c00 	.word	0x40000c00
 80058e8:	40010400 	.word	0x40010400
 80058ec:	40014000 	.word	0x40014000
 80058f0:	40001800 	.word	0x40001800

080058f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	f023 0201 	bic.w	r2, r3, #1
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800591e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	011b      	lsls	r3, r3, #4
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	4313      	orrs	r3, r2
 8005928:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f023 030a 	bic.w	r3, r3, #10
 8005930:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	4313      	orrs	r3, r2
 8005938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	621a      	str	r2, [r3, #32]
}
 8005946:	bf00      	nop
 8005948:	371c      	adds	r7, #28
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005952:	b480      	push	{r7}
 8005954:	b087      	sub	sp, #28
 8005956:	af00      	add	r7, sp, #0
 8005958:	60f8      	str	r0, [r7, #12]
 800595a:	60b9      	str	r1, [r7, #8]
 800595c:	607a      	str	r2, [r7, #4]
 800595e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	f023 0210 	bic.w	r2, r3, #16
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800597e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	021b      	lsls	r3, r3, #8
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005990:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	031b      	lsls	r3, r3, #12
 8005996:	b29b      	uxth	r3, r3
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	4313      	orrs	r3, r2
 800599c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059a4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	011b      	lsls	r3, r3, #4
 80059aa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	621a      	str	r2, [r3, #32]
}
 80059c0:	bf00      	nop
 80059c2:	371c      	adds	r7, #28
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	f023 0210 	bic.w	r2, r3, #16
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	031b      	lsls	r3, r3, #12
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	011b      	lsls	r3, r3, #4
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	621a      	str	r2, [r3, #32]
}
 8005a20:	bf00      	nop
 8005a22:	371c      	adds	r7, #28
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
 8005a38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	69db      	ldr	r3, [r3, #28]
 8005a4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f023 0303 	bic.w	r3, r3, #3
 8005a58:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a68:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	011b      	lsls	r3, r3, #4
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005a7c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	021b      	lsls	r3, r3, #8
 8005a82:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	621a      	str	r2, [r3, #32]
}
 8005a98:	bf00      	nop
 8005a9a:	371c      	adds	r7, #28
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
 8005ab0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ad0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	021b      	lsls	r3, r3, #8
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ae2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	031b      	lsls	r3, r3, #12
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005af6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	031b      	lsls	r3, r3, #12
 8005afc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	621a      	str	r2, [r3, #32]
}
 8005b12:	bf00      	nop
 8005b14:	371c      	adds	r7, #28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b085      	sub	sp, #20
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
 8005b26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	f043 0307 	orr.w	r3, r3, #7
 8005b40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	609a      	str	r2, [r3, #8]
}
 8005b48:	bf00      	nop
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b087      	sub	sp, #28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
 8005b60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	021a      	lsls	r2, r3, #8
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	431a      	orrs	r2, r3
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	609a      	str	r2, [r3, #8]
}
 8005b88:	bf00      	nop
 8005b8a:	371c      	adds	r7, #28
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b087      	sub	sp, #28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f003 031f 	and.w	r3, r3, #31
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6a1a      	ldr	r2, [r3, #32]
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	43db      	mvns	r3, r3
 8005bb6:	401a      	ands	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6a1a      	ldr	r2, [r3, #32]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	f003 031f 	and.w	r3, r3, #31
 8005bc6:	6879      	ldr	r1, [r7, #4]
 8005bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bcc:	431a      	orrs	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	621a      	str	r2, [r3, #32]
}
 8005bd2:	bf00      	nop
 8005bd4:	371c      	adds	r7, #28
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
	...

08005be0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e05a      	b.n	8005cae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a21      	ldr	r2, [pc, #132]	; (8005cbc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d022      	beq.n	8005c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c44:	d01d      	beq.n	8005c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a1d      	ldr	r2, [pc, #116]	; (8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d018      	beq.n	8005c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a1b      	ldr	r2, [pc, #108]	; (8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d013      	beq.n	8005c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a1a      	ldr	r2, [pc, #104]	; (8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d00e      	beq.n	8005c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a18      	ldr	r2, [pc, #96]	; (8005ccc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d009      	beq.n	8005c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a17      	ldr	r2, [pc, #92]	; (8005cd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d004      	beq.n	8005c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a15      	ldr	r2, [pc, #84]	; (8005cd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d10c      	bne.n	8005c9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	40010000 	.word	0x40010000
 8005cc0:	40000400 	.word	0x40000400
 8005cc4:	40000800 	.word	0x40000800
 8005cc8:	40000c00 	.word	0x40000c00
 8005ccc:	40010400 	.word	0x40010400
 8005cd0:	40014000 	.word	0x40014000
 8005cd4:	40001800 	.word	0x40001800

08005cd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e03f      	b.n	8005d92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d106      	bne.n	8005d2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7fb fd9e 	bl	8001868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2224      	movs	r2, #36	; 0x24
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68da      	ldr	r2, [r3, #12]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 fddf 	bl	8006908 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	691a      	ldr	r2, [r3, #16]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	695a      	ldr	r2, [r3, #20]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68da      	ldr	r2, [r3, #12]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2220      	movs	r2, #32
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b08a      	sub	sp, #40	; 0x28
 8005d9e:	af02      	add	r7, sp, #8
 8005da0:	60f8      	str	r0, [r7, #12]
 8005da2:	60b9      	str	r1, [r7, #8]
 8005da4:	603b      	str	r3, [r7, #0]
 8005da6:	4613      	mov	r3, r2
 8005da8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005daa:	2300      	movs	r3, #0
 8005dac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b20      	cmp	r3, #32
 8005db8:	d17c      	bne.n	8005eb4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d002      	beq.n	8005dc6 <HAL_UART_Transmit+0x2c>
 8005dc0:	88fb      	ldrh	r3, [r7, #6]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e075      	b.n	8005eb6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d101      	bne.n	8005dd8 <HAL_UART_Transmit+0x3e>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	e06e      	b.n	8005eb6 <HAL_UART_Transmit+0x11c>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2221      	movs	r2, #33	; 0x21
 8005dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dee:	f7fc f89d 	bl	8001f2c <HAL_GetTick>
 8005df2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	88fa      	ldrh	r2, [r7, #6]
 8005df8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	88fa      	ldrh	r2, [r7, #6]
 8005dfe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e08:	d108      	bne.n	8005e1c <HAL_UART_Transmit+0x82>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d104      	bne.n	8005e1c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005e12:	2300      	movs	r3, #0
 8005e14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	61bb      	str	r3, [r7, #24]
 8005e1a:	e003      	b.n	8005e24 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e20:	2300      	movs	r3, #0
 8005e22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005e2c:	e02a      	b.n	8005e84 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2200      	movs	r2, #0
 8005e36:	2180      	movs	r1, #128	; 0x80
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 fb1f 	bl	800647c <UART_WaitOnFlagUntilTimeout>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e036      	b.n	8005eb6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10b      	bne.n	8005e66 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	881b      	ldrh	r3, [r3, #0]
 8005e52:	461a      	mov	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	3302      	adds	r3, #2
 8005e62:	61bb      	str	r3, [r7, #24]
 8005e64:	e007      	b.n	8005e76 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	781a      	ldrb	r2, [r3, #0]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	3301      	adds	r3, #1
 8005e74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1cf      	bne.n	8005e2e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	2200      	movs	r2, #0
 8005e96:	2140      	movs	r1, #64	; 0x40
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 faef 	bl	800647c <UART_WaitOnFlagUntilTimeout>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e006      	b.n	8005eb6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	e000      	b.n	8005eb6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005eb4:	2302      	movs	r3, #2
  }
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3720      	adds	r7, #32
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b084      	sub	sp, #16
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	60f8      	str	r0, [r7, #12]
 8005ec6:	60b9      	str	r1, [r7, #8]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b20      	cmp	r3, #32
 8005ed6:	d11d      	bne.n	8005f14 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d002      	beq.n	8005ee4 <HAL_UART_Receive_IT+0x26>
 8005ede:	88fb      	ldrh	r3, [r7, #6]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e016      	b.n	8005f16 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d101      	bne.n	8005ef6 <HAL_UART_Receive_IT+0x38>
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e00f      	b.n	8005f16 <HAL_UART_Receive_IT+0x58>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005f04:	88fb      	ldrh	r3, [r7, #6]
 8005f06:	461a      	mov	r2, r3
 8005f08:	68b9      	ldr	r1, [r7, #8]
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 fb24 	bl	8006558 <UART_Start_Receive_IT>
 8005f10:	4603      	mov	r3, r0
 8005f12:	e000      	b.n	8005f16 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005f14:	2302      	movs	r3, #2
  }
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
	...

08005f20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b0ba      	sub	sp, #232	; 0xe8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005f46:	2300      	movs	r3, #0
 8005f48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f56:	f003 030f 	and.w	r3, r3, #15
 8005f5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005f5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10f      	bne.n	8005f86 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f6a:	f003 0320 	and.w	r3, r3, #32
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d009      	beq.n	8005f86 <HAL_UART_IRQHandler+0x66>
 8005f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f76:	f003 0320 	and.w	r3, r3, #32
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fc07 	bl	8006792 <UART_Receive_IT>
      return;
 8005f84:	e256      	b.n	8006434 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005f86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f000 80de 	beq.w	800614c <HAL_UART_IRQHandler+0x22c>
 8005f90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d106      	bne.n	8005faa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fa0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 80d1 	beq.w	800614c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00b      	beq.n	8005fce <HAL_UART_IRQHandler+0xae>
 8005fb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d005      	beq.n	8005fce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc6:	f043 0201 	orr.w	r2, r3, #1
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fd2:	f003 0304 	and.w	r3, r3, #4
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00b      	beq.n	8005ff2 <HAL_UART_IRQHandler+0xd2>
 8005fda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d005      	beq.n	8005ff2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	f043 0202 	orr.w	r2, r3, #2
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ff6:	f003 0302 	and.w	r3, r3, #2
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00b      	beq.n	8006016 <HAL_UART_IRQHandler+0xf6>
 8005ffe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d005      	beq.n	8006016 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600e:	f043 0204 	orr.w	r2, r3, #4
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800601a:	f003 0308 	and.w	r3, r3, #8
 800601e:	2b00      	cmp	r3, #0
 8006020:	d011      	beq.n	8006046 <HAL_UART_IRQHandler+0x126>
 8006022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006026:	f003 0320 	and.w	r3, r3, #32
 800602a:	2b00      	cmp	r3, #0
 800602c:	d105      	bne.n	800603a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800602e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b00      	cmp	r3, #0
 8006038:	d005      	beq.n	8006046 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603e:	f043 0208 	orr.w	r2, r3, #8
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604a:	2b00      	cmp	r3, #0
 800604c:	f000 81ed 	beq.w	800642a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006054:	f003 0320 	and.w	r3, r3, #32
 8006058:	2b00      	cmp	r3, #0
 800605a:	d008      	beq.n	800606e <HAL_UART_IRQHandler+0x14e>
 800605c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006060:	f003 0320 	and.w	r3, r3, #32
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fb92 	bl	8006792 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	695b      	ldr	r3, [r3, #20]
 8006074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006078:	2b40      	cmp	r3, #64	; 0x40
 800607a:	bf0c      	ite	eq
 800607c:	2301      	moveq	r3, #1
 800607e:	2300      	movne	r3, #0
 8006080:	b2db      	uxtb	r3, r3
 8006082:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608a:	f003 0308 	and.w	r3, r3, #8
 800608e:	2b00      	cmp	r3, #0
 8006090:	d103      	bne.n	800609a <HAL_UART_IRQHandler+0x17a>
 8006092:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006096:	2b00      	cmp	r3, #0
 8006098:	d04f      	beq.n	800613a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fa9a 	bl	80065d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060aa:	2b40      	cmp	r3, #64	; 0x40
 80060ac:	d141      	bne.n	8006132 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	3314      	adds	r3, #20
 80060b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060bc:	e853 3f00 	ldrex	r3, [r3]
 80060c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80060c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	3314      	adds	r3, #20
 80060d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80060da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80060de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80060e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80060ea:	e841 2300 	strex	r3, r2, [r1]
 80060ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80060f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1d9      	bne.n	80060ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d013      	beq.n	800612a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006106:	4a7d      	ldr	r2, [pc, #500]	; (80062fc <HAL_UART_IRQHandler+0x3dc>)
 8006108:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610e:	4618      	mov	r0, r3
 8006110:	f7fc f8bd 	bl	800228e <HAL_DMA_Abort_IT>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d016      	beq.n	8006148 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006124:	4610      	mov	r0, r2
 8006126:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006128:	e00e      	b.n	8006148 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f990 	bl	8006450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006130:	e00a      	b.n	8006148 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f98c 	bl	8006450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006138:	e006      	b.n	8006148 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f988 	bl	8006450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006146:	e170      	b.n	800642a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006148:	bf00      	nop
    return;
 800614a:	e16e      	b.n	800642a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006150:	2b01      	cmp	r3, #1
 8006152:	f040 814a 	bne.w	80063ea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800615a:	f003 0310 	and.w	r3, r3, #16
 800615e:	2b00      	cmp	r3, #0
 8006160:	f000 8143 	beq.w	80063ea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006168:	f003 0310 	and.w	r3, r3, #16
 800616c:	2b00      	cmp	r3, #0
 800616e:	f000 813c 	beq.w	80063ea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006172:	2300      	movs	r3, #0
 8006174:	60bb      	str	r3, [r7, #8]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	60bb      	str	r3, [r7, #8]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	60bb      	str	r3, [r7, #8]
 8006186:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006192:	2b40      	cmp	r3, #64	; 0x40
 8006194:	f040 80b4 	bne.w	8006300 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80061a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f000 8140 	beq.w	800642e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061b6:	429a      	cmp	r2, r3
 80061b8:	f080 8139 	bcs.w	800642e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ce:	f000 8088 	beq.w	80062e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	330c      	adds	r3, #12
 80061d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061e0:	e853 3f00 	ldrex	r3, [r3]
 80061e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80061e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	330c      	adds	r3, #12
 80061fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80061fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006202:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800620a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800620e:	e841 2300 	strex	r3, r2, [r1]
 8006212:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006216:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1d9      	bne.n	80061d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	3314      	adds	r3, #20
 8006224:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006228:	e853 3f00 	ldrex	r3, [r3]
 800622c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800622e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006230:	f023 0301 	bic.w	r3, r3, #1
 8006234:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	3314      	adds	r3, #20
 800623e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006242:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006246:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006248:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800624a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800624e:	e841 2300 	strex	r3, r2, [r1]
 8006252:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006254:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1e1      	bne.n	800621e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	3314      	adds	r3, #20
 8006260:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006262:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006264:	e853 3f00 	ldrex	r3, [r3]
 8006268:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800626a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800626c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006270:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	3314      	adds	r3, #20
 800627a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800627e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006280:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006282:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006284:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006286:	e841 2300 	strex	r3, r2, [r1]
 800628a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800628c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1e3      	bne.n	800625a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2220      	movs	r2, #32
 8006296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	330c      	adds	r3, #12
 80062a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062aa:	e853 3f00 	ldrex	r3, [r3]
 80062ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80062b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062b2:	f023 0310 	bic.w	r3, r3, #16
 80062b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	330c      	adds	r3, #12
 80062c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80062c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80062c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80062ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062cc:	e841 2300 	strex	r3, r2, [r1]
 80062d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80062d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1e3      	bne.n	80062a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062dc:	4618      	mov	r0, r3
 80062de:	f7fb ff66 	bl	80021ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	4619      	mov	r1, r3
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f8b6 	bl	8006464 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062f8:	e099      	b.n	800642e <HAL_UART_IRQHandler+0x50e>
 80062fa:	bf00      	nop
 80062fc:	0800669b 	.word	0x0800669b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006308:	b29b      	uxth	r3, r3
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006314:	b29b      	uxth	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	f000 808b 	beq.w	8006432 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800631c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 8086 	beq.w	8006432 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	330c      	adds	r3, #12
 800632c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006330:	e853 3f00 	ldrex	r3, [r3]
 8006334:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006338:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800633c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	330c      	adds	r3, #12
 8006346:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800634a:	647a      	str	r2, [r7, #68]	; 0x44
 800634c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006350:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006352:	e841 2300 	strex	r3, r2, [r1]
 8006356:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1e3      	bne.n	8006326 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3314      	adds	r3, #20
 8006364:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	e853 3f00 	ldrex	r3, [r3]
 800636c:	623b      	str	r3, [r7, #32]
   return(result);
 800636e:	6a3b      	ldr	r3, [r7, #32]
 8006370:	f023 0301 	bic.w	r3, r3, #1
 8006374:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3314      	adds	r3, #20
 800637e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006382:	633a      	str	r2, [r7, #48]	; 0x30
 8006384:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006386:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800638a:	e841 2300 	strex	r3, r2, [r1]
 800638e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1e3      	bne.n	800635e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2220      	movs	r2, #32
 800639a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	330c      	adds	r3, #12
 80063aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	e853 3f00 	ldrex	r3, [r3]
 80063b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f023 0310 	bic.w	r3, r3, #16
 80063ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	330c      	adds	r3, #12
 80063c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80063c8:	61fa      	str	r2, [r7, #28]
 80063ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063cc:	69b9      	ldr	r1, [r7, #24]
 80063ce:	69fa      	ldr	r2, [r7, #28]
 80063d0:	e841 2300 	strex	r3, r2, [r1]
 80063d4:	617b      	str	r3, [r7, #20]
   return(result);
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1e3      	bne.n	80063a4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063e0:	4619      	mov	r1, r3
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f83e 	bl	8006464 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063e8:	e023      	b.n	8006432 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80063ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d009      	beq.n	800640a <HAL_UART_IRQHandler+0x4ea>
 80063f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f95d 	bl	80066c2 <UART_Transmit_IT>
    return;
 8006408:	e014      	b.n	8006434 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800640a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800640e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00e      	beq.n	8006434 <HAL_UART_IRQHandler+0x514>
 8006416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800641a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641e:	2b00      	cmp	r3, #0
 8006420:	d008      	beq.n	8006434 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f99d 	bl	8006762 <UART_EndTransmit_IT>
    return;
 8006428:	e004      	b.n	8006434 <HAL_UART_IRQHandler+0x514>
    return;
 800642a:	bf00      	nop
 800642c:	e002      	b.n	8006434 <HAL_UART_IRQHandler+0x514>
      return;
 800642e:	bf00      	nop
 8006430:	e000      	b.n	8006434 <HAL_UART_IRQHandler+0x514>
      return;
 8006432:	bf00      	nop
  }
}
 8006434:	37e8      	adds	r7, #232	; 0xe8
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop

0800643c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	460b      	mov	r3, r1
 800646e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b090      	sub	sp, #64	; 0x40
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	603b      	str	r3, [r7, #0]
 8006488:	4613      	mov	r3, r2
 800648a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800648c:	e050      	b.n	8006530 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800648e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006494:	d04c      	beq.n	8006530 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006498:	2b00      	cmp	r3, #0
 800649a:	d007      	beq.n	80064ac <UART_WaitOnFlagUntilTimeout+0x30>
 800649c:	f7fb fd46 	bl	8001f2c <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d241      	bcs.n	8006530 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	330c      	adds	r3, #12
 80064b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b6:	e853 3f00 	ldrex	r3, [r3]
 80064ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	330c      	adds	r3, #12
 80064ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064cc:	637a      	str	r2, [r7, #52]	; 0x34
 80064ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064d4:	e841 2300 	strex	r3, r2, [r1]
 80064d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1e5      	bne.n	80064ac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3314      	adds	r3, #20
 80064e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	e853 3f00 	ldrex	r3, [r3]
 80064ee:	613b      	str	r3, [r7, #16]
   return(result);
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	f023 0301 	bic.w	r3, r3, #1
 80064f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	3314      	adds	r3, #20
 80064fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006500:	623a      	str	r2, [r7, #32]
 8006502:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006504:	69f9      	ldr	r1, [r7, #28]
 8006506:	6a3a      	ldr	r2, [r7, #32]
 8006508:	e841 2300 	strex	r3, r2, [r1]
 800650c:	61bb      	str	r3, [r7, #24]
   return(result);
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1e5      	bne.n	80064e0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2220      	movs	r2, #32
 8006518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2220      	movs	r2, #32
 8006520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e00f      	b.n	8006550 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	4013      	ands	r3, r2
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	429a      	cmp	r2, r3
 800653e:	bf0c      	ite	eq
 8006540:	2301      	moveq	r3, #1
 8006542:	2300      	movne	r3, #0
 8006544:	b2db      	uxtb	r3, r3
 8006546:	461a      	mov	r2, r3
 8006548:	79fb      	ldrb	r3, [r7, #7]
 800654a:	429a      	cmp	r2, r3
 800654c:	d09f      	beq.n	800648e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3740      	adds	r7, #64	; 0x40
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	4613      	mov	r3, r2
 8006564:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	88fa      	ldrh	r2, [r7, #6]
 8006570:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	88fa      	ldrh	r2, [r7, #6]
 8006576:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2222      	movs	r2, #34	; 0x22
 8006582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d007      	beq.n	80065a6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68da      	ldr	r2, [r3, #12]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065a4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	695a      	ldr	r2, [r3, #20]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f042 0201 	orr.w	r2, r2, #1
 80065b4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68da      	ldr	r2, [r3, #12]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f042 0220 	orr.w	r2, r2, #32
 80065c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3714      	adds	r7, #20
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b095      	sub	sp, #84	; 0x54
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	330c      	adds	r3, #12
 80065e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e6:	e853 3f00 	ldrex	r3, [r3]
 80065ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	330c      	adds	r3, #12
 80065fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065fc:	643a      	str	r2, [r7, #64]	; 0x40
 80065fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006600:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006602:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006604:	e841 2300 	strex	r3, r2, [r1]
 8006608:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800660a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1e5      	bne.n	80065dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	3314      	adds	r3, #20
 8006616:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006618:	6a3b      	ldr	r3, [r7, #32]
 800661a:	e853 3f00 	ldrex	r3, [r3]
 800661e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	f023 0301 	bic.w	r3, r3, #1
 8006626:	64bb      	str	r3, [r7, #72]	; 0x48
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	3314      	adds	r3, #20
 800662e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006630:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006632:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006634:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006638:	e841 2300 	strex	r3, r2, [r1]
 800663c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1e5      	bne.n	8006610 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006648:	2b01      	cmp	r3, #1
 800664a:	d119      	bne.n	8006680 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	330c      	adds	r3, #12
 8006652:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	e853 3f00 	ldrex	r3, [r3]
 800665a:	60bb      	str	r3, [r7, #8]
   return(result);
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f023 0310 	bic.w	r3, r3, #16
 8006662:	647b      	str	r3, [r7, #68]	; 0x44
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	330c      	adds	r3, #12
 800666a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800666c:	61ba      	str	r2, [r7, #24]
 800666e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006670:	6979      	ldr	r1, [r7, #20]
 8006672:	69ba      	ldr	r2, [r7, #24]
 8006674:	e841 2300 	strex	r3, r2, [r1]
 8006678:	613b      	str	r3, [r7, #16]
   return(result);
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1e5      	bne.n	800664c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2220      	movs	r2, #32
 8006684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800668e:	bf00      	nop
 8006690:	3754      	adds	r7, #84	; 0x54
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b084      	sub	sp, #16
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f7ff fecb 	bl	8006450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066ba:	bf00      	nop
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b085      	sub	sp, #20
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b21      	cmp	r3, #33	; 0x21
 80066d4:	d13e      	bne.n	8006754 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066de:	d114      	bne.n	800670a <UART_Transmit_IT+0x48>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d110      	bne.n	800670a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a1b      	ldr	r3, [r3, #32]
 80066ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	461a      	mov	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	1c9a      	adds	r2, r3, #2
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	621a      	str	r2, [r3, #32]
 8006708:	e008      	b.n	800671c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	1c59      	adds	r1, r3, #1
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	6211      	str	r1, [r2, #32]
 8006714:	781a      	ldrb	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006720:	b29b      	uxth	r3, r3
 8006722:	3b01      	subs	r3, #1
 8006724:	b29b      	uxth	r3, r3
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	4619      	mov	r1, r3
 800672a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10f      	bne.n	8006750 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68da      	ldr	r2, [r3, #12]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800673e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68da      	ldr	r2, [r3, #12]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800674e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006750:	2300      	movs	r3, #0
 8006752:	e000      	b.n	8006756 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006754:	2302      	movs	r3, #2
  }
}
 8006756:	4618      	mov	r0, r3
 8006758:	3714      	adds	r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b082      	sub	sp, #8
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68da      	ldr	r2, [r3, #12]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006778:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2220      	movs	r2, #32
 800677e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7ff fe5a 	bl	800643c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b08c      	sub	sp, #48	; 0x30
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b22      	cmp	r3, #34	; 0x22
 80067a4:	f040 80ab 	bne.w	80068fe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067b0:	d117      	bne.n	80067e2 <UART_Receive_IT+0x50>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d113      	bne.n	80067e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80067ba:	2300      	movs	r3, #0
 80067bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067da:	1c9a      	adds	r2, r3, #2
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	629a      	str	r2, [r3, #40]	; 0x28
 80067e0:	e026      	b.n	8006830 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80067e8:	2300      	movs	r3, #0
 80067ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067f4:	d007      	beq.n	8006806 <UART_Receive_IT+0x74>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10a      	bne.n	8006814 <UART_Receive_IT+0x82>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d106      	bne.n	8006814 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	b2da      	uxtb	r2, r3
 800680e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006810:	701a      	strb	r2, [r3, #0]
 8006812:	e008      	b.n	8006826 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	b2db      	uxtb	r3, r3
 800681c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006820:	b2da      	uxtb	r2, r3
 8006822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006824:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006834:	b29b      	uxth	r3, r3
 8006836:	3b01      	subs	r3, #1
 8006838:	b29b      	uxth	r3, r3
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	4619      	mov	r1, r3
 800683e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006840:	2b00      	cmp	r3, #0
 8006842:	d15a      	bne.n	80068fa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68da      	ldr	r2, [r3, #12]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f022 0220 	bic.w	r2, r2, #32
 8006852:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68da      	ldr	r2, [r3, #12]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006862:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	695a      	ldr	r2, [r3, #20]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f022 0201 	bic.w	r2, r2, #1
 8006872:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2220      	movs	r2, #32
 8006878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006880:	2b01      	cmp	r3, #1
 8006882:	d135      	bne.n	80068f0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	330c      	adds	r3, #12
 8006890:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	e853 3f00 	ldrex	r3, [r3]
 8006898:	613b      	str	r3, [r7, #16]
   return(result);
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	f023 0310 	bic.w	r3, r3, #16
 80068a0:	627b      	str	r3, [r7, #36]	; 0x24
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	330c      	adds	r3, #12
 80068a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068aa:	623a      	str	r2, [r7, #32]
 80068ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ae:	69f9      	ldr	r1, [r7, #28]
 80068b0:	6a3a      	ldr	r2, [r7, #32]
 80068b2:	e841 2300 	strex	r3, r2, [r1]
 80068b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1e5      	bne.n	800688a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0310 	and.w	r3, r3, #16
 80068c8:	2b10      	cmp	r3, #16
 80068ca:	d10a      	bne.n	80068e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068cc:	2300      	movs	r3, #0
 80068ce:	60fb      	str	r3, [r7, #12]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	60fb      	str	r3, [r7, #12]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	60fb      	str	r3, [r7, #12]
 80068e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068e6:	4619      	mov	r1, r3
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f7ff fdbb 	bl	8006464 <HAL_UARTEx_RxEventCallback>
 80068ee:	e002      	b.n	80068f6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f7fb f9d3 	bl	8001c9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	e002      	b.n	8006900 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	e000      	b.n	8006900 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80068fe:	2302      	movs	r3, #2
  }
}
 8006900:	4618      	mov	r0, r3
 8006902:	3730      	adds	r7, #48	; 0x30
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800690c:	b0c0      	sub	sp, #256	; 0x100
 800690e:	af00      	add	r7, sp, #0
 8006910:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006924:	68d9      	ldr	r1, [r3, #12]
 8006926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	ea40 0301 	orr.w	r3, r0, r1
 8006930:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006936:	689a      	ldr	r2, [r3, #8]
 8006938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	431a      	orrs	r2, r3
 8006940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	431a      	orrs	r2, r3
 8006948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	4313      	orrs	r3, r2
 8006950:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006960:	f021 010c 	bic.w	r1, r1, #12
 8006964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800696e:	430b      	orrs	r3, r1
 8006970:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800697e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006982:	6999      	ldr	r1, [r3, #24]
 8006984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	ea40 0301 	orr.w	r3, r0, r1
 800698e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	4b8f      	ldr	r3, [pc, #572]	; (8006bd4 <UART_SetConfig+0x2cc>)
 8006998:	429a      	cmp	r2, r3
 800699a:	d005      	beq.n	80069a8 <UART_SetConfig+0xa0>
 800699c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	4b8d      	ldr	r3, [pc, #564]	; (8006bd8 <UART_SetConfig+0x2d0>)
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d104      	bne.n	80069b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80069a8:	f7fd f8e2 	bl	8003b70 <HAL_RCC_GetPCLK2Freq>
 80069ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80069b0:	e003      	b.n	80069ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80069b2:	f7fd f8c9 	bl	8003b48 <HAL_RCC_GetPCLK1Freq>
 80069b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069be:	69db      	ldr	r3, [r3, #28]
 80069c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069c4:	f040 810c 	bne.w	8006be0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069cc:	2200      	movs	r2, #0
 80069ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80069d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80069da:	4622      	mov	r2, r4
 80069dc:	462b      	mov	r3, r5
 80069de:	1891      	adds	r1, r2, r2
 80069e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80069e2:	415b      	adcs	r3, r3
 80069e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80069ea:	4621      	mov	r1, r4
 80069ec:	eb12 0801 	adds.w	r8, r2, r1
 80069f0:	4629      	mov	r1, r5
 80069f2:	eb43 0901 	adc.w	r9, r3, r1
 80069f6:	f04f 0200 	mov.w	r2, #0
 80069fa:	f04f 0300 	mov.w	r3, #0
 80069fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a0a:	4690      	mov	r8, r2
 8006a0c:	4699      	mov	r9, r3
 8006a0e:	4623      	mov	r3, r4
 8006a10:	eb18 0303 	adds.w	r3, r8, r3
 8006a14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a18:	462b      	mov	r3, r5
 8006a1a:	eb49 0303 	adc.w	r3, r9, r3
 8006a1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a2e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006a32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006a36:	460b      	mov	r3, r1
 8006a38:	18db      	adds	r3, r3, r3
 8006a3a:	653b      	str	r3, [r7, #80]	; 0x50
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	eb42 0303 	adc.w	r3, r2, r3
 8006a42:	657b      	str	r3, [r7, #84]	; 0x54
 8006a44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006a48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006a4c:	f7f9 fbce 	bl	80001ec <__aeabi_uldivmod>
 8006a50:	4602      	mov	r2, r0
 8006a52:	460b      	mov	r3, r1
 8006a54:	4b61      	ldr	r3, [pc, #388]	; (8006bdc <UART_SetConfig+0x2d4>)
 8006a56:	fba3 2302 	umull	r2, r3, r3, r2
 8006a5a:	095b      	lsrs	r3, r3, #5
 8006a5c:	011c      	lsls	r4, r3, #4
 8006a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a62:	2200      	movs	r2, #0
 8006a64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a68:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006a6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006a70:	4642      	mov	r2, r8
 8006a72:	464b      	mov	r3, r9
 8006a74:	1891      	adds	r1, r2, r2
 8006a76:	64b9      	str	r1, [r7, #72]	; 0x48
 8006a78:	415b      	adcs	r3, r3
 8006a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006a80:	4641      	mov	r1, r8
 8006a82:	eb12 0a01 	adds.w	sl, r2, r1
 8006a86:	4649      	mov	r1, r9
 8006a88:	eb43 0b01 	adc.w	fp, r3, r1
 8006a8c:	f04f 0200 	mov.w	r2, #0
 8006a90:	f04f 0300 	mov.w	r3, #0
 8006a94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006aa0:	4692      	mov	sl, r2
 8006aa2:	469b      	mov	fp, r3
 8006aa4:	4643      	mov	r3, r8
 8006aa6:	eb1a 0303 	adds.w	r3, sl, r3
 8006aaa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006aae:	464b      	mov	r3, r9
 8006ab0:	eb4b 0303 	adc.w	r3, fp, r3
 8006ab4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ac4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006ac8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006acc:	460b      	mov	r3, r1
 8006ace:	18db      	adds	r3, r3, r3
 8006ad0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	eb42 0303 	adc.w	r3, r2, r3
 8006ad8:	647b      	str	r3, [r7, #68]	; 0x44
 8006ada:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006ade:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006ae2:	f7f9 fb83 	bl	80001ec <__aeabi_uldivmod>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	460b      	mov	r3, r1
 8006aea:	4611      	mov	r1, r2
 8006aec:	4b3b      	ldr	r3, [pc, #236]	; (8006bdc <UART_SetConfig+0x2d4>)
 8006aee:	fba3 2301 	umull	r2, r3, r3, r1
 8006af2:	095b      	lsrs	r3, r3, #5
 8006af4:	2264      	movs	r2, #100	; 0x64
 8006af6:	fb02 f303 	mul.w	r3, r2, r3
 8006afa:	1acb      	subs	r3, r1, r3
 8006afc:	00db      	lsls	r3, r3, #3
 8006afe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006b02:	4b36      	ldr	r3, [pc, #216]	; (8006bdc <UART_SetConfig+0x2d4>)
 8006b04:	fba3 2302 	umull	r2, r3, r3, r2
 8006b08:	095b      	lsrs	r3, r3, #5
 8006b0a:	005b      	lsls	r3, r3, #1
 8006b0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b10:	441c      	add	r4, r3
 8006b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b16:	2200      	movs	r2, #0
 8006b18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006b20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006b24:	4642      	mov	r2, r8
 8006b26:	464b      	mov	r3, r9
 8006b28:	1891      	adds	r1, r2, r2
 8006b2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b2c:	415b      	adcs	r3, r3
 8006b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b34:	4641      	mov	r1, r8
 8006b36:	1851      	adds	r1, r2, r1
 8006b38:	6339      	str	r1, [r7, #48]	; 0x30
 8006b3a:	4649      	mov	r1, r9
 8006b3c:	414b      	adcs	r3, r1
 8006b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b40:	f04f 0200 	mov.w	r2, #0
 8006b44:	f04f 0300 	mov.w	r3, #0
 8006b48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006b4c:	4659      	mov	r1, fp
 8006b4e:	00cb      	lsls	r3, r1, #3
 8006b50:	4651      	mov	r1, sl
 8006b52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b56:	4651      	mov	r1, sl
 8006b58:	00ca      	lsls	r2, r1, #3
 8006b5a:	4610      	mov	r0, r2
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	4603      	mov	r3, r0
 8006b60:	4642      	mov	r2, r8
 8006b62:	189b      	adds	r3, r3, r2
 8006b64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b68:	464b      	mov	r3, r9
 8006b6a:	460a      	mov	r2, r1
 8006b6c:	eb42 0303 	adc.w	r3, r2, r3
 8006b70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b80:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006b84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006b88:	460b      	mov	r3, r1
 8006b8a:	18db      	adds	r3, r3, r3
 8006b8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b8e:	4613      	mov	r3, r2
 8006b90:	eb42 0303 	adc.w	r3, r2, r3
 8006b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006b9e:	f7f9 fb25 	bl	80001ec <__aeabi_uldivmod>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	4b0d      	ldr	r3, [pc, #52]	; (8006bdc <UART_SetConfig+0x2d4>)
 8006ba8:	fba3 1302 	umull	r1, r3, r3, r2
 8006bac:	095b      	lsrs	r3, r3, #5
 8006bae:	2164      	movs	r1, #100	; 0x64
 8006bb0:	fb01 f303 	mul.w	r3, r1, r3
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	00db      	lsls	r3, r3, #3
 8006bb8:	3332      	adds	r3, #50	; 0x32
 8006bba:	4a08      	ldr	r2, [pc, #32]	; (8006bdc <UART_SetConfig+0x2d4>)
 8006bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc0:	095b      	lsrs	r3, r3, #5
 8006bc2:	f003 0207 	and.w	r2, r3, #7
 8006bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4422      	add	r2, r4
 8006bce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006bd0:	e105      	b.n	8006dde <UART_SetConfig+0x4d6>
 8006bd2:	bf00      	nop
 8006bd4:	40011000 	.word	0x40011000
 8006bd8:	40011400 	.word	0x40011400
 8006bdc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006be0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006be4:	2200      	movs	r2, #0
 8006be6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006bea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006bee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006bf2:	4642      	mov	r2, r8
 8006bf4:	464b      	mov	r3, r9
 8006bf6:	1891      	adds	r1, r2, r2
 8006bf8:	6239      	str	r1, [r7, #32]
 8006bfa:	415b      	adcs	r3, r3
 8006bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8006bfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c02:	4641      	mov	r1, r8
 8006c04:	1854      	adds	r4, r2, r1
 8006c06:	4649      	mov	r1, r9
 8006c08:	eb43 0501 	adc.w	r5, r3, r1
 8006c0c:	f04f 0200 	mov.w	r2, #0
 8006c10:	f04f 0300 	mov.w	r3, #0
 8006c14:	00eb      	lsls	r3, r5, #3
 8006c16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c1a:	00e2      	lsls	r2, r4, #3
 8006c1c:	4614      	mov	r4, r2
 8006c1e:	461d      	mov	r5, r3
 8006c20:	4643      	mov	r3, r8
 8006c22:	18e3      	adds	r3, r4, r3
 8006c24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c28:	464b      	mov	r3, r9
 8006c2a:	eb45 0303 	adc.w	r3, r5, r3
 8006c2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c42:	f04f 0200 	mov.w	r2, #0
 8006c46:	f04f 0300 	mov.w	r3, #0
 8006c4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006c4e:	4629      	mov	r1, r5
 8006c50:	008b      	lsls	r3, r1, #2
 8006c52:	4621      	mov	r1, r4
 8006c54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c58:	4621      	mov	r1, r4
 8006c5a:	008a      	lsls	r2, r1, #2
 8006c5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006c60:	f7f9 fac4 	bl	80001ec <__aeabi_uldivmod>
 8006c64:	4602      	mov	r2, r0
 8006c66:	460b      	mov	r3, r1
 8006c68:	4b60      	ldr	r3, [pc, #384]	; (8006dec <UART_SetConfig+0x4e4>)
 8006c6a:	fba3 2302 	umull	r2, r3, r3, r2
 8006c6e:	095b      	lsrs	r3, r3, #5
 8006c70:	011c      	lsls	r4, r3, #4
 8006c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c76:	2200      	movs	r2, #0
 8006c78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006c80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006c84:	4642      	mov	r2, r8
 8006c86:	464b      	mov	r3, r9
 8006c88:	1891      	adds	r1, r2, r2
 8006c8a:	61b9      	str	r1, [r7, #24]
 8006c8c:	415b      	adcs	r3, r3
 8006c8e:	61fb      	str	r3, [r7, #28]
 8006c90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c94:	4641      	mov	r1, r8
 8006c96:	1851      	adds	r1, r2, r1
 8006c98:	6139      	str	r1, [r7, #16]
 8006c9a:	4649      	mov	r1, r9
 8006c9c:	414b      	adcs	r3, r1
 8006c9e:	617b      	str	r3, [r7, #20]
 8006ca0:	f04f 0200 	mov.w	r2, #0
 8006ca4:	f04f 0300 	mov.w	r3, #0
 8006ca8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006cac:	4659      	mov	r1, fp
 8006cae:	00cb      	lsls	r3, r1, #3
 8006cb0:	4651      	mov	r1, sl
 8006cb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cb6:	4651      	mov	r1, sl
 8006cb8:	00ca      	lsls	r2, r1, #3
 8006cba:	4610      	mov	r0, r2
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	4642      	mov	r2, r8
 8006cc2:	189b      	adds	r3, r3, r2
 8006cc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006cc8:	464b      	mov	r3, r9
 8006cca:	460a      	mov	r2, r1
 8006ccc:	eb42 0303 	adc.w	r3, r2, r3
 8006cd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	67bb      	str	r3, [r7, #120]	; 0x78
 8006cde:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006ce0:	f04f 0200 	mov.w	r2, #0
 8006ce4:	f04f 0300 	mov.w	r3, #0
 8006ce8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006cec:	4649      	mov	r1, r9
 8006cee:	008b      	lsls	r3, r1, #2
 8006cf0:	4641      	mov	r1, r8
 8006cf2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cf6:	4641      	mov	r1, r8
 8006cf8:	008a      	lsls	r2, r1, #2
 8006cfa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006cfe:	f7f9 fa75 	bl	80001ec <__aeabi_uldivmod>
 8006d02:	4602      	mov	r2, r0
 8006d04:	460b      	mov	r3, r1
 8006d06:	4b39      	ldr	r3, [pc, #228]	; (8006dec <UART_SetConfig+0x4e4>)
 8006d08:	fba3 1302 	umull	r1, r3, r3, r2
 8006d0c:	095b      	lsrs	r3, r3, #5
 8006d0e:	2164      	movs	r1, #100	; 0x64
 8006d10:	fb01 f303 	mul.w	r3, r1, r3
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	011b      	lsls	r3, r3, #4
 8006d18:	3332      	adds	r3, #50	; 0x32
 8006d1a:	4a34      	ldr	r2, [pc, #208]	; (8006dec <UART_SetConfig+0x4e4>)
 8006d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d20:	095b      	lsrs	r3, r3, #5
 8006d22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d26:	441c      	add	r4, r3
 8006d28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	673b      	str	r3, [r7, #112]	; 0x70
 8006d30:	677a      	str	r2, [r7, #116]	; 0x74
 8006d32:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006d36:	4642      	mov	r2, r8
 8006d38:	464b      	mov	r3, r9
 8006d3a:	1891      	adds	r1, r2, r2
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	415b      	adcs	r3, r3
 8006d40:	60fb      	str	r3, [r7, #12]
 8006d42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d46:	4641      	mov	r1, r8
 8006d48:	1851      	adds	r1, r2, r1
 8006d4a:	6039      	str	r1, [r7, #0]
 8006d4c:	4649      	mov	r1, r9
 8006d4e:	414b      	adcs	r3, r1
 8006d50:	607b      	str	r3, [r7, #4]
 8006d52:	f04f 0200 	mov.w	r2, #0
 8006d56:	f04f 0300 	mov.w	r3, #0
 8006d5a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d5e:	4659      	mov	r1, fp
 8006d60:	00cb      	lsls	r3, r1, #3
 8006d62:	4651      	mov	r1, sl
 8006d64:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d68:	4651      	mov	r1, sl
 8006d6a:	00ca      	lsls	r2, r1, #3
 8006d6c:	4610      	mov	r0, r2
 8006d6e:	4619      	mov	r1, r3
 8006d70:	4603      	mov	r3, r0
 8006d72:	4642      	mov	r2, r8
 8006d74:	189b      	adds	r3, r3, r2
 8006d76:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d78:	464b      	mov	r3, r9
 8006d7a:	460a      	mov	r2, r1
 8006d7c:	eb42 0303 	adc.w	r3, r2, r3
 8006d80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	663b      	str	r3, [r7, #96]	; 0x60
 8006d8c:	667a      	str	r2, [r7, #100]	; 0x64
 8006d8e:	f04f 0200 	mov.w	r2, #0
 8006d92:	f04f 0300 	mov.w	r3, #0
 8006d96:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006d9a:	4649      	mov	r1, r9
 8006d9c:	008b      	lsls	r3, r1, #2
 8006d9e:	4641      	mov	r1, r8
 8006da0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006da4:	4641      	mov	r1, r8
 8006da6:	008a      	lsls	r2, r1, #2
 8006da8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006dac:	f7f9 fa1e 	bl	80001ec <__aeabi_uldivmod>
 8006db0:	4602      	mov	r2, r0
 8006db2:	460b      	mov	r3, r1
 8006db4:	4b0d      	ldr	r3, [pc, #52]	; (8006dec <UART_SetConfig+0x4e4>)
 8006db6:	fba3 1302 	umull	r1, r3, r3, r2
 8006dba:	095b      	lsrs	r3, r3, #5
 8006dbc:	2164      	movs	r1, #100	; 0x64
 8006dbe:	fb01 f303 	mul.w	r3, r1, r3
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	011b      	lsls	r3, r3, #4
 8006dc6:	3332      	adds	r3, #50	; 0x32
 8006dc8:	4a08      	ldr	r2, [pc, #32]	; (8006dec <UART_SetConfig+0x4e4>)
 8006dca:	fba2 2303 	umull	r2, r3, r2, r3
 8006dce:	095b      	lsrs	r3, r3, #5
 8006dd0:	f003 020f 	and.w	r2, r3, #15
 8006dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4422      	add	r2, r4
 8006ddc:	609a      	str	r2, [r3, #8]
}
 8006dde:	bf00      	nop
 8006de0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006de4:	46bd      	mov	sp, r7
 8006de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dea:	bf00      	nop
 8006dec:	51eb851f 	.word	0x51eb851f

08006df0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006df0:	b084      	sub	sp, #16
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b084      	sub	sp, #16
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
 8006dfa:	f107 001c 	add.w	r0, r7, #28
 8006dfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d122      	bne.n	8006e4e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d105      	bne.n	8006e42 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 faa2 	bl	800738c <USB_CoreReset>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	73fb      	strb	r3, [r7, #15]
 8006e4c:	e01a      	b.n	8006e84 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 fa96 	bl	800738c <USB_CoreReset>
 8006e60:	4603      	mov	r3, r0
 8006e62:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d106      	bne.n	8006e78 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	639a      	str	r2, [r3, #56]	; 0x38
 8006e76:	e005      	b.n	8006e84 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d10b      	bne.n	8006ea2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f043 0206 	orr.w	r2, r3, #6
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f043 0220 	orr.w	r2, r3, #32
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006eae:	b004      	add	sp, #16
 8006eb0:	4770      	bx	lr

08006eb2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b083      	sub	sp, #12
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f023 0201 	bic.w	r2, r3, #1
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	460b      	mov	r3, r1
 8006ede:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ef0:	78fb      	ldrb	r3, [r7, #3]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d115      	bne.n	8006f22 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006f02:	2001      	movs	r0, #1
 8006f04:	f7fb f81e 	bl	8001f44 <HAL_Delay>
      ms++;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fa2e 	bl	8007370 <USB_GetMode>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d01e      	beq.n	8006f58 <USB_SetCurrentMode+0x84>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2b31      	cmp	r3, #49	; 0x31
 8006f1e:	d9f0      	bls.n	8006f02 <USB_SetCurrentMode+0x2e>
 8006f20:	e01a      	b.n	8006f58 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f22:	78fb      	ldrb	r3, [r7, #3]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d115      	bne.n	8006f54 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006f34:	2001      	movs	r0, #1
 8006f36:	f7fb f805 	bl	8001f44 <HAL_Delay>
      ms++;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fa15 	bl	8007370 <USB_GetMode>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d005      	beq.n	8006f58 <USB_SetCurrentMode+0x84>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2b31      	cmp	r3, #49	; 0x31
 8006f50:	d9f0      	bls.n	8006f34 <USB_SetCurrentMode+0x60>
 8006f52:	e001      	b.n	8006f58 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e005      	b.n	8006f64 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2b32      	cmp	r3, #50	; 0x32
 8006f5c:	d101      	bne.n	8006f62 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e000      	b.n	8006f64 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3710      	adds	r7, #16
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f6c:	b084      	sub	sp, #16
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b086      	sub	sp, #24
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006f7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f86:	2300      	movs	r3, #0
 8006f88:	613b      	str	r3, [r7, #16]
 8006f8a:	e009      	b.n	8006fa0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	3340      	adds	r3, #64	; 0x40
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	4413      	add	r3, r2
 8006f96:	2200      	movs	r2, #0
 8006f98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	613b      	str	r3, [r7, #16]
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	2b0e      	cmp	r3, #14
 8006fa4:	d9f2      	bls.n	8006f8c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d11c      	bne.n	8006fe6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fba:	f043 0302 	orr.w	r3, r3, #2
 8006fbe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fdc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	639a      	str	r2, [r3, #56]	; 0x38
 8006fe4:	e00b      	b.n	8006ffe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007004:	461a      	mov	r2, r3
 8007006:	2300      	movs	r3, #0
 8007008:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007010:	4619      	mov	r1, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007018:	461a      	mov	r2, r3
 800701a:	680b      	ldr	r3, [r1, #0]
 800701c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800701e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007020:	2b01      	cmp	r3, #1
 8007022:	d10c      	bne.n	800703e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007026:	2b00      	cmp	r3, #0
 8007028:	d104      	bne.n	8007034 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800702a:	2100      	movs	r1, #0
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f965 	bl	80072fc <USB_SetDevSpeed>
 8007032:	e008      	b.n	8007046 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007034:	2101      	movs	r1, #1
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f960 	bl	80072fc <USB_SetDevSpeed>
 800703c:	e003      	b.n	8007046 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800703e:	2103      	movs	r1, #3
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f95b 	bl	80072fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007046:	2110      	movs	r1, #16
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f8f3 	bl	8007234 <USB_FlushTxFifo>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d001      	beq.n	8007058 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f91f 	bl	800729c <USB_FlushRxFifo>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d001      	beq.n	8007068 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800706e:	461a      	mov	r2, r3
 8007070:	2300      	movs	r3, #0
 8007072:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800707a:	461a      	mov	r2, r3
 800707c:	2300      	movs	r3, #0
 800707e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007086:	461a      	mov	r2, r3
 8007088:	2300      	movs	r3, #0
 800708a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800708c:	2300      	movs	r3, #0
 800708e:	613b      	str	r3, [r7, #16]
 8007090:	e043      	b.n	800711a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	015a      	lsls	r2, r3, #5
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	4413      	add	r3, r2
 800709a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070a8:	d118      	bne.n	80070dc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d10a      	bne.n	80070c6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070bc:	461a      	mov	r2, r3
 80070be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80070c2:	6013      	str	r3, [r2, #0]
 80070c4:	e013      	b.n	80070ee <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	015a      	lsls	r2, r3, #5
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	4413      	add	r3, r2
 80070ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d2:	461a      	mov	r2, r3
 80070d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80070d8:	6013      	str	r3, [r2, #0]
 80070da:	e008      	b.n	80070ee <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e8:	461a      	mov	r2, r3
 80070ea:	2300      	movs	r3, #0
 80070ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	015a      	lsls	r2, r3, #5
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070fa:	461a      	mov	r2, r3
 80070fc:	2300      	movs	r3, #0
 80070fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800710c:	461a      	mov	r2, r3
 800710e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007112:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	3301      	adds	r3, #1
 8007118:	613b      	str	r3, [r7, #16]
 800711a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	429a      	cmp	r2, r3
 8007120:	d3b7      	bcc.n	8007092 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007122:	2300      	movs	r3, #0
 8007124:	613b      	str	r3, [r7, #16]
 8007126:	e043      	b.n	80071b0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	015a      	lsls	r2, r3, #5
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	4413      	add	r3, r2
 8007130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800713a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800713e:	d118      	bne.n	8007172 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10a      	bne.n	800715c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	015a      	lsls	r2, r3, #5
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	4413      	add	r3, r2
 800714e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007152:	461a      	mov	r2, r3
 8007154:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007158:	6013      	str	r3, [r2, #0]
 800715a:	e013      	b.n	8007184 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	015a      	lsls	r2, r3, #5
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	4413      	add	r3, r2
 8007164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007168:	461a      	mov	r2, r3
 800716a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800716e:	6013      	str	r3, [r2, #0]
 8007170:	e008      	b.n	8007184 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	4413      	add	r3, r2
 800717a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800717e:	461a      	mov	r2, r3
 8007180:	2300      	movs	r3, #0
 8007182:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	015a      	lsls	r2, r3, #5
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	4413      	add	r3, r2
 800718c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007190:	461a      	mov	r2, r3
 8007192:	2300      	movs	r3, #0
 8007194:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	015a      	lsls	r2, r3, #5
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	4413      	add	r3, r2
 800719e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a2:	461a      	mov	r2, r3
 80071a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80071a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	3301      	adds	r3, #1
 80071ae:	613b      	str	r3, [r7, #16]
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d3b7      	bcc.n	8007128 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80071d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80071da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d105      	bne.n	80071ec <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	f043 0210 	orr.w	r2, r3, #16
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	699a      	ldr	r2, [r3, #24]
 80071f0:	4b0f      	ldr	r3, [pc, #60]	; (8007230 <USB_DevInit+0x2c4>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80071f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d005      	beq.n	800720a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	f043 0208 	orr.w	r2, r3, #8
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800720a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800720c:	2b01      	cmp	r3, #1
 800720e:	d107      	bne.n	8007220 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	699b      	ldr	r3, [r3, #24]
 8007214:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007218:	f043 0304 	orr.w	r3, r3, #4
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007220:	7dfb      	ldrb	r3, [r7, #23]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3718      	adds	r7, #24
 8007226:	46bd      	mov	sp, r7
 8007228:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800722c:	b004      	add	sp, #16
 800722e:	4770      	bx	lr
 8007230:	803c3800 	.word	0x803c3800

08007234 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800723e:	2300      	movs	r3, #0
 8007240:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	3301      	adds	r3, #1
 8007246:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	4a13      	ldr	r2, [pc, #76]	; (8007298 <USB_FlushTxFifo+0x64>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d901      	bls.n	8007254 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	e01b      	b.n	800728c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	2b00      	cmp	r3, #0
 800725a:	daf2      	bge.n	8007242 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	019b      	lsls	r3, r3, #6
 8007264:	f043 0220 	orr.w	r2, r3, #32
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	3301      	adds	r3, #1
 8007270:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	4a08      	ldr	r2, [pc, #32]	; (8007298 <USB_FlushTxFifo+0x64>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d901      	bls.n	800727e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e006      	b.n	800728c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	f003 0320 	and.w	r3, r3, #32
 8007286:	2b20      	cmp	r3, #32
 8007288:	d0f0      	beq.n	800726c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3714      	adds	r7, #20
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr
 8007298:	00030d40 	.word	0x00030d40

0800729c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072a4:	2300      	movs	r3, #0
 80072a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	3301      	adds	r3, #1
 80072ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	4a11      	ldr	r2, [pc, #68]	; (80072f8 <USB_FlushRxFifo+0x5c>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d901      	bls.n	80072ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e018      	b.n	80072ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	daf2      	bge.n	80072a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2210      	movs	r2, #16
 80072ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	3301      	adds	r3, #1
 80072d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	4a08      	ldr	r2, [pc, #32]	; (80072f8 <USB_FlushRxFifo+0x5c>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d901      	bls.n	80072de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e006      	b.n	80072ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	f003 0310 	and.w	r3, r3, #16
 80072e6:	2b10      	cmp	r3, #16
 80072e8:	d0f0      	beq.n	80072cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3714      	adds	r7, #20
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	00030d40 	.word	0x00030d40

080072fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	460b      	mov	r3, r1
 8007306:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	78fb      	ldrb	r3, [r7, #3]
 8007316:	68f9      	ldr	r1, [r7, #12]
 8007318:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800731c:	4313      	orrs	r3, r2
 800731e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3714      	adds	r7, #20
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800732e:	b480      	push	{r7}
 8007330:	b085      	sub	sp, #20
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007348:	f023 0303 	bic.w	r3, r3, #3
 800734c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800735c:	f043 0302 	orr.w	r3, r3, #2
 8007360:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3714      	adds	r7, #20
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	f003 0301 	and.w	r3, r3, #1
}
 8007380:	4618      	mov	r0, r3
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007394:	2300      	movs	r3, #0
 8007396:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	3301      	adds	r3, #1
 800739c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	4a13      	ldr	r2, [pc, #76]	; (80073f0 <USB_CoreReset+0x64>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d901      	bls.n	80073aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e01b      	b.n	80073e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	daf2      	bge.n	8007398 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80073b2:	2300      	movs	r3, #0
 80073b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	f043 0201 	orr.w	r2, r3, #1
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	3301      	adds	r3, #1
 80073c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	4a09      	ldr	r2, [pc, #36]	; (80073f0 <USB_CoreReset+0x64>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d901      	bls.n	80073d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80073d0:	2303      	movs	r3, #3
 80073d2:	e006      	b.n	80073e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d0f0      	beq.n	80073c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3714      	adds	r7, #20
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	00030d40 	.word	0x00030d40

080073f4 <__errno>:
 80073f4:	4b01      	ldr	r3, [pc, #4]	; (80073fc <__errno+0x8>)
 80073f6:	6818      	ldr	r0, [r3, #0]
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	20000138 	.word	0x20000138

08007400 <__libc_init_array>:
 8007400:	b570      	push	{r4, r5, r6, lr}
 8007402:	4d0d      	ldr	r5, [pc, #52]	; (8007438 <__libc_init_array+0x38>)
 8007404:	4c0d      	ldr	r4, [pc, #52]	; (800743c <__libc_init_array+0x3c>)
 8007406:	1b64      	subs	r4, r4, r5
 8007408:	10a4      	asrs	r4, r4, #2
 800740a:	2600      	movs	r6, #0
 800740c:	42a6      	cmp	r6, r4
 800740e:	d109      	bne.n	8007424 <__libc_init_array+0x24>
 8007410:	4d0b      	ldr	r5, [pc, #44]	; (8007440 <__libc_init_array+0x40>)
 8007412:	4c0c      	ldr	r4, [pc, #48]	; (8007444 <__libc_init_array+0x44>)
 8007414:	f000 fd1e 	bl	8007e54 <_init>
 8007418:	1b64      	subs	r4, r4, r5
 800741a:	10a4      	asrs	r4, r4, #2
 800741c:	2600      	movs	r6, #0
 800741e:	42a6      	cmp	r6, r4
 8007420:	d105      	bne.n	800742e <__libc_init_array+0x2e>
 8007422:	bd70      	pop	{r4, r5, r6, pc}
 8007424:	f855 3b04 	ldr.w	r3, [r5], #4
 8007428:	4798      	blx	r3
 800742a:	3601      	adds	r6, #1
 800742c:	e7ee      	b.n	800740c <__libc_init_array+0xc>
 800742e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007432:	4798      	blx	r3
 8007434:	3601      	adds	r6, #1
 8007436:	e7f2      	b.n	800741e <__libc_init_array+0x1e>
 8007438:	08007fa0 	.word	0x08007fa0
 800743c:	08007fa0 	.word	0x08007fa0
 8007440:	08007fa0 	.word	0x08007fa0
 8007444:	08007fa4 	.word	0x08007fa4

08007448 <memset>:
 8007448:	4402      	add	r2, r0
 800744a:	4603      	mov	r3, r0
 800744c:	4293      	cmp	r3, r2
 800744e:	d100      	bne.n	8007452 <memset+0xa>
 8007450:	4770      	bx	lr
 8007452:	f803 1b01 	strb.w	r1, [r3], #1
 8007456:	e7f9      	b.n	800744c <memset+0x4>

08007458 <_puts_r>:
 8007458:	b570      	push	{r4, r5, r6, lr}
 800745a:	460e      	mov	r6, r1
 800745c:	4605      	mov	r5, r0
 800745e:	b118      	cbz	r0, 8007468 <_puts_r+0x10>
 8007460:	6983      	ldr	r3, [r0, #24]
 8007462:	b90b      	cbnz	r3, 8007468 <_puts_r+0x10>
 8007464:	f000 fa48 	bl	80078f8 <__sinit>
 8007468:	69ab      	ldr	r3, [r5, #24]
 800746a:	68ac      	ldr	r4, [r5, #8]
 800746c:	b913      	cbnz	r3, 8007474 <_puts_r+0x1c>
 800746e:	4628      	mov	r0, r5
 8007470:	f000 fa42 	bl	80078f8 <__sinit>
 8007474:	4b2c      	ldr	r3, [pc, #176]	; (8007528 <_puts_r+0xd0>)
 8007476:	429c      	cmp	r4, r3
 8007478:	d120      	bne.n	80074bc <_puts_r+0x64>
 800747a:	686c      	ldr	r4, [r5, #4]
 800747c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800747e:	07db      	lsls	r3, r3, #31
 8007480:	d405      	bmi.n	800748e <_puts_r+0x36>
 8007482:	89a3      	ldrh	r3, [r4, #12]
 8007484:	0598      	lsls	r0, r3, #22
 8007486:	d402      	bmi.n	800748e <_puts_r+0x36>
 8007488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800748a:	f000 fad3 	bl	8007a34 <__retarget_lock_acquire_recursive>
 800748e:	89a3      	ldrh	r3, [r4, #12]
 8007490:	0719      	lsls	r1, r3, #28
 8007492:	d51d      	bpl.n	80074d0 <_puts_r+0x78>
 8007494:	6923      	ldr	r3, [r4, #16]
 8007496:	b1db      	cbz	r3, 80074d0 <_puts_r+0x78>
 8007498:	3e01      	subs	r6, #1
 800749a:	68a3      	ldr	r3, [r4, #8]
 800749c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80074a0:	3b01      	subs	r3, #1
 80074a2:	60a3      	str	r3, [r4, #8]
 80074a4:	bb39      	cbnz	r1, 80074f6 <_puts_r+0x9e>
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	da38      	bge.n	800751c <_puts_r+0xc4>
 80074aa:	4622      	mov	r2, r4
 80074ac:	210a      	movs	r1, #10
 80074ae:	4628      	mov	r0, r5
 80074b0:	f000 f848 	bl	8007544 <__swbuf_r>
 80074b4:	3001      	adds	r0, #1
 80074b6:	d011      	beq.n	80074dc <_puts_r+0x84>
 80074b8:	250a      	movs	r5, #10
 80074ba:	e011      	b.n	80074e0 <_puts_r+0x88>
 80074bc:	4b1b      	ldr	r3, [pc, #108]	; (800752c <_puts_r+0xd4>)
 80074be:	429c      	cmp	r4, r3
 80074c0:	d101      	bne.n	80074c6 <_puts_r+0x6e>
 80074c2:	68ac      	ldr	r4, [r5, #8]
 80074c4:	e7da      	b.n	800747c <_puts_r+0x24>
 80074c6:	4b1a      	ldr	r3, [pc, #104]	; (8007530 <_puts_r+0xd8>)
 80074c8:	429c      	cmp	r4, r3
 80074ca:	bf08      	it	eq
 80074cc:	68ec      	ldreq	r4, [r5, #12]
 80074ce:	e7d5      	b.n	800747c <_puts_r+0x24>
 80074d0:	4621      	mov	r1, r4
 80074d2:	4628      	mov	r0, r5
 80074d4:	f000 f888 	bl	80075e8 <__swsetup_r>
 80074d8:	2800      	cmp	r0, #0
 80074da:	d0dd      	beq.n	8007498 <_puts_r+0x40>
 80074dc:	f04f 35ff 	mov.w	r5, #4294967295
 80074e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074e2:	07da      	lsls	r2, r3, #31
 80074e4:	d405      	bmi.n	80074f2 <_puts_r+0x9a>
 80074e6:	89a3      	ldrh	r3, [r4, #12]
 80074e8:	059b      	lsls	r3, r3, #22
 80074ea:	d402      	bmi.n	80074f2 <_puts_r+0x9a>
 80074ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074ee:	f000 faa2 	bl	8007a36 <__retarget_lock_release_recursive>
 80074f2:	4628      	mov	r0, r5
 80074f4:	bd70      	pop	{r4, r5, r6, pc}
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	da04      	bge.n	8007504 <_puts_r+0xac>
 80074fa:	69a2      	ldr	r2, [r4, #24]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	dc06      	bgt.n	800750e <_puts_r+0xb6>
 8007500:	290a      	cmp	r1, #10
 8007502:	d004      	beq.n	800750e <_puts_r+0xb6>
 8007504:	6823      	ldr	r3, [r4, #0]
 8007506:	1c5a      	adds	r2, r3, #1
 8007508:	6022      	str	r2, [r4, #0]
 800750a:	7019      	strb	r1, [r3, #0]
 800750c:	e7c5      	b.n	800749a <_puts_r+0x42>
 800750e:	4622      	mov	r2, r4
 8007510:	4628      	mov	r0, r5
 8007512:	f000 f817 	bl	8007544 <__swbuf_r>
 8007516:	3001      	adds	r0, #1
 8007518:	d1bf      	bne.n	800749a <_puts_r+0x42>
 800751a:	e7df      	b.n	80074dc <_puts_r+0x84>
 800751c:	6823      	ldr	r3, [r4, #0]
 800751e:	250a      	movs	r5, #10
 8007520:	1c5a      	adds	r2, r3, #1
 8007522:	6022      	str	r2, [r4, #0]
 8007524:	701d      	strb	r5, [r3, #0]
 8007526:	e7db      	b.n	80074e0 <_puts_r+0x88>
 8007528:	08007f58 	.word	0x08007f58
 800752c:	08007f78 	.word	0x08007f78
 8007530:	08007f38 	.word	0x08007f38

08007534 <puts>:
 8007534:	4b02      	ldr	r3, [pc, #8]	; (8007540 <puts+0xc>)
 8007536:	4601      	mov	r1, r0
 8007538:	6818      	ldr	r0, [r3, #0]
 800753a:	f7ff bf8d 	b.w	8007458 <_puts_r>
 800753e:	bf00      	nop
 8007540:	20000138 	.word	0x20000138

08007544 <__swbuf_r>:
 8007544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007546:	460e      	mov	r6, r1
 8007548:	4614      	mov	r4, r2
 800754a:	4605      	mov	r5, r0
 800754c:	b118      	cbz	r0, 8007556 <__swbuf_r+0x12>
 800754e:	6983      	ldr	r3, [r0, #24]
 8007550:	b90b      	cbnz	r3, 8007556 <__swbuf_r+0x12>
 8007552:	f000 f9d1 	bl	80078f8 <__sinit>
 8007556:	4b21      	ldr	r3, [pc, #132]	; (80075dc <__swbuf_r+0x98>)
 8007558:	429c      	cmp	r4, r3
 800755a:	d12b      	bne.n	80075b4 <__swbuf_r+0x70>
 800755c:	686c      	ldr	r4, [r5, #4]
 800755e:	69a3      	ldr	r3, [r4, #24]
 8007560:	60a3      	str	r3, [r4, #8]
 8007562:	89a3      	ldrh	r3, [r4, #12]
 8007564:	071a      	lsls	r2, r3, #28
 8007566:	d52f      	bpl.n	80075c8 <__swbuf_r+0x84>
 8007568:	6923      	ldr	r3, [r4, #16]
 800756a:	b36b      	cbz	r3, 80075c8 <__swbuf_r+0x84>
 800756c:	6923      	ldr	r3, [r4, #16]
 800756e:	6820      	ldr	r0, [r4, #0]
 8007570:	1ac0      	subs	r0, r0, r3
 8007572:	6963      	ldr	r3, [r4, #20]
 8007574:	b2f6      	uxtb	r6, r6
 8007576:	4283      	cmp	r3, r0
 8007578:	4637      	mov	r7, r6
 800757a:	dc04      	bgt.n	8007586 <__swbuf_r+0x42>
 800757c:	4621      	mov	r1, r4
 800757e:	4628      	mov	r0, r5
 8007580:	f000 f926 	bl	80077d0 <_fflush_r>
 8007584:	bb30      	cbnz	r0, 80075d4 <__swbuf_r+0x90>
 8007586:	68a3      	ldr	r3, [r4, #8]
 8007588:	3b01      	subs	r3, #1
 800758a:	60a3      	str	r3, [r4, #8]
 800758c:	6823      	ldr	r3, [r4, #0]
 800758e:	1c5a      	adds	r2, r3, #1
 8007590:	6022      	str	r2, [r4, #0]
 8007592:	701e      	strb	r6, [r3, #0]
 8007594:	6963      	ldr	r3, [r4, #20]
 8007596:	3001      	adds	r0, #1
 8007598:	4283      	cmp	r3, r0
 800759a:	d004      	beq.n	80075a6 <__swbuf_r+0x62>
 800759c:	89a3      	ldrh	r3, [r4, #12]
 800759e:	07db      	lsls	r3, r3, #31
 80075a0:	d506      	bpl.n	80075b0 <__swbuf_r+0x6c>
 80075a2:	2e0a      	cmp	r6, #10
 80075a4:	d104      	bne.n	80075b0 <__swbuf_r+0x6c>
 80075a6:	4621      	mov	r1, r4
 80075a8:	4628      	mov	r0, r5
 80075aa:	f000 f911 	bl	80077d0 <_fflush_r>
 80075ae:	b988      	cbnz	r0, 80075d4 <__swbuf_r+0x90>
 80075b0:	4638      	mov	r0, r7
 80075b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075b4:	4b0a      	ldr	r3, [pc, #40]	; (80075e0 <__swbuf_r+0x9c>)
 80075b6:	429c      	cmp	r4, r3
 80075b8:	d101      	bne.n	80075be <__swbuf_r+0x7a>
 80075ba:	68ac      	ldr	r4, [r5, #8]
 80075bc:	e7cf      	b.n	800755e <__swbuf_r+0x1a>
 80075be:	4b09      	ldr	r3, [pc, #36]	; (80075e4 <__swbuf_r+0xa0>)
 80075c0:	429c      	cmp	r4, r3
 80075c2:	bf08      	it	eq
 80075c4:	68ec      	ldreq	r4, [r5, #12]
 80075c6:	e7ca      	b.n	800755e <__swbuf_r+0x1a>
 80075c8:	4621      	mov	r1, r4
 80075ca:	4628      	mov	r0, r5
 80075cc:	f000 f80c 	bl	80075e8 <__swsetup_r>
 80075d0:	2800      	cmp	r0, #0
 80075d2:	d0cb      	beq.n	800756c <__swbuf_r+0x28>
 80075d4:	f04f 37ff 	mov.w	r7, #4294967295
 80075d8:	e7ea      	b.n	80075b0 <__swbuf_r+0x6c>
 80075da:	bf00      	nop
 80075dc:	08007f58 	.word	0x08007f58
 80075e0:	08007f78 	.word	0x08007f78
 80075e4:	08007f38 	.word	0x08007f38

080075e8 <__swsetup_r>:
 80075e8:	4b32      	ldr	r3, [pc, #200]	; (80076b4 <__swsetup_r+0xcc>)
 80075ea:	b570      	push	{r4, r5, r6, lr}
 80075ec:	681d      	ldr	r5, [r3, #0]
 80075ee:	4606      	mov	r6, r0
 80075f0:	460c      	mov	r4, r1
 80075f2:	b125      	cbz	r5, 80075fe <__swsetup_r+0x16>
 80075f4:	69ab      	ldr	r3, [r5, #24]
 80075f6:	b913      	cbnz	r3, 80075fe <__swsetup_r+0x16>
 80075f8:	4628      	mov	r0, r5
 80075fa:	f000 f97d 	bl	80078f8 <__sinit>
 80075fe:	4b2e      	ldr	r3, [pc, #184]	; (80076b8 <__swsetup_r+0xd0>)
 8007600:	429c      	cmp	r4, r3
 8007602:	d10f      	bne.n	8007624 <__swsetup_r+0x3c>
 8007604:	686c      	ldr	r4, [r5, #4]
 8007606:	89a3      	ldrh	r3, [r4, #12]
 8007608:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800760c:	0719      	lsls	r1, r3, #28
 800760e:	d42c      	bmi.n	800766a <__swsetup_r+0x82>
 8007610:	06dd      	lsls	r5, r3, #27
 8007612:	d411      	bmi.n	8007638 <__swsetup_r+0x50>
 8007614:	2309      	movs	r3, #9
 8007616:	6033      	str	r3, [r6, #0]
 8007618:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800761c:	81a3      	strh	r3, [r4, #12]
 800761e:	f04f 30ff 	mov.w	r0, #4294967295
 8007622:	e03e      	b.n	80076a2 <__swsetup_r+0xba>
 8007624:	4b25      	ldr	r3, [pc, #148]	; (80076bc <__swsetup_r+0xd4>)
 8007626:	429c      	cmp	r4, r3
 8007628:	d101      	bne.n	800762e <__swsetup_r+0x46>
 800762a:	68ac      	ldr	r4, [r5, #8]
 800762c:	e7eb      	b.n	8007606 <__swsetup_r+0x1e>
 800762e:	4b24      	ldr	r3, [pc, #144]	; (80076c0 <__swsetup_r+0xd8>)
 8007630:	429c      	cmp	r4, r3
 8007632:	bf08      	it	eq
 8007634:	68ec      	ldreq	r4, [r5, #12]
 8007636:	e7e6      	b.n	8007606 <__swsetup_r+0x1e>
 8007638:	0758      	lsls	r0, r3, #29
 800763a:	d512      	bpl.n	8007662 <__swsetup_r+0x7a>
 800763c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800763e:	b141      	cbz	r1, 8007652 <__swsetup_r+0x6a>
 8007640:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007644:	4299      	cmp	r1, r3
 8007646:	d002      	beq.n	800764e <__swsetup_r+0x66>
 8007648:	4630      	mov	r0, r6
 800764a:	f000 fa5b 	bl	8007b04 <_free_r>
 800764e:	2300      	movs	r3, #0
 8007650:	6363      	str	r3, [r4, #52]	; 0x34
 8007652:	89a3      	ldrh	r3, [r4, #12]
 8007654:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007658:	81a3      	strh	r3, [r4, #12]
 800765a:	2300      	movs	r3, #0
 800765c:	6063      	str	r3, [r4, #4]
 800765e:	6923      	ldr	r3, [r4, #16]
 8007660:	6023      	str	r3, [r4, #0]
 8007662:	89a3      	ldrh	r3, [r4, #12]
 8007664:	f043 0308 	orr.w	r3, r3, #8
 8007668:	81a3      	strh	r3, [r4, #12]
 800766a:	6923      	ldr	r3, [r4, #16]
 800766c:	b94b      	cbnz	r3, 8007682 <__swsetup_r+0x9a>
 800766e:	89a3      	ldrh	r3, [r4, #12]
 8007670:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007678:	d003      	beq.n	8007682 <__swsetup_r+0x9a>
 800767a:	4621      	mov	r1, r4
 800767c:	4630      	mov	r0, r6
 800767e:	f000 fa01 	bl	8007a84 <__smakebuf_r>
 8007682:	89a0      	ldrh	r0, [r4, #12]
 8007684:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007688:	f010 0301 	ands.w	r3, r0, #1
 800768c:	d00a      	beq.n	80076a4 <__swsetup_r+0xbc>
 800768e:	2300      	movs	r3, #0
 8007690:	60a3      	str	r3, [r4, #8]
 8007692:	6963      	ldr	r3, [r4, #20]
 8007694:	425b      	negs	r3, r3
 8007696:	61a3      	str	r3, [r4, #24]
 8007698:	6923      	ldr	r3, [r4, #16]
 800769a:	b943      	cbnz	r3, 80076ae <__swsetup_r+0xc6>
 800769c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80076a0:	d1ba      	bne.n	8007618 <__swsetup_r+0x30>
 80076a2:	bd70      	pop	{r4, r5, r6, pc}
 80076a4:	0781      	lsls	r1, r0, #30
 80076a6:	bf58      	it	pl
 80076a8:	6963      	ldrpl	r3, [r4, #20]
 80076aa:	60a3      	str	r3, [r4, #8]
 80076ac:	e7f4      	b.n	8007698 <__swsetup_r+0xb0>
 80076ae:	2000      	movs	r0, #0
 80076b0:	e7f7      	b.n	80076a2 <__swsetup_r+0xba>
 80076b2:	bf00      	nop
 80076b4:	20000138 	.word	0x20000138
 80076b8:	08007f58 	.word	0x08007f58
 80076bc:	08007f78 	.word	0x08007f78
 80076c0:	08007f38 	.word	0x08007f38

080076c4 <__sflush_r>:
 80076c4:	898a      	ldrh	r2, [r1, #12]
 80076c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076ca:	4605      	mov	r5, r0
 80076cc:	0710      	lsls	r0, r2, #28
 80076ce:	460c      	mov	r4, r1
 80076d0:	d458      	bmi.n	8007784 <__sflush_r+0xc0>
 80076d2:	684b      	ldr	r3, [r1, #4]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	dc05      	bgt.n	80076e4 <__sflush_r+0x20>
 80076d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076da:	2b00      	cmp	r3, #0
 80076dc:	dc02      	bgt.n	80076e4 <__sflush_r+0x20>
 80076de:	2000      	movs	r0, #0
 80076e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076e6:	2e00      	cmp	r6, #0
 80076e8:	d0f9      	beq.n	80076de <__sflush_r+0x1a>
 80076ea:	2300      	movs	r3, #0
 80076ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076f0:	682f      	ldr	r7, [r5, #0]
 80076f2:	602b      	str	r3, [r5, #0]
 80076f4:	d032      	beq.n	800775c <__sflush_r+0x98>
 80076f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076f8:	89a3      	ldrh	r3, [r4, #12]
 80076fa:	075a      	lsls	r2, r3, #29
 80076fc:	d505      	bpl.n	800770a <__sflush_r+0x46>
 80076fe:	6863      	ldr	r3, [r4, #4]
 8007700:	1ac0      	subs	r0, r0, r3
 8007702:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007704:	b10b      	cbz	r3, 800770a <__sflush_r+0x46>
 8007706:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007708:	1ac0      	subs	r0, r0, r3
 800770a:	2300      	movs	r3, #0
 800770c:	4602      	mov	r2, r0
 800770e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007710:	6a21      	ldr	r1, [r4, #32]
 8007712:	4628      	mov	r0, r5
 8007714:	47b0      	blx	r6
 8007716:	1c43      	adds	r3, r0, #1
 8007718:	89a3      	ldrh	r3, [r4, #12]
 800771a:	d106      	bne.n	800772a <__sflush_r+0x66>
 800771c:	6829      	ldr	r1, [r5, #0]
 800771e:	291d      	cmp	r1, #29
 8007720:	d82c      	bhi.n	800777c <__sflush_r+0xb8>
 8007722:	4a2a      	ldr	r2, [pc, #168]	; (80077cc <__sflush_r+0x108>)
 8007724:	40ca      	lsrs	r2, r1
 8007726:	07d6      	lsls	r6, r2, #31
 8007728:	d528      	bpl.n	800777c <__sflush_r+0xb8>
 800772a:	2200      	movs	r2, #0
 800772c:	6062      	str	r2, [r4, #4]
 800772e:	04d9      	lsls	r1, r3, #19
 8007730:	6922      	ldr	r2, [r4, #16]
 8007732:	6022      	str	r2, [r4, #0]
 8007734:	d504      	bpl.n	8007740 <__sflush_r+0x7c>
 8007736:	1c42      	adds	r2, r0, #1
 8007738:	d101      	bne.n	800773e <__sflush_r+0x7a>
 800773a:	682b      	ldr	r3, [r5, #0]
 800773c:	b903      	cbnz	r3, 8007740 <__sflush_r+0x7c>
 800773e:	6560      	str	r0, [r4, #84]	; 0x54
 8007740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007742:	602f      	str	r7, [r5, #0]
 8007744:	2900      	cmp	r1, #0
 8007746:	d0ca      	beq.n	80076de <__sflush_r+0x1a>
 8007748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800774c:	4299      	cmp	r1, r3
 800774e:	d002      	beq.n	8007756 <__sflush_r+0x92>
 8007750:	4628      	mov	r0, r5
 8007752:	f000 f9d7 	bl	8007b04 <_free_r>
 8007756:	2000      	movs	r0, #0
 8007758:	6360      	str	r0, [r4, #52]	; 0x34
 800775a:	e7c1      	b.n	80076e0 <__sflush_r+0x1c>
 800775c:	6a21      	ldr	r1, [r4, #32]
 800775e:	2301      	movs	r3, #1
 8007760:	4628      	mov	r0, r5
 8007762:	47b0      	blx	r6
 8007764:	1c41      	adds	r1, r0, #1
 8007766:	d1c7      	bne.n	80076f8 <__sflush_r+0x34>
 8007768:	682b      	ldr	r3, [r5, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d0c4      	beq.n	80076f8 <__sflush_r+0x34>
 800776e:	2b1d      	cmp	r3, #29
 8007770:	d001      	beq.n	8007776 <__sflush_r+0xb2>
 8007772:	2b16      	cmp	r3, #22
 8007774:	d101      	bne.n	800777a <__sflush_r+0xb6>
 8007776:	602f      	str	r7, [r5, #0]
 8007778:	e7b1      	b.n	80076de <__sflush_r+0x1a>
 800777a:	89a3      	ldrh	r3, [r4, #12]
 800777c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007780:	81a3      	strh	r3, [r4, #12]
 8007782:	e7ad      	b.n	80076e0 <__sflush_r+0x1c>
 8007784:	690f      	ldr	r7, [r1, #16]
 8007786:	2f00      	cmp	r7, #0
 8007788:	d0a9      	beq.n	80076de <__sflush_r+0x1a>
 800778a:	0793      	lsls	r3, r2, #30
 800778c:	680e      	ldr	r6, [r1, #0]
 800778e:	bf08      	it	eq
 8007790:	694b      	ldreq	r3, [r1, #20]
 8007792:	600f      	str	r7, [r1, #0]
 8007794:	bf18      	it	ne
 8007796:	2300      	movne	r3, #0
 8007798:	eba6 0807 	sub.w	r8, r6, r7
 800779c:	608b      	str	r3, [r1, #8]
 800779e:	f1b8 0f00 	cmp.w	r8, #0
 80077a2:	dd9c      	ble.n	80076de <__sflush_r+0x1a>
 80077a4:	6a21      	ldr	r1, [r4, #32]
 80077a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80077a8:	4643      	mov	r3, r8
 80077aa:	463a      	mov	r2, r7
 80077ac:	4628      	mov	r0, r5
 80077ae:	47b0      	blx	r6
 80077b0:	2800      	cmp	r0, #0
 80077b2:	dc06      	bgt.n	80077c2 <__sflush_r+0xfe>
 80077b4:	89a3      	ldrh	r3, [r4, #12]
 80077b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077ba:	81a3      	strh	r3, [r4, #12]
 80077bc:	f04f 30ff 	mov.w	r0, #4294967295
 80077c0:	e78e      	b.n	80076e0 <__sflush_r+0x1c>
 80077c2:	4407      	add	r7, r0
 80077c4:	eba8 0800 	sub.w	r8, r8, r0
 80077c8:	e7e9      	b.n	800779e <__sflush_r+0xda>
 80077ca:	bf00      	nop
 80077cc:	20400001 	.word	0x20400001

080077d0 <_fflush_r>:
 80077d0:	b538      	push	{r3, r4, r5, lr}
 80077d2:	690b      	ldr	r3, [r1, #16]
 80077d4:	4605      	mov	r5, r0
 80077d6:	460c      	mov	r4, r1
 80077d8:	b913      	cbnz	r3, 80077e0 <_fflush_r+0x10>
 80077da:	2500      	movs	r5, #0
 80077dc:	4628      	mov	r0, r5
 80077de:	bd38      	pop	{r3, r4, r5, pc}
 80077e0:	b118      	cbz	r0, 80077ea <_fflush_r+0x1a>
 80077e2:	6983      	ldr	r3, [r0, #24]
 80077e4:	b90b      	cbnz	r3, 80077ea <_fflush_r+0x1a>
 80077e6:	f000 f887 	bl	80078f8 <__sinit>
 80077ea:	4b14      	ldr	r3, [pc, #80]	; (800783c <_fflush_r+0x6c>)
 80077ec:	429c      	cmp	r4, r3
 80077ee:	d11b      	bne.n	8007828 <_fflush_r+0x58>
 80077f0:	686c      	ldr	r4, [r5, #4]
 80077f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d0ef      	beq.n	80077da <_fflush_r+0xa>
 80077fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077fc:	07d0      	lsls	r0, r2, #31
 80077fe:	d404      	bmi.n	800780a <_fflush_r+0x3a>
 8007800:	0599      	lsls	r1, r3, #22
 8007802:	d402      	bmi.n	800780a <_fflush_r+0x3a>
 8007804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007806:	f000 f915 	bl	8007a34 <__retarget_lock_acquire_recursive>
 800780a:	4628      	mov	r0, r5
 800780c:	4621      	mov	r1, r4
 800780e:	f7ff ff59 	bl	80076c4 <__sflush_r>
 8007812:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007814:	07da      	lsls	r2, r3, #31
 8007816:	4605      	mov	r5, r0
 8007818:	d4e0      	bmi.n	80077dc <_fflush_r+0xc>
 800781a:	89a3      	ldrh	r3, [r4, #12]
 800781c:	059b      	lsls	r3, r3, #22
 800781e:	d4dd      	bmi.n	80077dc <_fflush_r+0xc>
 8007820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007822:	f000 f908 	bl	8007a36 <__retarget_lock_release_recursive>
 8007826:	e7d9      	b.n	80077dc <_fflush_r+0xc>
 8007828:	4b05      	ldr	r3, [pc, #20]	; (8007840 <_fflush_r+0x70>)
 800782a:	429c      	cmp	r4, r3
 800782c:	d101      	bne.n	8007832 <_fflush_r+0x62>
 800782e:	68ac      	ldr	r4, [r5, #8]
 8007830:	e7df      	b.n	80077f2 <_fflush_r+0x22>
 8007832:	4b04      	ldr	r3, [pc, #16]	; (8007844 <_fflush_r+0x74>)
 8007834:	429c      	cmp	r4, r3
 8007836:	bf08      	it	eq
 8007838:	68ec      	ldreq	r4, [r5, #12]
 800783a:	e7da      	b.n	80077f2 <_fflush_r+0x22>
 800783c:	08007f58 	.word	0x08007f58
 8007840:	08007f78 	.word	0x08007f78
 8007844:	08007f38 	.word	0x08007f38

08007848 <std>:
 8007848:	2300      	movs	r3, #0
 800784a:	b510      	push	{r4, lr}
 800784c:	4604      	mov	r4, r0
 800784e:	e9c0 3300 	strd	r3, r3, [r0]
 8007852:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007856:	6083      	str	r3, [r0, #8]
 8007858:	8181      	strh	r1, [r0, #12]
 800785a:	6643      	str	r3, [r0, #100]	; 0x64
 800785c:	81c2      	strh	r2, [r0, #14]
 800785e:	6183      	str	r3, [r0, #24]
 8007860:	4619      	mov	r1, r3
 8007862:	2208      	movs	r2, #8
 8007864:	305c      	adds	r0, #92	; 0x5c
 8007866:	f7ff fdef 	bl	8007448 <memset>
 800786a:	4b05      	ldr	r3, [pc, #20]	; (8007880 <std+0x38>)
 800786c:	6263      	str	r3, [r4, #36]	; 0x24
 800786e:	4b05      	ldr	r3, [pc, #20]	; (8007884 <std+0x3c>)
 8007870:	62a3      	str	r3, [r4, #40]	; 0x28
 8007872:	4b05      	ldr	r3, [pc, #20]	; (8007888 <std+0x40>)
 8007874:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007876:	4b05      	ldr	r3, [pc, #20]	; (800788c <std+0x44>)
 8007878:	6224      	str	r4, [r4, #32]
 800787a:	6323      	str	r3, [r4, #48]	; 0x30
 800787c:	bd10      	pop	{r4, pc}
 800787e:	bf00      	nop
 8007880:	08007ce5 	.word	0x08007ce5
 8007884:	08007d07 	.word	0x08007d07
 8007888:	08007d3f 	.word	0x08007d3f
 800788c:	08007d63 	.word	0x08007d63

08007890 <_cleanup_r>:
 8007890:	4901      	ldr	r1, [pc, #4]	; (8007898 <_cleanup_r+0x8>)
 8007892:	f000 b8af 	b.w	80079f4 <_fwalk_reent>
 8007896:	bf00      	nop
 8007898:	080077d1 	.word	0x080077d1

0800789c <__sfmoreglue>:
 800789c:	b570      	push	{r4, r5, r6, lr}
 800789e:	2268      	movs	r2, #104	; 0x68
 80078a0:	1e4d      	subs	r5, r1, #1
 80078a2:	4355      	muls	r5, r2
 80078a4:	460e      	mov	r6, r1
 80078a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80078aa:	f000 f997 	bl	8007bdc <_malloc_r>
 80078ae:	4604      	mov	r4, r0
 80078b0:	b140      	cbz	r0, 80078c4 <__sfmoreglue+0x28>
 80078b2:	2100      	movs	r1, #0
 80078b4:	e9c0 1600 	strd	r1, r6, [r0]
 80078b8:	300c      	adds	r0, #12
 80078ba:	60a0      	str	r0, [r4, #8]
 80078bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80078c0:	f7ff fdc2 	bl	8007448 <memset>
 80078c4:	4620      	mov	r0, r4
 80078c6:	bd70      	pop	{r4, r5, r6, pc}

080078c8 <__sfp_lock_acquire>:
 80078c8:	4801      	ldr	r0, [pc, #4]	; (80078d0 <__sfp_lock_acquire+0x8>)
 80078ca:	f000 b8b3 	b.w	8007a34 <__retarget_lock_acquire_recursive>
 80078ce:	bf00      	nop
 80078d0:	20000dc9 	.word	0x20000dc9

080078d4 <__sfp_lock_release>:
 80078d4:	4801      	ldr	r0, [pc, #4]	; (80078dc <__sfp_lock_release+0x8>)
 80078d6:	f000 b8ae 	b.w	8007a36 <__retarget_lock_release_recursive>
 80078da:	bf00      	nop
 80078dc:	20000dc9 	.word	0x20000dc9

080078e0 <__sinit_lock_acquire>:
 80078e0:	4801      	ldr	r0, [pc, #4]	; (80078e8 <__sinit_lock_acquire+0x8>)
 80078e2:	f000 b8a7 	b.w	8007a34 <__retarget_lock_acquire_recursive>
 80078e6:	bf00      	nop
 80078e8:	20000dca 	.word	0x20000dca

080078ec <__sinit_lock_release>:
 80078ec:	4801      	ldr	r0, [pc, #4]	; (80078f4 <__sinit_lock_release+0x8>)
 80078ee:	f000 b8a2 	b.w	8007a36 <__retarget_lock_release_recursive>
 80078f2:	bf00      	nop
 80078f4:	20000dca 	.word	0x20000dca

080078f8 <__sinit>:
 80078f8:	b510      	push	{r4, lr}
 80078fa:	4604      	mov	r4, r0
 80078fc:	f7ff fff0 	bl	80078e0 <__sinit_lock_acquire>
 8007900:	69a3      	ldr	r3, [r4, #24]
 8007902:	b11b      	cbz	r3, 800790c <__sinit+0x14>
 8007904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007908:	f7ff bff0 	b.w	80078ec <__sinit_lock_release>
 800790c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007910:	6523      	str	r3, [r4, #80]	; 0x50
 8007912:	4b13      	ldr	r3, [pc, #76]	; (8007960 <__sinit+0x68>)
 8007914:	4a13      	ldr	r2, [pc, #76]	; (8007964 <__sinit+0x6c>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	62a2      	str	r2, [r4, #40]	; 0x28
 800791a:	42a3      	cmp	r3, r4
 800791c:	bf04      	itt	eq
 800791e:	2301      	moveq	r3, #1
 8007920:	61a3      	streq	r3, [r4, #24]
 8007922:	4620      	mov	r0, r4
 8007924:	f000 f820 	bl	8007968 <__sfp>
 8007928:	6060      	str	r0, [r4, #4]
 800792a:	4620      	mov	r0, r4
 800792c:	f000 f81c 	bl	8007968 <__sfp>
 8007930:	60a0      	str	r0, [r4, #8]
 8007932:	4620      	mov	r0, r4
 8007934:	f000 f818 	bl	8007968 <__sfp>
 8007938:	2200      	movs	r2, #0
 800793a:	60e0      	str	r0, [r4, #12]
 800793c:	2104      	movs	r1, #4
 800793e:	6860      	ldr	r0, [r4, #4]
 8007940:	f7ff ff82 	bl	8007848 <std>
 8007944:	68a0      	ldr	r0, [r4, #8]
 8007946:	2201      	movs	r2, #1
 8007948:	2109      	movs	r1, #9
 800794a:	f7ff ff7d 	bl	8007848 <std>
 800794e:	68e0      	ldr	r0, [r4, #12]
 8007950:	2202      	movs	r2, #2
 8007952:	2112      	movs	r1, #18
 8007954:	f7ff ff78 	bl	8007848 <std>
 8007958:	2301      	movs	r3, #1
 800795a:	61a3      	str	r3, [r4, #24]
 800795c:	e7d2      	b.n	8007904 <__sinit+0xc>
 800795e:	bf00      	nop
 8007960:	08007f34 	.word	0x08007f34
 8007964:	08007891 	.word	0x08007891

08007968 <__sfp>:
 8007968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796a:	4607      	mov	r7, r0
 800796c:	f7ff ffac 	bl	80078c8 <__sfp_lock_acquire>
 8007970:	4b1e      	ldr	r3, [pc, #120]	; (80079ec <__sfp+0x84>)
 8007972:	681e      	ldr	r6, [r3, #0]
 8007974:	69b3      	ldr	r3, [r6, #24]
 8007976:	b913      	cbnz	r3, 800797e <__sfp+0x16>
 8007978:	4630      	mov	r0, r6
 800797a:	f7ff ffbd 	bl	80078f8 <__sinit>
 800797e:	3648      	adds	r6, #72	; 0x48
 8007980:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007984:	3b01      	subs	r3, #1
 8007986:	d503      	bpl.n	8007990 <__sfp+0x28>
 8007988:	6833      	ldr	r3, [r6, #0]
 800798a:	b30b      	cbz	r3, 80079d0 <__sfp+0x68>
 800798c:	6836      	ldr	r6, [r6, #0]
 800798e:	e7f7      	b.n	8007980 <__sfp+0x18>
 8007990:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007994:	b9d5      	cbnz	r5, 80079cc <__sfp+0x64>
 8007996:	4b16      	ldr	r3, [pc, #88]	; (80079f0 <__sfp+0x88>)
 8007998:	60e3      	str	r3, [r4, #12]
 800799a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800799e:	6665      	str	r5, [r4, #100]	; 0x64
 80079a0:	f000 f847 	bl	8007a32 <__retarget_lock_init_recursive>
 80079a4:	f7ff ff96 	bl	80078d4 <__sfp_lock_release>
 80079a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80079ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80079b0:	6025      	str	r5, [r4, #0]
 80079b2:	61a5      	str	r5, [r4, #24]
 80079b4:	2208      	movs	r2, #8
 80079b6:	4629      	mov	r1, r5
 80079b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80079bc:	f7ff fd44 	bl	8007448 <memset>
 80079c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80079c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80079c8:	4620      	mov	r0, r4
 80079ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079cc:	3468      	adds	r4, #104	; 0x68
 80079ce:	e7d9      	b.n	8007984 <__sfp+0x1c>
 80079d0:	2104      	movs	r1, #4
 80079d2:	4638      	mov	r0, r7
 80079d4:	f7ff ff62 	bl	800789c <__sfmoreglue>
 80079d8:	4604      	mov	r4, r0
 80079da:	6030      	str	r0, [r6, #0]
 80079dc:	2800      	cmp	r0, #0
 80079de:	d1d5      	bne.n	800798c <__sfp+0x24>
 80079e0:	f7ff ff78 	bl	80078d4 <__sfp_lock_release>
 80079e4:	230c      	movs	r3, #12
 80079e6:	603b      	str	r3, [r7, #0]
 80079e8:	e7ee      	b.n	80079c8 <__sfp+0x60>
 80079ea:	bf00      	nop
 80079ec:	08007f34 	.word	0x08007f34
 80079f0:	ffff0001 	.word	0xffff0001

080079f4 <_fwalk_reent>:
 80079f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079f8:	4606      	mov	r6, r0
 80079fa:	4688      	mov	r8, r1
 80079fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a00:	2700      	movs	r7, #0
 8007a02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a06:	f1b9 0901 	subs.w	r9, r9, #1
 8007a0a:	d505      	bpl.n	8007a18 <_fwalk_reent+0x24>
 8007a0c:	6824      	ldr	r4, [r4, #0]
 8007a0e:	2c00      	cmp	r4, #0
 8007a10:	d1f7      	bne.n	8007a02 <_fwalk_reent+0xe>
 8007a12:	4638      	mov	r0, r7
 8007a14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a18:	89ab      	ldrh	r3, [r5, #12]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d907      	bls.n	8007a2e <_fwalk_reent+0x3a>
 8007a1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a22:	3301      	adds	r3, #1
 8007a24:	d003      	beq.n	8007a2e <_fwalk_reent+0x3a>
 8007a26:	4629      	mov	r1, r5
 8007a28:	4630      	mov	r0, r6
 8007a2a:	47c0      	blx	r8
 8007a2c:	4307      	orrs	r7, r0
 8007a2e:	3568      	adds	r5, #104	; 0x68
 8007a30:	e7e9      	b.n	8007a06 <_fwalk_reent+0x12>

08007a32 <__retarget_lock_init_recursive>:
 8007a32:	4770      	bx	lr

08007a34 <__retarget_lock_acquire_recursive>:
 8007a34:	4770      	bx	lr

08007a36 <__retarget_lock_release_recursive>:
 8007a36:	4770      	bx	lr

08007a38 <__swhatbuf_r>:
 8007a38:	b570      	push	{r4, r5, r6, lr}
 8007a3a:	460e      	mov	r6, r1
 8007a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a40:	2900      	cmp	r1, #0
 8007a42:	b096      	sub	sp, #88	; 0x58
 8007a44:	4614      	mov	r4, r2
 8007a46:	461d      	mov	r5, r3
 8007a48:	da08      	bge.n	8007a5c <__swhatbuf_r+0x24>
 8007a4a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	602a      	str	r2, [r5, #0]
 8007a52:	061a      	lsls	r2, r3, #24
 8007a54:	d410      	bmi.n	8007a78 <__swhatbuf_r+0x40>
 8007a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a5a:	e00e      	b.n	8007a7a <__swhatbuf_r+0x42>
 8007a5c:	466a      	mov	r2, sp
 8007a5e:	f000 f9a7 	bl	8007db0 <_fstat_r>
 8007a62:	2800      	cmp	r0, #0
 8007a64:	dbf1      	blt.n	8007a4a <__swhatbuf_r+0x12>
 8007a66:	9a01      	ldr	r2, [sp, #4]
 8007a68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a70:	425a      	negs	r2, r3
 8007a72:	415a      	adcs	r2, r3
 8007a74:	602a      	str	r2, [r5, #0]
 8007a76:	e7ee      	b.n	8007a56 <__swhatbuf_r+0x1e>
 8007a78:	2340      	movs	r3, #64	; 0x40
 8007a7a:	2000      	movs	r0, #0
 8007a7c:	6023      	str	r3, [r4, #0]
 8007a7e:	b016      	add	sp, #88	; 0x58
 8007a80:	bd70      	pop	{r4, r5, r6, pc}
	...

08007a84 <__smakebuf_r>:
 8007a84:	898b      	ldrh	r3, [r1, #12]
 8007a86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a88:	079d      	lsls	r5, r3, #30
 8007a8a:	4606      	mov	r6, r0
 8007a8c:	460c      	mov	r4, r1
 8007a8e:	d507      	bpl.n	8007aa0 <__smakebuf_r+0x1c>
 8007a90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a94:	6023      	str	r3, [r4, #0]
 8007a96:	6123      	str	r3, [r4, #16]
 8007a98:	2301      	movs	r3, #1
 8007a9a:	6163      	str	r3, [r4, #20]
 8007a9c:	b002      	add	sp, #8
 8007a9e:	bd70      	pop	{r4, r5, r6, pc}
 8007aa0:	ab01      	add	r3, sp, #4
 8007aa2:	466a      	mov	r2, sp
 8007aa4:	f7ff ffc8 	bl	8007a38 <__swhatbuf_r>
 8007aa8:	9900      	ldr	r1, [sp, #0]
 8007aaa:	4605      	mov	r5, r0
 8007aac:	4630      	mov	r0, r6
 8007aae:	f000 f895 	bl	8007bdc <_malloc_r>
 8007ab2:	b948      	cbnz	r0, 8007ac8 <__smakebuf_r+0x44>
 8007ab4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ab8:	059a      	lsls	r2, r3, #22
 8007aba:	d4ef      	bmi.n	8007a9c <__smakebuf_r+0x18>
 8007abc:	f023 0303 	bic.w	r3, r3, #3
 8007ac0:	f043 0302 	orr.w	r3, r3, #2
 8007ac4:	81a3      	strh	r3, [r4, #12]
 8007ac6:	e7e3      	b.n	8007a90 <__smakebuf_r+0xc>
 8007ac8:	4b0d      	ldr	r3, [pc, #52]	; (8007b00 <__smakebuf_r+0x7c>)
 8007aca:	62b3      	str	r3, [r6, #40]	; 0x28
 8007acc:	89a3      	ldrh	r3, [r4, #12]
 8007ace:	6020      	str	r0, [r4, #0]
 8007ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ad4:	81a3      	strh	r3, [r4, #12]
 8007ad6:	9b00      	ldr	r3, [sp, #0]
 8007ad8:	6163      	str	r3, [r4, #20]
 8007ada:	9b01      	ldr	r3, [sp, #4]
 8007adc:	6120      	str	r0, [r4, #16]
 8007ade:	b15b      	cbz	r3, 8007af8 <__smakebuf_r+0x74>
 8007ae0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	f000 f975 	bl	8007dd4 <_isatty_r>
 8007aea:	b128      	cbz	r0, 8007af8 <__smakebuf_r+0x74>
 8007aec:	89a3      	ldrh	r3, [r4, #12]
 8007aee:	f023 0303 	bic.w	r3, r3, #3
 8007af2:	f043 0301 	orr.w	r3, r3, #1
 8007af6:	81a3      	strh	r3, [r4, #12]
 8007af8:	89a0      	ldrh	r0, [r4, #12]
 8007afa:	4305      	orrs	r5, r0
 8007afc:	81a5      	strh	r5, [r4, #12]
 8007afe:	e7cd      	b.n	8007a9c <__smakebuf_r+0x18>
 8007b00:	08007891 	.word	0x08007891

08007b04 <_free_r>:
 8007b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b06:	2900      	cmp	r1, #0
 8007b08:	d044      	beq.n	8007b94 <_free_r+0x90>
 8007b0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b0e:	9001      	str	r0, [sp, #4]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f1a1 0404 	sub.w	r4, r1, #4
 8007b16:	bfb8      	it	lt
 8007b18:	18e4      	addlt	r4, r4, r3
 8007b1a:	f000 f97d 	bl	8007e18 <__malloc_lock>
 8007b1e:	4a1e      	ldr	r2, [pc, #120]	; (8007b98 <_free_r+0x94>)
 8007b20:	9801      	ldr	r0, [sp, #4]
 8007b22:	6813      	ldr	r3, [r2, #0]
 8007b24:	b933      	cbnz	r3, 8007b34 <_free_r+0x30>
 8007b26:	6063      	str	r3, [r4, #4]
 8007b28:	6014      	str	r4, [r2, #0]
 8007b2a:	b003      	add	sp, #12
 8007b2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b30:	f000 b978 	b.w	8007e24 <__malloc_unlock>
 8007b34:	42a3      	cmp	r3, r4
 8007b36:	d908      	bls.n	8007b4a <_free_r+0x46>
 8007b38:	6825      	ldr	r5, [r4, #0]
 8007b3a:	1961      	adds	r1, r4, r5
 8007b3c:	428b      	cmp	r3, r1
 8007b3e:	bf01      	itttt	eq
 8007b40:	6819      	ldreq	r1, [r3, #0]
 8007b42:	685b      	ldreq	r3, [r3, #4]
 8007b44:	1949      	addeq	r1, r1, r5
 8007b46:	6021      	streq	r1, [r4, #0]
 8007b48:	e7ed      	b.n	8007b26 <_free_r+0x22>
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	b10b      	cbz	r3, 8007b54 <_free_r+0x50>
 8007b50:	42a3      	cmp	r3, r4
 8007b52:	d9fa      	bls.n	8007b4a <_free_r+0x46>
 8007b54:	6811      	ldr	r1, [r2, #0]
 8007b56:	1855      	adds	r5, r2, r1
 8007b58:	42a5      	cmp	r5, r4
 8007b5a:	d10b      	bne.n	8007b74 <_free_r+0x70>
 8007b5c:	6824      	ldr	r4, [r4, #0]
 8007b5e:	4421      	add	r1, r4
 8007b60:	1854      	adds	r4, r2, r1
 8007b62:	42a3      	cmp	r3, r4
 8007b64:	6011      	str	r1, [r2, #0]
 8007b66:	d1e0      	bne.n	8007b2a <_free_r+0x26>
 8007b68:	681c      	ldr	r4, [r3, #0]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	6053      	str	r3, [r2, #4]
 8007b6e:	4421      	add	r1, r4
 8007b70:	6011      	str	r1, [r2, #0]
 8007b72:	e7da      	b.n	8007b2a <_free_r+0x26>
 8007b74:	d902      	bls.n	8007b7c <_free_r+0x78>
 8007b76:	230c      	movs	r3, #12
 8007b78:	6003      	str	r3, [r0, #0]
 8007b7a:	e7d6      	b.n	8007b2a <_free_r+0x26>
 8007b7c:	6825      	ldr	r5, [r4, #0]
 8007b7e:	1961      	adds	r1, r4, r5
 8007b80:	428b      	cmp	r3, r1
 8007b82:	bf04      	itt	eq
 8007b84:	6819      	ldreq	r1, [r3, #0]
 8007b86:	685b      	ldreq	r3, [r3, #4]
 8007b88:	6063      	str	r3, [r4, #4]
 8007b8a:	bf04      	itt	eq
 8007b8c:	1949      	addeq	r1, r1, r5
 8007b8e:	6021      	streq	r1, [r4, #0]
 8007b90:	6054      	str	r4, [r2, #4]
 8007b92:	e7ca      	b.n	8007b2a <_free_r+0x26>
 8007b94:	b003      	add	sp, #12
 8007b96:	bd30      	pop	{r4, r5, pc}
 8007b98:	20000dcc 	.word	0x20000dcc

08007b9c <sbrk_aligned>:
 8007b9c:	b570      	push	{r4, r5, r6, lr}
 8007b9e:	4e0e      	ldr	r6, [pc, #56]	; (8007bd8 <sbrk_aligned+0x3c>)
 8007ba0:	460c      	mov	r4, r1
 8007ba2:	6831      	ldr	r1, [r6, #0]
 8007ba4:	4605      	mov	r5, r0
 8007ba6:	b911      	cbnz	r1, 8007bae <sbrk_aligned+0x12>
 8007ba8:	f000 f88c 	bl	8007cc4 <_sbrk_r>
 8007bac:	6030      	str	r0, [r6, #0]
 8007bae:	4621      	mov	r1, r4
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	f000 f887 	bl	8007cc4 <_sbrk_r>
 8007bb6:	1c43      	adds	r3, r0, #1
 8007bb8:	d00a      	beq.n	8007bd0 <sbrk_aligned+0x34>
 8007bba:	1cc4      	adds	r4, r0, #3
 8007bbc:	f024 0403 	bic.w	r4, r4, #3
 8007bc0:	42a0      	cmp	r0, r4
 8007bc2:	d007      	beq.n	8007bd4 <sbrk_aligned+0x38>
 8007bc4:	1a21      	subs	r1, r4, r0
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	f000 f87c 	bl	8007cc4 <_sbrk_r>
 8007bcc:	3001      	adds	r0, #1
 8007bce:	d101      	bne.n	8007bd4 <sbrk_aligned+0x38>
 8007bd0:	f04f 34ff 	mov.w	r4, #4294967295
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	bd70      	pop	{r4, r5, r6, pc}
 8007bd8:	20000dd0 	.word	0x20000dd0

08007bdc <_malloc_r>:
 8007bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007be0:	1ccd      	adds	r5, r1, #3
 8007be2:	f025 0503 	bic.w	r5, r5, #3
 8007be6:	3508      	adds	r5, #8
 8007be8:	2d0c      	cmp	r5, #12
 8007bea:	bf38      	it	cc
 8007bec:	250c      	movcc	r5, #12
 8007bee:	2d00      	cmp	r5, #0
 8007bf0:	4607      	mov	r7, r0
 8007bf2:	db01      	blt.n	8007bf8 <_malloc_r+0x1c>
 8007bf4:	42a9      	cmp	r1, r5
 8007bf6:	d905      	bls.n	8007c04 <_malloc_r+0x28>
 8007bf8:	230c      	movs	r3, #12
 8007bfa:	603b      	str	r3, [r7, #0]
 8007bfc:	2600      	movs	r6, #0
 8007bfe:	4630      	mov	r0, r6
 8007c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c04:	4e2e      	ldr	r6, [pc, #184]	; (8007cc0 <_malloc_r+0xe4>)
 8007c06:	f000 f907 	bl	8007e18 <__malloc_lock>
 8007c0a:	6833      	ldr	r3, [r6, #0]
 8007c0c:	461c      	mov	r4, r3
 8007c0e:	bb34      	cbnz	r4, 8007c5e <_malloc_r+0x82>
 8007c10:	4629      	mov	r1, r5
 8007c12:	4638      	mov	r0, r7
 8007c14:	f7ff ffc2 	bl	8007b9c <sbrk_aligned>
 8007c18:	1c43      	adds	r3, r0, #1
 8007c1a:	4604      	mov	r4, r0
 8007c1c:	d14d      	bne.n	8007cba <_malloc_r+0xde>
 8007c1e:	6834      	ldr	r4, [r6, #0]
 8007c20:	4626      	mov	r6, r4
 8007c22:	2e00      	cmp	r6, #0
 8007c24:	d140      	bne.n	8007ca8 <_malloc_r+0xcc>
 8007c26:	6823      	ldr	r3, [r4, #0]
 8007c28:	4631      	mov	r1, r6
 8007c2a:	4638      	mov	r0, r7
 8007c2c:	eb04 0803 	add.w	r8, r4, r3
 8007c30:	f000 f848 	bl	8007cc4 <_sbrk_r>
 8007c34:	4580      	cmp	r8, r0
 8007c36:	d13a      	bne.n	8007cae <_malloc_r+0xd2>
 8007c38:	6821      	ldr	r1, [r4, #0]
 8007c3a:	3503      	adds	r5, #3
 8007c3c:	1a6d      	subs	r5, r5, r1
 8007c3e:	f025 0503 	bic.w	r5, r5, #3
 8007c42:	3508      	adds	r5, #8
 8007c44:	2d0c      	cmp	r5, #12
 8007c46:	bf38      	it	cc
 8007c48:	250c      	movcc	r5, #12
 8007c4a:	4629      	mov	r1, r5
 8007c4c:	4638      	mov	r0, r7
 8007c4e:	f7ff ffa5 	bl	8007b9c <sbrk_aligned>
 8007c52:	3001      	adds	r0, #1
 8007c54:	d02b      	beq.n	8007cae <_malloc_r+0xd2>
 8007c56:	6823      	ldr	r3, [r4, #0]
 8007c58:	442b      	add	r3, r5
 8007c5a:	6023      	str	r3, [r4, #0]
 8007c5c:	e00e      	b.n	8007c7c <_malloc_r+0xa0>
 8007c5e:	6822      	ldr	r2, [r4, #0]
 8007c60:	1b52      	subs	r2, r2, r5
 8007c62:	d41e      	bmi.n	8007ca2 <_malloc_r+0xc6>
 8007c64:	2a0b      	cmp	r2, #11
 8007c66:	d916      	bls.n	8007c96 <_malloc_r+0xba>
 8007c68:	1961      	adds	r1, r4, r5
 8007c6a:	42a3      	cmp	r3, r4
 8007c6c:	6025      	str	r5, [r4, #0]
 8007c6e:	bf18      	it	ne
 8007c70:	6059      	strne	r1, [r3, #4]
 8007c72:	6863      	ldr	r3, [r4, #4]
 8007c74:	bf08      	it	eq
 8007c76:	6031      	streq	r1, [r6, #0]
 8007c78:	5162      	str	r2, [r4, r5]
 8007c7a:	604b      	str	r3, [r1, #4]
 8007c7c:	4638      	mov	r0, r7
 8007c7e:	f104 060b 	add.w	r6, r4, #11
 8007c82:	f000 f8cf 	bl	8007e24 <__malloc_unlock>
 8007c86:	f026 0607 	bic.w	r6, r6, #7
 8007c8a:	1d23      	adds	r3, r4, #4
 8007c8c:	1af2      	subs	r2, r6, r3
 8007c8e:	d0b6      	beq.n	8007bfe <_malloc_r+0x22>
 8007c90:	1b9b      	subs	r3, r3, r6
 8007c92:	50a3      	str	r3, [r4, r2]
 8007c94:	e7b3      	b.n	8007bfe <_malloc_r+0x22>
 8007c96:	6862      	ldr	r2, [r4, #4]
 8007c98:	42a3      	cmp	r3, r4
 8007c9a:	bf0c      	ite	eq
 8007c9c:	6032      	streq	r2, [r6, #0]
 8007c9e:	605a      	strne	r2, [r3, #4]
 8007ca0:	e7ec      	b.n	8007c7c <_malloc_r+0xa0>
 8007ca2:	4623      	mov	r3, r4
 8007ca4:	6864      	ldr	r4, [r4, #4]
 8007ca6:	e7b2      	b.n	8007c0e <_malloc_r+0x32>
 8007ca8:	4634      	mov	r4, r6
 8007caa:	6876      	ldr	r6, [r6, #4]
 8007cac:	e7b9      	b.n	8007c22 <_malloc_r+0x46>
 8007cae:	230c      	movs	r3, #12
 8007cb0:	603b      	str	r3, [r7, #0]
 8007cb2:	4638      	mov	r0, r7
 8007cb4:	f000 f8b6 	bl	8007e24 <__malloc_unlock>
 8007cb8:	e7a1      	b.n	8007bfe <_malloc_r+0x22>
 8007cba:	6025      	str	r5, [r4, #0]
 8007cbc:	e7de      	b.n	8007c7c <_malloc_r+0xa0>
 8007cbe:	bf00      	nop
 8007cc0:	20000dcc 	.word	0x20000dcc

08007cc4 <_sbrk_r>:
 8007cc4:	b538      	push	{r3, r4, r5, lr}
 8007cc6:	4d06      	ldr	r5, [pc, #24]	; (8007ce0 <_sbrk_r+0x1c>)
 8007cc8:	2300      	movs	r3, #0
 8007cca:	4604      	mov	r4, r0
 8007ccc:	4608      	mov	r0, r1
 8007cce:	602b      	str	r3, [r5, #0]
 8007cd0:	f7f9 ff9c 	bl	8001c0c <_sbrk>
 8007cd4:	1c43      	adds	r3, r0, #1
 8007cd6:	d102      	bne.n	8007cde <_sbrk_r+0x1a>
 8007cd8:	682b      	ldr	r3, [r5, #0]
 8007cda:	b103      	cbz	r3, 8007cde <_sbrk_r+0x1a>
 8007cdc:	6023      	str	r3, [r4, #0]
 8007cde:	bd38      	pop	{r3, r4, r5, pc}
 8007ce0:	20000dd4 	.word	0x20000dd4

08007ce4 <__sread>:
 8007ce4:	b510      	push	{r4, lr}
 8007ce6:	460c      	mov	r4, r1
 8007ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cec:	f000 f8a0 	bl	8007e30 <_read_r>
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	bfab      	itete	ge
 8007cf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007cf6:	89a3      	ldrhlt	r3, [r4, #12]
 8007cf8:	181b      	addge	r3, r3, r0
 8007cfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007cfe:	bfac      	ite	ge
 8007d00:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d02:	81a3      	strhlt	r3, [r4, #12]
 8007d04:	bd10      	pop	{r4, pc}

08007d06 <__swrite>:
 8007d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d0a:	461f      	mov	r7, r3
 8007d0c:	898b      	ldrh	r3, [r1, #12]
 8007d0e:	05db      	lsls	r3, r3, #23
 8007d10:	4605      	mov	r5, r0
 8007d12:	460c      	mov	r4, r1
 8007d14:	4616      	mov	r6, r2
 8007d16:	d505      	bpl.n	8007d24 <__swrite+0x1e>
 8007d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f000 f868 	bl	8007df4 <_lseek_r>
 8007d24:	89a3      	ldrh	r3, [r4, #12]
 8007d26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d2e:	81a3      	strh	r3, [r4, #12]
 8007d30:	4632      	mov	r2, r6
 8007d32:	463b      	mov	r3, r7
 8007d34:	4628      	mov	r0, r5
 8007d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d3a:	f000 b817 	b.w	8007d6c <_write_r>

08007d3e <__sseek>:
 8007d3e:	b510      	push	{r4, lr}
 8007d40:	460c      	mov	r4, r1
 8007d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d46:	f000 f855 	bl	8007df4 <_lseek_r>
 8007d4a:	1c43      	adds	r3, r0, #1
 8007d4c:	89a3      	ldrh	r3, [r4, #12]
 8007d4e:	bf15      	itete	ne
 8007d50:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d5a:	81a3      	strheq	r3, [r4, #12]
 8007d5c:	bf18      	it	ne
 8007d5e:	81a3      	strhne	r3, [r4, #12]
 8007d60:	bd10      	pop	{r4, pc}

08007d62 <__sclose>:
 8007d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d66:	f000 b813 	b.w	8007d90 <_close_r>
	...

08007d6c <_write_r>:
 8007d6c:	b538      	push	{r3, r4, r5, lr}
 8007d6e:	4d07      	ldr	r5, [pc, #28]	; (8007d8c <_write_r+0x20>)
 8007d70:	4604      	mov	r4, r0
 8007d72:	4608      	mov	r0, r1
 8007d74:	4611      	mov	r1, r2
 8007d76:	2200      	movs	r2, #0
 8007d78:	602a      	str	r2, [r5, #0]
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	f7f9 fef5 	bl	8001b6a <_write>
 8007d80:	1c43      	adds	r3, r0, #1
 8007d82:	d102      	bne.n	8007d8a <_write_r+0x1e>
 8007d84:	682b      	ldr	r3, [r5, #0]
 8007d86:	b103      	cbz	r3, 8007d8a <_write_r+0x1e>
 8007d88:	6023      	str	r3, [r4, #0]
 8007d8a:	bd38      	pop	{r3, r4, r5, pc}
 8007d8c:	20000dd4 	.word	0x20000dd4

08007d90 <_close_r>:
 8007d90:	b538      	push	{r3, r4, r5, lr}
 8007d92:	4d06      	ldr	r5, [pc, #24]	; (8007dac <_close_r+0x1c>)
 8007d94:	2300      	movs	r3, #0
 8007d96:	4604      	mov	r4, r0
 8007d98:	4608      	mov	r0, r1
 8007d9a:	602b      	str	r3, [r5, #0]
 8007d9c:	f7f9 ff01 	bl	8001ba2 <_close>
 8007da0:	1c43      	adds	r3, r0, #1
 8007da2:	d102      	bne.n	8007daa <_close_r+0x1a>
 8007da4:	682b      	ldr	r3, [r5, #0]
 8007da6:	b103      	cbz	r3, 8007daa <_close_r+0x1a>
 8007da8:	6023      	str	r3, [r4, #0]
 8007daa:	bd38      	pop	{r3, r4, r5, pc}
 8007dac:	20000dd4 	.word	0x20000dd4

08007db0 <_fstat_r>:
 8007db0:	b538      	push	{r3, r4, r5, lr}
 8007db2:	4d07      	ldr	r5, [pc, #28]	; (8007dd0 <_fstat_r+0x20>)
 8007db4:	2300      	movs	r3, #0
 8007db6:	4604      	mov	r4, r0
 8007db8:	4608      	mov	r0, r1
 8007dba:	4611      	mov	r1, r2
 8007dbc:	602b      	str	r3, [r5, #0]
 8007dbe:	f7f9 fefc 	bl	8001bba <_fstat>
 8007dc2:	1c43      	adds	r3, r0, #1
 8007dc4:	d102      	bne.n	8007dcc <_fstat_r+0x1c>
 8007dc6:	682b      	ldr	r3, [r5, #0]
 8007dc8:	b103      	cbz	r3, 8007dcc <_fstat_r+0x1c>
 8007dca:	6023      	str	r3, [r4, #0]
 8007dcc:	bd38      	pop	{r3, r4, r5, pc}
 8007dce:	bf00      	nop
 8007dd0:	20000dd4 	.word	0x20000dd4

08007dd4 <_isatty_r>:
 8007dd4:	b538      	push	{r3, r4, r5, lr}
 8007dd6:	4d06      	ldr	r5, [pc, #24]	; (8007df0 <_isatty_r+0x1c>)
 8007dd8:	2300      	movs	r3, #0
 8007dda:	4604      	mov	r4, r0
 8007ddc:	4608      	mov	r0, r1
 8007dde:	602b      	str	r3, [r5, #0]
 8007de0:	f7f9 fefb 	bl	8001bda <_isatty>
 8007de4:	1c43      	adds	r3, r0, #1
 8007de6:	d102      	bne.n	8007dee <_isatty_r+0x1a>
 8007de8:	682b      	ldr	r3, [r5, #0]
 8007dea:	b103      	cbz	r3, 8007dee <_isatty_r+0x1a>
 8007dec:	6023      	str	r3, [r4, #0]
 8007dee:	bd38      	pop	{r3, r4, r5, pc}
 8007df0:	20000dd4 	.word	0x20000dd4

08007df4 <_lseek_r>:
 8007df4:	b538      	push	{r3, r4, r5, lr}
 8007df6:	4d07      	ldr	r5, [pc, #28]	; (8007e14 <_lseek_r+0x20>)
 8007df8:	4604      	mov	r4, r0
 8007dfa:	4608      	mov	r0, r1
 8007dfc:	4611      	mov	r1, r2
 8007dfe:	2200      	movs	r2, #0
 8007e00:	602a      	str	r2, [r5, #0]
 8007e02:	461a      	mov	r2, r3
 8007e04:	f7f9 fef4 	bl	8001bf0 <_lseek>
 8007e08:	1c43      	adds	r3, r0, #1
 8007e0a:	d102      	bne.n	8007e12 <_lseek_r+0x1e>
 8007e0c:	682b      	ldr	r3, [r5, #0]
 8007e0e:	b103      	cbz	r3, 8007e12 <_lseek_r+0x1e>
 8007e10:	6023      	str	r3, [r4, #0]
 8007e12:	bd38      	pop	{r3, r4, r5, pc}
 8007e14:	20000dd4 	.word	0x20000dd4

08007e18 <__malloc_lock>:
 8007e18:	4801      	ldr	r0, [pc, #4]	; (8007e20 <__malloc_lock+0x8>)
 8007e1a:	f7ff be0b 	b.w	8007a34 <__retarget_lock_acquire_recursive>
 8007e1e:	bf00      	nop
 8007e20:	20000dc8 	.word	0x20000dc8

08007e24 <__malloc_unlock>:
 8007e24:	4801      	ldr	r0, [pc, #4]	; (8007e2c <__malloc_unlock+0x8>)
 8007e26:	f7ff be06 	b.w	8007a36 <__retarget_lock_release_recursive>
 8007e2a:	bf00      	nop
 8007e2c:	20000dc8 	.word	0x20000dc8

08007e30 <_read_r>:
 8007e30:	b538      	push	{r3, r4, r5, lr}
 8007e32:	4d07      	ldr	r5, [pc, #28]	; (8007e50 <_read_r+0x20>)
 8007e34:	4604      	mov	r4, r0
 8007e36:	4608      	mov	r0, r1
 8007e38:	4611      	mov	r1, r2
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	602a      	str	r2, [r5, #0]
 8007e3e:	461a      	mov	r2, r3
 8007e40:	f7f9 fe76 	bl	8001b30 <_read>
 8007e44:	1c43      	adds	r3, r0, #1
 8007e46:	d102      	bne.n	8007e4e <_read_r+0x1e>
 8007e48:	682b      	ldr	r3, [r5, #0]
 8007e4a:	b103      	cbz	r3, 8007e4e <_read_r+0x1e>
 8007e4c:	6023      	str	r3, [r4, #0]
 8007e4e:	bd38      	pop	{r3, r4, r5, pc}
 8007e50:	20000dd4 	.word	0x20000dd4

08007e54 <_init>:
 8007e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e56:	bf00      	nop
 8007e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e5a:	bc08      	pop	{r3}
 8007e5c:	469e      	mov	lr, r3
 8007e5e:	4770      	bx	lr

08007e60 <_fini>:
 8007e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e62:	bf00      	nop
 8007e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e66:	bc08      	pop	{r3}
 8007e68:	469e      	mov	lr, r3
 8007e6a:	4770      	bx	lr
